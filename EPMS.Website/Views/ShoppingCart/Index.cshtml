@using System.Globalization
@using EPMS.WebModels.Resources.WebsiteClient.ShoppingCart
@using EPMS.Website.Resources.Shared
@model EPMS.WebModels.ViewModels.WebsiteClient.ShoppingCartListViewModel

@{
    ViewBag.Title = EPMS.WebModels.Resources.WebsiteClient.ShoppingCart.Cart.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var direction = Common.TextDirection;
    DateTime today = DateTime.Now;
}
<link href="~/Content/pnotify.core.min.css" rel="stylesheet" />

<div id="page_header" class="gradient bottom-shadow">
    <div class="bgback bg3"></div>
    <div class="container">
        <div class="row">
            <div class="span6">
                <ul class="breadcrumbs fixclear">
                    <li><a href="/Home/Index">@EPMS.WebModels.Resources.WebsiteClient.Common.Common.HomePage</a></li>
                    <li>@Cart.BCCart</li>
                </ul>
                <span id="current-date">@today.ToString("dddd, dd MMMM yyyy", CultureInfo.CreateSpecificCulture("en-US"))</span>
            </div>
            <div class="span6">
                <div class="header-titles">
                    <h2>@Cart.BCCart</h2>
                </div>
            </div>
        </div>
    </div>
    <div class="shadowUP"></div>
</div>

<section id="content">
    <div class="container">
        <div id="mainbody">
            <div class="row">
                <div class="span12 directionR ">
                    <h1 class="page-title">@Cart.Title</h1>
                    @using (Html.BeginForm("CheckOut", "ShoppingCart", FormMethod.Post, new { @class = "form-horizontal", @id = "PaymentForm", role = "form", enctype = "multipart/form-data" }))
                    {
                        <input type="hidden" id="fromCart" name="fromCart" value="" />
                        if (Model.ShoppingCart.ShoppingCartItems.Any())
                        {
                            <table class="shopping-table">
                                <tr>
                                    <th style="display: none">@Cart.ProductId</th>
                                    <th colspan="2">@Cart.ItemPictureAndName</th>
                                    <th>@Cart.ItemCode</th>
                                    <th>@Cart.Qty</th>
                                    <th>@Cart.UnitPrice</th>
                                    <th>@Cart.Total</th>
                                    <th>@Cart.Delete</th>
                                </tr>

                                @for (int i = 0; i < Model.ShoppingCart.ShoppingCartItems.Count; i++)
                                {
                                    <tr class="cartRow">
                                        @Html.HiddenFor(model => model.ShoppingCart.CartId)
                                        @Html.HiddenFor(model => model.ShoppingCart.UserCartId)
                                        @Html.HiddenFor(model => model.ShoppingCart.ShoppingCartItems[i].ProductId)
                                        <td class="product-id" style="display: none">@Model.ShoppingCart.ShoppingCartItems[i].ProductId</td>

                                        @Html.HiddenFor(model => model.ShoppingCart.ShoppingCartItems[i].ImagePath)
                                        <td class="image-column"><a href="#"><img src="@Model.ShoppingCart.ShoppingCartItems[i].ImagePath" alt=""></a></td>

                                        @Html.HiddenFor(model => model.ShoppingCart.ShoppingCartItems[i].ItemNameEn)
                                        @Html.HiddenFor(model => model.ShoppingCart.ShoppingCartItems[i].ItemNameAr)
                                        <td><p><a href="#">@(direction == "ltr" ? Model.ShoppingCart.ShoppingCartItems[i].ItemNameEn : Model.ShoppingCart.ShoppingCartItems[i].ItemNameAr)</a></p></td>

                                        @Html.HiddenFor(model => model.ShoppingCart.ShoppingCartItems[i].SkuCode)
                                        <td><p>@Model.ShoppingCart.ShoppingCartItems[i].SkuCode</p></td>

                                        <td class="quantity">
                                            @Html.TextBoxFor(model => model.ShoppingCart.ShoppingCartItems[i].Quantity, new { id = Model.ShoppingCart.ShoppingCartItems[i].ProductId, @class = "cartnum toBeRequired" })
                                            @*<input id="@Model.ShoppingCart.ProductId" type="text" value="@Model.ShoppingCart.Quantity" class="cartnum">*@
                                        </td>

                                        @Html.HiddenFor(model => model.ShoppingCart.ShoppingCartItems[i].UnitPrice)
                                        <td><p class="cartPrice">@Model.ShoppingCart.ShoppingCartItems[i].UnitPrice</p></td>

                                        @Html.HiddenFor(model => model.ShoppingCart.ShoppingCartItems[i].ItemTotal, new { @id = "ItemTotal-" + Model.ShoppingCart.ShoppingCartItems[i].ProductId, @Value = Model.ShoppingCart.ShoppingCartItems[i].Quantity * Model.ShoppingCart.ShoppingCartItems[i].UnitPrice })
                                        <td><p class="cartTotal Total_@Model.ShoppingCart.ShoppingCartItems[i].ProductId">@(Model.ShoppingCart.ShoppingCartItems[i].Quantity * Model.ShoppingCart.ShoppingCartItems[i].UnitPrice)</p></td>
                                        <td><a href="javascript:void(0);" class="cartDelete"><i class="fa fa-close"></i></a></td>
                                    </tr>
                                }
                                <tr class="">
                                    @Html.HiddenFor(model => model.GrandTotal, new { @id = "GrandTotal" })
                                    <td class="cartTotalCount" colspan="5"><strong>@Cart.GrandTotal</strong></td>
                                    <td><strong><p class="cartGTotal">0</p></strong></td>
                                </tr>
                            </table>
                            <div class="control-group">
                                <div class="controls">
                                    @*<input type="image" name="submit" src="https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif" border="0" alt="Submit" />*@
                                    <a href="http://localhost/EPMSWebsiteCP/CMS/Quotation/Create" class="btn" onclick="setFromValue(event)">Proceed to CheckOut</a>
                                    @*<input class="btn" id="submit-form" type="submit" value="Proceed to CheckOut" onclick="setFromValue(event)" />*@
                                </div>
                            </div>
                        }
                        else
                        {
                            <h4>@Cart.CartEmpty</h4>
                        }
                    }

                </div>
            </div>
        </div>
    </div>
</section>
<script type="text/javascript" src="~/Scripts/pnotify.core.min.js"></script>

<script>
    var siteUrl;
    var cartItemList = '@Html.Raw(Json.Encode(Model.ShoppingCart.ShoppingCartItems))';
    var cartList = JSON.parse(cartItemList);
    jQuery(document).ready(function () {
        siteUrl = jQuery("#siteURL").val();
        calculateGrandTotal();
        jQuery(".cartDelete").on("click", function () {
            var productId = jQuery(this).closest("tr").find(".product-id").text();
            var row = jQuery(this).parent().parent();
            deleteCartItem(productId, row);
        });
        jQuery(".cartnum").on("change", function () {
            var qty = parseInt(this.value);
            var productId = this.id;
            jQuery.each(cartList, function (key, value) {
                if (value.ProductId == productId) {
                    var unitPrice = value.UnitPrice;
                    var totalPrice = qty * unitPrice;
                    jQuery(".Total_" + value.ProductId).text(totalPrice);
                    calculateGrandTotal();
                    return true;
                }
            });
            // update DB if User is Authenticated
            var isAuthenticated = '@User.Identity.IsAuthenticated';
            if (isAuthenticated == 'True' || isAuthenticated == 'true') {
                UpdateCartInDB(productId, qty);
            }
        });
    });

    function calculateGrandTotal() {
        var gtotal = 0;
        jQuery(".shopping-table tr.cartRow").each(function () {

            var qty = parseInt(jQuery(this).find(".cartnum ").val());

            var price = parseInt(jQuery(this).find(".cartPrice ").text());
            var total = qty * price;
            jQuery(this).find(".cartTotal").text(total);
            gtotal += total;
        });
        $("#GrandTotal").val(gtotal);
        jQuery(".cartGTotal").text(gtotal);
        return true;
    }
    function deleteCartItem(productId, row) {
        var url = siteUrl + "/ShoppingCart/DeleteFromCart";
        jQuery.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            traditional: true,
            data: {
                productId: productId,
            },
            success: function (data) {
                if (data.response == "OK") {
                    jQuery(row).remove();
                    calculateGrandTotal();
                    if (data.count == 0) {
                        $(".shopping-cart").addClass('cart_details_no_item');
                        $(".shopping-cart").removeClass('cart_details');
                    }
                    var checkOutBtn = '<a href="../../ShoppingCart/Index" class="checkout">Checkout<span class="icon-chevron-right"></span></a>';
                    var shoppingcart = 'Number of items ' + data.count;
                    $(".shopping-cart").text(shoppingcart);
                    if (data.count != 0) {
                        $(".shopping-cart").append(checkOutBtn);
                    }
                    new PNotify({
                        title: 'Removed',
                        text: "\n" + data.itemName + ' has been successfully removed from your Cart.',
                        delay: 1000
                    });
                }
            },
            error: function (e) {
                alert('Error=' + e.toString());
            }
        });
    }
    function setFromValue(event) {
        $("#fromCart").val("ShoppingCart");
        var isAuthenticated = '@ViewBag.IsAuthenticated';
        if (isAuthenticated == 'False' || isAuthenticated == 'false') {
            event.preventDefault();
            $("#loginPopUp").click();
            return false;
        }
        return true;
    }
    function UpdateCartInDB(productId, qty) {
        var url = siteUrl + "/ShoppingCart/UpdateQuantity";
        $.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            traditional: true,
            data: {
                productId: productId,
                quantity: qty
            },
            success: function (data) {
                if (data.response == "OK") {
                    new PNotify({
                        title: 'Updated',
                        text: "\n" + data.itemName + ' quantity has been successfully updated.',
                        delay: 1000
                    });
                }
            },
            error: function (e) {
                alert('Error=' + e.toString());
            }
        });
    }
</script>