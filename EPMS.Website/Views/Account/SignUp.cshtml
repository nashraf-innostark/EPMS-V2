@model EPMS.Models.IdentityModels.ViewModels.WebCustomerIdentityViewModel
@{
    Layout = null;
}

<div class="login_register_stuff hide">
    <!-- Login/Register Modal forms - hidded by default to be opened through modal -->
    <div id="login_panel">
        <div class="inner-container login-panel">
            <h3 class="m_title">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.LoginTitle</h3>
            @using (Html.BeginForm("Login", "Account", FormMethod.Post, new { @class = "form-horizontal", @id = "LoginFrom", role = "form", enctype = "multipart/form-data" }))
            {
                <a class="create_account cursorHand" onclick="ppOpen('#register_panel', '280');">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.CreateAccount</a>
                @Html.AntiForgeryToken()
                <input type="hidden" id="fromLogin" name="fromLogin" value="" />
                @Html.TextBoxFor(model => model.Login.UserName, new { @id = "LoginUserName", @class = "toBeRequired inputbox ", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.UserName })
                @Html.PasswordFor(model => model.Login.Password, new { @id = "LoginPassword", @class = "toBeRequired inputbox ", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.Password })
    <input type="submit" id="login" name="submit" value="@EPMS.WebModels.Resources.WebsiteClient.Login.Login.LogIn" onclick="setSignUpFromValue(1)" />
                @*<a href="#" class="login_facebook">login with facebook</a>*@
            }
            <div class="links"><a href="#" onclick="ppOpen('#forgot_panel', '350');">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.ForgotYourPassword</a> / <a href="#" onclick="ppOpen('#resetpassword_panel', '350');">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.ResetYourPassword</a></div>
        </div>
    </div><!-- end login panel -->
    <div id="register_panel">
        <div class="inner-container register-panel">
            <h3 class="m_title">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.CreateAccount</h3>
            @using (Html.BeginForm("SignUp", "Account", FormMethod.Post, new { @class = "form-horizontal", @id = "SignUpFrom", role = "form" }))
            {
                <input type="hidden" id="fromSignUp" name="fromSignUp" value="" />
                <p>
                    @Html.TextBoxFor(model => model.SignUp.UserName, new { @class = "toBeRequired", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.UserName })
                    @Html.ValidationMessageFor(m => m.SignUp.UserName, String.Empty, new { @class = "required" })
                </p>
                <p>
                    @Html.TextBoxFor(model => model.SignUp.CustomerNameEn, new { @class = "toBeRequired", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.NameEn })
                    @Html.ValidationMessageFor(m => m.SignUp.CustomerNameEn, String.Empty, new { @class = "required" })
                </p>
                <p>
                    @Html.TextBoxFor(model => model.SignUp.Email, new { @class = "toBeRequired", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.Email })
                    @Html.ValidationMessageFor(m => m.SignUp.Email, String.Empty, new { @class = "required" })
                </p>
                <p>
                    @Html.PasswordFor(model => model.SignUp.Password, new { @class = "toBeRequired", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.Password })
                    @Html.ValidationMessageFor(m => m.SignUp.Password, String.Empty, new { @class = "required" })
                </p>
                <p>
                    @Html.PasswordFor(model => model.SignUp.ConfirmPassword, new { @class = "toBeRequired", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.ConfirmPassword })
                    @Html.ValidationMessageFor(m => m.SignUp.ConfirmPassword, String.Empty, new { @class = "required" })
                </p>
                <p>
                    <input type="submit" id="create" value="@EPMS.WebModels.Resources.WebsiteClient.Login.Login.CreateMyAccount" onclick="setSignUpFromValue(2)" />
                </p>
            }
            <div class="links"><a href="#" onclick="ppOpen('#login_panel', '800');">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.AleadyHaveAccount</a></div>
        </div>
    </div>
    <div id="forgot_panel">
        <div class="inner-container forgot-panel">
            <h3 class="m_title">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.ForgotDetails</h3>
            @using (Html.BeginForm("ForgotPassword", "Account", FormMethod.Post, new { @class = "form-horizontal", @id = "ForgotPasswordFrom", role = "form" }))
            {
                <input type="hidden" id="fromForgot" name="fromForgot" value="" />
                <p>
                    @Html.TextBoxFor(model => model.ForgotPassword.UserName, new { @id = "ForgotPasswordEmail", @class = "toBeRequired", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.UserName })
                    @Html.ValidationMessageFor(m => m.ForgotPassword.UserName, String.Empty, new { @class = "required" })
                </p>
                <p>
                    <input type="submit" id="recover" name="submit" value="@EPMS.WebModels.Resources.WebsiteClient.Login.Login.SendDetails" onclick="setSignUpFromValue(3)" />
                </p>
            }
            <div class="links"><a href="#" onclick="ppOpen('#login_panel', '800');">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.RememberNow</a></div>
        </div>
    </div>
    <div id="resetpassword_panel">
        <div class="inner-container register-panel">
            <h3 class="m_title">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.ResetPassword</h3>
            @using (Html.BeginForm("ResetPassword", "Account", FormMethod.Post, new { @class = "form-horizontal", @id = "ResetPasswordFrom", role = "form" }))
            {
                <input type="hidden" id="fromReset" name="fromReset" value="" />
                @Html.HiddenFor(model => model.ResetPassword.Code, new { @id = "reset-code" })
                @Html.HiddenFor(model => model.ResetPassword.UserId, new { @id = "user-id" })
                <p>
                    @Html.PasswordFor(model => model.ResetPassword.Password, new { @class = "toBeRequired", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.Password })
                    @Html.ValidationMessageFor(m => m.ResetPassword.Password, String.Empty, new { @class = "required" })
                </p>
                <p>
                    @Html.PasswordFor(model => model.ResetPassword.ConfirmPassword, new { @class = "toBeRequired", @placeholder = EPMS.WebModels.Resources.WebsiteClient.Customer.Customer.ConfirmPassword })
                    @Html.ValidationMessageFor(m => m.ResetPassword.ConfirmPassword, String.Empty, new { @class = "required" })
                </p>
                <p>
                    <input type="submit" id="reset" value="@EPMS.WebModels.Resources.WebsiteClient.Login.Login.Reset" onclick="setSignUpFromValue(4)" />
                </p>
            }
            <div class="links"><a href="#" onclick="ppOpen('#login_panel', '800');">@EPMS.WebModels.Resources.WebsiteClient.Login.Login.AlreadyReset</a></div>
        </div>
    </div>
</div><!-- end login register stuff -->

<script>
    var userNameValid = false;
    var emailValid = false;
    jQuery('#SignUp_UserName').live("blur", function () {
        var username = jQuery(this).val();
        if (username != "" && username != undefined) {
            var siteURL = jQuery('#siteURL').val();
            var url = siteURL + "/Account/ValidateUserName";
            jQuery.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                traditional: true,
                data: {
                    username: username
                },
                success: function (data) {
                    if (data == "Success") {
                        userNameValid = true;
                        if (emailValid == true) {
                            jQuery("#create").removeClass('not-active');
                            //jQuery("#create").addClass('active');
                        }
                    }
                    else {
                        jQuery("#create").addClass('not-active');
                        new PNotify({
                            title: 'Error',
                            text: data
                        });
                    }
                },
                error: function (e) {
                    alert('Error=' + e.toString());
                    jQuery(".tempLoader").click();
                }
            });
        }
    });
    jQuery('#SignUp_Email').live("blur", function () {
        var email = jQuery(this).val();
        if (email != "" && email != undefined) {
            var siteURL = jQuery('#siteURL').val();
            var url = siteURL + "/Account/ValidateEmail";
            jQuery.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                traditional: true,
                data: {
                    email: email
                },
                success: function (data) {
                    if (data == "Success") {
                        emailValid = true;
                        if (userNameValid == true) {
                            jQuery("#create").removeClass('not-active');
                            //jQuery("#create").addClass('active');
                        }
                    }
                    else {
                        jQuery("#create").addClass('not-active');
                        new PNotify({
                            title: 'Error',
                            text: data
                        });
                    }
                },
                error: function (e) {
                    alert('Error=' + e.toString());
                    jQuery(".tempLoader").click();
                }
            });
        }
    });
    function setSignUpFromValue(num) {
        switch (num) {
            case 1:
                $("#fromLogin").val("Login");
                break;
            case 2:
                $("#fromSignUp").val("SignUp");
                break;
            case 3:
                $("#fromForgot").val("Forgot");
                break;
            case 4:
                $("#fromReset").val("Reset");
                break;
            default:
        }
        return true;
    }
</script>