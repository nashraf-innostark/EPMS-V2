<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accept" xml:space="preserve">
    <value>I Accept</value>
  </data>
  <data name="Agreement" xml:space="preserve">
    <value>Agreement</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="AvailableVacancies" xml:space="preserve">
    <value>Available Vacancies</value>
  </data>
  <data name="BirthDate" xml:space="preserve">
    <value>Birth Date</value>
  </data>
  <data name="BirthPlace" xml:space="preserve">
    <value>Birth Place</value>
  </data>
  <data name="Certificate" xml:space="preserve">
    <value>Certificate</value>
  </data>
  <data name="CertificateDate" xml:space="preserve">
    <value>Certificate Date</value>
  </data>
  <data name="CollegeSchoolName" xml:space="preserve">
    <value>College Name / School Name</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>Company Name</value>
  </data>
  <data name="Department" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="Disclaimer" xml:space="preserve">
    <value>I whose name is mentioned in the beginning of this form confirm that I am a person with good behavior and personality and the information that I have provided in all the fields in the form above are accurate and are not false or forged in any way, and if in case anything was proven otherwise, I would take total responsibility of all the penalties that would be put on me according to the Anti-Fraud system.</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EmployeedNow" xml:space="preserve">
    <value>Are You Employeed Now?</value>
  </data>
  <data name="ErrorJobApplicant" xml:space="preserve">
    <value>There is some error in Application. Please verify.</value>
  </data>
  <data name="EverWorkInGoverment" xml:space="preserve">
    <value>Did You Ever Work In Goverment</value>
  </data>
  <data name="Experience" xml:space="preserve">
    <value>Experience</value>
  </data>
  <data name="FamilyName" xml:space="preserve">
    <value>Family Name</value>
  </data>
  <data name="FamilyNameAr" xml:space="preserve">
    <value>Family Name Arabic</value>
  </data>
  <data name="Field" xml:space="preserve">
    <value>Field</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="FirstNameAr" xml:space="preserve">
    <value>First Name Arabic</value>
  </data>
  <data name="From" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="GetMonthlyPayment" xml:space="preserve">
    <value>Do You Get Monthly Payment</value>
  </data>
  <data name="GovermentAreaWorked" xml:space="preserve">
    <value>What is the Goverment Area you Worked For</value>
  </data>
  <data name="GovernmentJobOfficial" xml:space="preserve">
    <value>Was The Government Job Official?</value>
  </data>
  <data name="GovtJobLeavingDateG" xml:space="preserve">
    <value>When did you leave - Gregorian</value>
  </data>
  <data name="GovtJobLeavingDateH" xml:space="preserve">
    <value>When did you leave - Hijri</value>
  </data>
  <data name="JobDescription" xml:space="preserve">
    <value>Job Description</value>
  </data>
  <data name="JobTitle" xml:space="preserve">
    <value>Job Title</value>
  </data>
  <data name="LanguagesCanSpeak" xml:space="preserve">
    <value>Languages You Can Speak</value>
  </data>
  <data name="MiddleName" xml:space="preserve">
    <value>Middle Name</value>
  </data>
  <data name="MiddleNameAr" xml:space="preserve">
    <value>Middle Name Arabic</value>
  </data>
  <data name="MobileNumber" xml:space="preserve">
    <value>Mobile Number</value>
  </data>
  <data name="Nationality" xml:space="preserve">
    <value>Nationality</value>
  </data>
  <data name="NoOfFamilyMembers" xml:space="preserve">
    <value>Number of Family Members</value>
  </data>
  <data name="NoOfYears" xml:space="preserve">
    <value>Number of Years</value>
  </data>
  <data name="Notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="PassportNumber" xml:space="preserve">
    <value>Passport Number</value>
  </data>
  <data name="PlaceOfStudy" xml:space="preserve">
    <value>Place of Study</value>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="Qualification" xml:space="preserve">
    <value>Qualification</value>
  </data>
  <data name="ReasonOfLeaving" xml:space="preserve">
    <value>What is the reason of leaving</value>
  </data>
  <data name="ReasonToLeave" xml:space="preserve">
    <value>Reason to Leave</value>
  </data>
  <data name="Salary" xml:space="preserve">
    <value>Salary</value>
  </data>
  <data name="Serial" xml:space="preserve">
    <value>Serial</value>
  </data>
  <data name="Sex" xml:space="preserve">
    <value>Sex</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="SuccessJobApplicant" xml:space="preserve">
    <value>You have successfully applied for job. You will contacted soon.</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Job Applicant</value>
  </data>
  <data name="To" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="TypeOfWork" xml:space="preserve">
    <value>Type of Work</value>
  </data>
</root>