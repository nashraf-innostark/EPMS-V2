@using System.Collections.Generic
@using System.Configuration
@using System.Linq
@using EPMS.Models.MenuModels
@model EPMS.WebModels.ViewModels.Common.MenuViewModel
@{
    var direction = EPMS.WebModels.Resources.Shared.Common.TextDirection;
    Layout = null;
    string[] modules = (string[])Session["UserModules"];
    if (modules != null)
    {
        for (int i = 0; i < modules.Count(); i++)
        {
            switch (modules[i])
            {
                case "Dashboard":
                    modules[i] = "Dashboard";
                    break;
                case "HRS":
                    modules[i] = "Human Resources System";
                    break;
                case "PMS":
                    modules[i] = "Project Management System";
                    break;
                case "IS":
                    modules[i] = "Inventory System";
                    break;
                case "NS":
                    modules[i] = "Alert System";
                    break;
                case "CL":
                    modules[i] = "Contacts List";
                    break;
                case "CP":
                    modules[i] = "Company Profile";
                    break;
                case "CS":
                    modules[i] = "Customer Service";
                    break;
                case "Mt":
                    modules[i] = "Meetings";
                    break;
                case "HI":
                    modules[i] = "Help";
                    break;
                case "Reports":
                    modules[i] = "Reports";
                    break;
                case "ProjectsTasksReport":
                    modules[i] = "ProjectsTasksReport";
                    break;
                case "CustomerServiceReport":
                    modules[i] = "CustomerServiceReport";
                    break;
                case "InventorySystemReports":
                    modules[i] = "InventorySystemReports";
                    break;
                case "Website":
                    modules[i] = "Website";
                    break;
                default:
                    break;
            }
        }
    }
}

@{
    if (Model.MenuRights != null)
    {
        // loop through menu headers one by one and populate childs
        foreach (MenuRight header in Model.MenuHeaders.OrderBy(c => c.Menu.SortOrder).ToList())
        {
            // get child items with respect to menu header
            IList<MenuRight> menuRightchildList = Model.MenuRights.Where(menuright => menuright.Menu.ParentItem != null && menuright.Menu.ParentItem.MenuId == header.Menu.MenuId).OrderBy(c => c.Menu.SortOrder).ToList();
            if (modules.Contains(header.Menu.MenuTitle) || (header.Menu.MenuTitle == "User Management"))
            {
                <li class="@header.Menu.MenuItemClass">
                    <a href="@(String.IsNullOrEmpty(header.Menu.MenuTargetController) ? "#" : (ConfigurationManager.AppSettings["SiteURL"].ToString()) + "/" + header.Menu.MenuTargetController + "/" + header.Menu.MenuFunction)" class="sub-nav-container">
                        <i class="icon-photon @header.Menu.MenuImagePath"></i>
                        @if (direction == "ltr")
                        {
                            <span class="nav-selection">@header.Menu.MenuTitle</span>
                        }
                        else
                        {
                            <span class="nav-selection">@header.Menu.MenuTitleA</span>
                        }
                        @if (menuRightchildList.Any())
                        {
                            <i class="icon-menu-arrow"></i>
                        }
                    </a>
                    <div class="sub-nav">
                        <ul class="nav">
                            @{
                foreach (MenuRight menuRight in menuRightchildList)
                {
                    // display childs
                    if (direction == "ltr")
                    {
                        switch (menuRight.Menu.MenuTitle)
                        {
                            case "Projects and Tasks Report":
                                if (modules.Contains("ProjectsTasksReport"))
                                {
                                    <li>
                                        @Html.ActionLink(menuRight.Menu.MenuTitle, menuRight.Menu.MenuFunction, menuRight.Menu.MenuTargetController, null, new { @class = Request.Url.ToString().Contains(menuRight.Menu.MenuTargetController + "/" + menuRight.Menu.MenuFunction) == true ? "active innerSelected" : "" })
                                    </li>
                                }
                                break;
                            case "Customer Service":
                                if (modules.Contains("CustomerServiceReport"))
                                {
                                    <li>
                                        @Html.ActionLink(menuRight.Menu.MenuTitle, menuRight.Menu.MenuFunction, menuRight.Menu.MenuTargetController, null, new { @class = Request.Url.ToString().Contains(menuRight.Menu.MenuTargetController + "/" + menuRight.Menu.MenuFunction) == true ? "active innerSelected" : "" })
                                    </li>
                                }
                                break;
                            case "Inventory System":
                                if (modules.Contains("InventorySystemReports"))
                                {
                                    <li>
                                        @Html.ActionLink(menuRight.Menu.MenuTitle, menuRight.Menu.MenuFunction, menuRight.Menu.MenuTargetController, null, new { @class = Request.Url.ToString().Contains(menuRight.Menu.MenuTargetController + "/" + menuRight.Menu.MenuFunction) == true ? "active innerSelected" : "" })
                                    </li>
                                }
                                break;
                            default:
                            <li>
                                @Html.ActionLink(menuRight.Menu.MenuTitle, menuRight.Menu.MenuFunction, menuRight.Menu.MenuTargetController, null, new { @class = Request.Url.ToString().Contains(menuRight.Menu.MenuTargetController + "/" + menuRight.Menu.MenuFunction) == true ? "active innerSelected" : "" })
                            </li>
                                break;
                        }
                    }
                    else
                    {
                        switch (menuRight.Menu.MenuTitleA)
                        {
                            case "تقارير المشاريع و المهام":
                                if (modules.Contains("ProjectsTasksReport"))
                                {
                                    <li>
                                        @Html.ActionLink(menuRight.Menu.MenuTitleA, menuRight.Menu.MenuFunction, menuRight.Menu.MenuTargetController, null, new {@class = Request.Url.ToString().Contains(menuRight.Menu.MenuTargetController + "/" + menuRight.Menu.MenuFunction) == true ? "active innerSelected" : ""})
                                    </li>
                                }
                                break;
                            case "خدمة العملاء":
                                if (modules.Contains("CustomerServiceReport"))
                                {
                                    <li>
                                        @Html.ActionLink(menuRight.Menu.MenuTitleA, menuRight.Menu.MenuFunction, menuRight.Menu.MenuTargetController, null, new {@class = Request.Url.ToString().Contains(menuRight.Menu.MenuTargetController + "/" + menuRight.Menu.MenuFunction) == true ? "active innerSelected" : ""})
                                    </li>
                                }
                                break;
                            case "نظام مستودعات":
                                if (modules.Contains("InventorySystemReports"))
                                {
                                    <li>
                                        @Html.ActionLink(menuRight.Menu.MenuTitleA, menuRight.Menu.MenuFunction, menuRight.Menu.MenuTargetController, null, new {@class = Request.Url.ToString().Contains(menuRight.Menu.MenuTargetController + "/" + menuRight.Menu.MenuFunction) == true ? "active innerSelected" : ""})
                                    </li>
                                }
                                break;
                            default:
                                <li>
                                    @Html.ActionLink(menuRight.Menu.MenuTitleA, menuRight.Menu.MenuFunction, menuRight.Menu.MenuTargetController, null, new { @class = Request.Url.ToString().Contains(menuRight.Menu.MenuTargetController + "/" + menuRight.Menu.MenuFunction) == true ? "active innerSelected" : "" })
                                </li>
                                break;
                        }
                    }

                }
                            }
                        </ul>
                    </div>
                </li>
            }
        }
    }
}

