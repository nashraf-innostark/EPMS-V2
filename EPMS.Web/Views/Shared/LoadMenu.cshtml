@using System.Collections.Generic
@using System.Configuration
@using System.Linq
@using EPMS.Models.MenuModels
@model EPMS.Web.ViewModels.Common.MenuViewModel
@{
    Layout = null;
    string[] module = (string[])Session["UserModules"];
    if (module != null)
    {
        for (int i = 0; i < module.Count(); i++)
        {
            switch (module[i])
            {
                case "Dashboard":
                    module[i] = "Dashboard";
                    break;
                case "HRS":
                    module[i] = "Human Resources System";
                    break;
                case "PMS":
                    module[i] = "Project Management System";
                    break;
                case "NS":
                    module[i] = "Notification System";
                    break;
                case "CL":
                    module[i] = "Contacts List";
                    break;
                case "CP":
                    module[i] = "Company Profile";
                    break;
                case "CS":
                    module[i] = "Customer Service";
                    break;
                case "Mt":
                    module[i] = "Meetings";
                    break;
                case "HI":
                    module[i] = "Help";
                    break;
                default:
                    break;
            }
        }   
    }
}

    @{
        if (Model.MenuRights != null)
        {
            // loop through menu headers one by one and populate childs
            foreach (MenuRight header in Model.MenuHeaders.OrderBy(c => c.Menu.SortOrder).ToList())
            {
                // get child items with respect to menu header
                IList<MenuRight> menuRightchildList = Model.MenuRights.Where(menuright => menuright.Menu.ParentItem != null && menuright.Menu.ParentItem.MenuId == header.Menu.MenuId).OrderBy(c => c.Menu.SortOrder).ToList();
                if (module.Contains(header.Menu.MenuTitle) || (header.Menu.MenuTitle == "User Management" || header.Menu.MenuTitle == "Contacts List" || header.Menu.MenuTitle == "Company Profile" || header.Menu.MenuTitle == "Help"))
                {
                    <li class="@header.Menu.MenuItemClass">
                    <a href="@(String.IsNullOrEmpty(header.Menu.MenuTargetController) ? "#" : (ConfigurationManager.AppSettings["SiteURL"].ToString()) + "/" + header.Menu.MenuTargetController + "/" + header.Menu.MenuFunction)" class="sub-nav-container">
                        <i class="icon-photon @header.Menu.MenuImagePath"></i>
                        <span class="nav-selection">@header.Menu.MenuTitle</span>
                        @if (menuRightchildList.Any())
                        {
                            <i class="icon-menu-arrow"></i>
                        }
                    </a>
                    <div class="sub-nav">
                        <ul class="nav">
                            @{
                                foreach (MenuRight menuRight in menuRightchildList)
                                {
                                    // display childs
                                    <li>
                                        @Html.ActionLink(menuRight.Menu.MenuTitle, menuRight.Menu.MenuFunction, menuRight.Menu.MenuTargetController, null, new {@class = Request.Url.ToString().Contains(menuRight.Menu.MenuTargetController + "/" + menuRight.Menu.MenuFunction) == true ? "active innerSelected" : ""})
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </li>
            }
        }
        }
    }

