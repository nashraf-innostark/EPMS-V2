@model  EPMS.Models.IdentityModels.ViewModels.RegisterViewModel
@{
    ViewBag.Title = EPMS.WebModels.Resources.UserManagement.CreateUser.PageTitleCreate;
    string btnText = EPMS.WebModels.Resources.UserManagement.CreateUser.BtnSave;
    var setDiasble = "false";
    if (Model != null)
    {
        if (!string.IsNullOrEmpty(Model.UserId))
        {
            ViewBag.Title = EPMS.WebModels.Resources.UserManagement.CreateUser.PageTitleUpdate;
            btnText = EPMS.WebModels.Resources.UserManagement.CreateUser.BtnUpdate;
            setDiasble = "readonly";
        }
    }
    Layout = "~/Views/Shared/_Layout.cshtml";
    var direction = EPMS.WebModels.Resources.Shared.Common.TextDirection;
    ViewBag.MessageVM = TempData["message"];
}

@*<link rel="stylesheet" type="text/css" href="~/Scripts/App/select2/select2.css" />*@
<script type="text/javascript" src="~/Scripts/App/select2/select2.js"></script>

<!-- Navigation Bar -->
<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="dashboard-En.html">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/Account/Users">
                @EPMS.WebModels.Resources.UserManagement.CreateUser.Users
            </a>
        </li>
        <li class="current">
            <a href="">
                @ViewBag.Title
            </a>


        </li>
    </ul>
</div>
<!-- Page heading -->
<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@ViewBag.Title</small></h2>
</header>
<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
<!-- Page heading ends -->
<!-- Form starts.  -->
@using (Html.BeginForm("Create", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <div class="container-fluid">
        @Html.AntiForgeryToken()

        @Html.HiddenFor(m => m.UserId)
        @Html.HiddenFor(m => m.oldRole)
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="selectedEmployee">@EPMS.WebModels.Resources.UserManagement.CreateUser.Employee</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @(direction == "ltr" ?
                        Html.DropDownListFor(x => x.SelectedEmployee, new SelectList(Model.EmployeesDDL, "EmployeeId", "EmployeeNameE"), EPMS.WebModels.Resources.UserManagement.CreateUser.SelectEmployee, new { @class = "select2me", id = "selectedEmployee" }) :
                        Html.DropDownListFor(x => x.SelectedEmployee, new SelectList(Model.EmployeesDDL, "EmployeeId", "EmployeeNameA"), EPMS.WebModels.Resources.UserManagement.CreateUser.SelectEmployee, new { @class = "select2me", id = "selectedEmployee" })
                    )
                    <label id="emloyeeValidate"></label>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="useremail">@EPMS.WebModels.Resources.UserManagement.CreateUser.Email</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.Email, new { id = "useremail", @readonly = "readonly" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="UserName">@EPMS.WebModels.Resources.UserManagement.CreateUser.Username</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.UserName, new { placeholder = EPMS.WebModels.Resources.UserManagement.CreateUser.EnterUsername, id = "UserName", @readonly = @setDiasble })
                    <label id="usernameValidation"></label>
                    @*@Html.ValidationMessageFor(m => m.UserName, "", new { @class = "required" })*@
                </div>
            </div>
        </div>
        @if (Model != null)
        {
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="roleId">@EPMS.WebModels.Resources.UserManagement.CreateUser.Role</label>
                </div>
                <div class="span2">
                    <div class="controls">
                        @Html.DropDownListFor(x => x.SelectedRole, new SelectList(Model.Roles, "Id", "Name"), EPMS.WebModels.Resources.UserManagement.CreateUser.SelectRole, new { @class = "select2me", id = "roleId" })
                        <label id="roleValidation"></label>
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="password">@EPMS.WebModels.Resources.UserManagement.CreateUser.Password</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control ltr", placeholder = EPMS.WebModels.Resources.UserManagement.CreateUser.Password, id = "password" })
                        <label id="passwordAuthentication"></label>
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="confirmPassword">@EPMS.WebModels.Resources.UserManagement.CreateUser.ConfirmPassword</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control ltr", placeholder = EPMS.WebModels.Resources.UserManagement.CreateUser.Password, id = "confirmPassword" })
                        <label id="confirmPasswordValidate"></label>
                        @*@Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "required" })*@
                    </div>
                </div>
            </div>
        }
        @if (ViewBag.UserLimitReach == "Yes")
        {
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="submit" class="btn" onclick="return validateUserPassword(event);" disabled>@btnText</button>
                </div>
            </div>
        }
        else
        {
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="submit" class="btn" onclick="return validateUserPassword(event);">@btnText</button>
                </div>
            </div>
        }
    </div>
}
<!-- Matter ends -->

<script>
    $(function () {

        $("[readonly='false']").removeAttr("readonly");
        $("#selectedEmployee").on("change", function () {
            var empList = '@Html.Raw(Json.Encode(Model.EmployeesDDL))';
            var parsed = JSON.parse(empList);
            var empId = parseInt($(this).val());
            $.each(parsed, function (key, value) {
                if (value.EmployeeId == empId) {
                    $("#useremail").val(value.Email);
                }
            });
        });
    });
    function validateUserPassword(event) {
        var userPassword = $("#password").val();
        var confirmpassword = $("#confirmPassword").val();
        var username = $("#UserName").val();
        var selectedRole = $("#roleId").val();
        var selectedEmployee = $("#selectedEmployee").val();
        var model = '@(Model.UserId == null ? "true" : "false")';
        var counter = 0;
        if ((userPassword == null || userPassword == "") && model) {
            $("#passwordAuthentication").text("Password Field is required");
            $("#passwordAuthentication").addClass("Error");
            $("#password").css("background-color", "pink");
            counter++;
        } else if (userPassword.length < 6 && model) {
            $("#passwordAuthentication").text("Minimum Password length is 6 characters");
            $("#passwordAuthentication").addClass("Error");
            $("#password").css("background-color", "pink");
            counter++;
        }
        else {
            $("#passwordAuthentication").text("");
            $("#passwordAuthentication").removeClass("Error");
            $("#password").css("background-color", "white");
            if ((confirmpassword == null || confirmpassword == "" || confirmpassword == undefined || userPassword != confirmpassword)) {
                $("#confirmPasswordValidate").text("Password and Confirmation Password do not match.");
                $("#confirmPasswordValidate").addClass("Error");
                $("#confirmPassword").css("background-color", "pink");
                counter++;
            } else {
                $("#confirmPasswordValidate").text("");
                $("#confirmPasswordValidate").removeClass("Error");
                $("#confirmPassword").css("background-color", "white");
            }
        }
        if ((selectedEmployee == null || selectedEmployee == "" || selectedEmployee == undefined) && model) {
            $("#emloyeeValidate").text("Please Select Employee");
            $("#emloyeeValidate").addClass("Error");
            counter++;
        } else {
            $("#emloyeeValidate").text("");
            $("#emloyeeValidate").removeClass("Error");
        }
        if ((selectedRole == null || selectedRole == "" || selectedRole == undefined) && model) {
            $("#roleValidation").text("Please Select Role");
            $("#roleValidation").addClass("Error");
            counter++;
        } else {
            $("#roleValidation").text("");
            $("#roleValidation").removeClass("Error");
        }
        if (username == null || username == "" || username == undefined) {
            $("#usernameValidation").text("Username is required");
            $("#usernameValidation").addClass("Error");
            $("#UserName").css("background-color", "pink");
            counter++;
        } else {
            $("#usernameValidation").text("");
            $("#usernameValidation").removeClass("Error");
            $("#UserName").css("background-color", "white");
        }
        if (counter > 0) {
            //implementing focus back to error
            if ($(".Error").length > 0) {
                var divId = $(".Error")[0].id;
                if ($("#" + divId).length > 0)
                    $("#" + divId).focus();
                event.preventDefault();
                return false;
            }
        }
        return true;
    }

</script>
