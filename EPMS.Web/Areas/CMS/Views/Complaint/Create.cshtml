@model  EPMS.Web.ViewModels.Complaint.ComplaintViewModel
@{
    ViewBag.Title = EPMS.Web.Resources.CMS.Complaint.PageTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var direction = EPMS.Web.Resources.Shared.Common.TextDirection;
    var pageHeading = Model.Complaint.ComplaintId > 0 ? EPMS.Web.Resources.CMS.Complaint.ReplyPageHeading : EPMS.Web.Resources.CMS.Complaint.CreatePageHeading;
}

<!-- Navigation Bar -->
<div class="breadcrumb-container" dir="ltr">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/CMS/Complaint/Index">
                <i>@EPMS.Web.Resources.CMS.Complaint.ComplaintsList</i>
            </a>
        </li>
        <li class="current">
            <a href="javascript:;">@ViewBag.Title</a>
        </li>
    </ul>
</div>
<!-- Page heading -->
<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@pageHeading</small></h2>
</header>
<!--Notifications begin-->
@Html.Partial("_Alert")

<!-- Form starts.  -->
@using (Html.BeginForm("Create", "Complaint", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{

    <input type="hidden" id="UserRole" value="@ViewBag.UserRole" />
    @Html.HiddenFor(model => model.Complaint.ComplaintId)
    @Html.HiddenFor(model => model.Complaint.CustomerId)
    @Html.HiddenFor(model => model.Complaint.RecCreatedBy)
    @Html.HiddenFor(model => model.Complaint.RecCreatedDt)
    @Html.HiddenFor(model => model.Complaint.IsReplied)
    @Html.HiddenFor(model => model.Complaint.ComplaintDesc)
    @Html.HiddenFor(model => model.Complaint.ComplaintDate)
    @Html.AntiForgeryToken()
    <div class="container-fluid">


        <!--Input Field begin-->
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.CMS.Complaint.ClientName</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Complaint.ClientName, new { @readonly = "readonly" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.CMS.Complaint.Date</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Complaint.ComplaintDateString, new { @class = "dateFormatter", @readonly = "readonly" })
                    @Html.ValidationMessageFor(m => m.Complaint.ComplaintDateString, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.CMS.Complaint.Department</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @(direction == "ltr" ? Html.DropDownListFor(x => x.Complaint.DepartmentId, new SelectList(Model.Departments, "DepartmentId", "DepartmentNameE"), EPMS.Web.Resources.HR.JobTitle.SelectDepartment, new { @class = "select2me toBeRequired", id = "DepartmentId" }) : Html.DropDownListFor(x => x.Complaint.DepartmentId, new SelectList(Model.Departments, "DepartmentId", "DepartmentNameA"), EPMS.Web.Resources.HR.JobTitle.SelectDepartment, new { @class = "select2me toBeRequired", id = "DepartmentId" }))
                    <label id="departmentValidation"></label>
                </div>
            </div>

        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.CMS.Complaint.Order</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @Html.DropDownListFor(x => x.Complaint.OrderId, new SelectList(Model.Orders, "OrderId", "OrderNo"), EPMS.Web.Resources.CMS.Order.SelectOrder, new { @class = "select2me toBeRequired", id = "OrderId" })
                    <label id="orderValidation"></label>
                </div>
            </div>

        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.CMS.Complaint.Topic</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Complaint.Topic, new { @class = "toBeReadOnly toBeRequired" })
                    <label id="topicValidation"></label>
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.CMS.Complaint.Description</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(model => model.Complaint.Description, new { @class = "toBeDisabled", @id = "DescriptionCK" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid" id="replyDiv">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.CMS.Complaint.Reply</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(model => model.Complaint.Reply, new { @class = "toBeDisabled", @id = "ReplyCK" })
                </div>
            </div>
        </div>



        <div class="control-group row-fluid">
            <div class="span3 span-inset">
                <button type="submit" class="btn toBeDisabled" onclick="return validateForm(event)">@EPMS.Web.Resources.CMS.Complaint.SubmitBtn</button>
            </div>
        </div>
    </div>
}
<script src="~/RichTextEditor/ckeditor.js"></script>
<script>
    $(document).ready(function () {
        CKEDITOR.replace('DescriptionCK');
        CKEDITOR.replace('ReplyCK');
        $(".date").mask('99/99/9999');
        //If complaint has been resolved, disable all fields, and just show records
        if ($("#UserRole").val() == "Customer") {
            if ('@Model.Complaint.ComplaintId' > 0) {
                $('.toBeReadOnly:input').attr('readonly', true);
                $('.toBeDisabled:input').attr('disabled', true);
            }
            if ('@Model.Complaint.IsReplied' == 'False') {
                $("#replyDiv").hide();
            }
        }
        else {
            if ('@Model.Complaint.IsReplied' == 'True') {
                $('.toBeReadOnly:input').attr('readonly', true);
                $('.toBeDisabled:input').attr('disabled', true);
            } else {
                $('.toBeReadOnly:input').attr('readonly', true);
                $('#DescriptionCK').attr('disabled', true);
            }
        }
    });
    function validateForm(event) {
        var counter = 0;
        if ($("#DepartmentId").val() == null || $("#DepartmentId").val() == "" || $("#DepartmentId").val() == undefined) {
            $("#departmentValidation").text("Please Select Department");
            $("#departmentValidation").addClass("Error");
            counter++;
        } else {
            $("#departmentValidation").text("");
            $("#departmentValidation").removeClass("Error");
        }
        if ($("#OrderId").val() == null || $("#OrderId").val() == "" || $("#OrderId").val() == undefined) {
            $("#orderValidation").text("Please Select Order");
            $("#orderValidation").addClass("Error");
            counter++;
        } else {
            $("#orderValidation").text("");
            $("#orderValidation").removeClass("Error");
        }
        if ($("#Complaint_Topic").val() == null || $("#Complaint_Topic").val() == "" || $("#Complaint_Topic").val() == undefined) {
            $("#topicValidation").text("Please Select Complaint Topic");
            $("#topicValidation").addClass("Error");
            counter++;
        } else {
            $("#topicValidation").text("");
            $("#topicValidation").removeClass("Error");
        }
        if (counter > 0) {
            //implementing focus back to error
            if ($(".Error").length > 0) {
                var divId = $(".Error")[0].id;
                if ($("#" + divId).length > 0)
                    $("#" + divId).focus();
                event.preventDefault();
                return false;
            }
        }
        return true;
    };
</script>