@using EPMS.Models.Common
@model EPMS.WebModels.ViewModels.Quotation.QuotationCreateViewModel

@{
    ViewBag.Title = Model.QuotationId > 0 ?
        EPMS.WebModels.Resources.CMS.Quotation.UpdateQuotation : EPMS.WebModels.Resources.CMS.Quotation.CreateNew;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var direction = EPMS.WebModels.Resources.Shared.Common.TextDirection;
}

<!-- Navigation Bar -->
<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/CMS/Quotation/Index">
                @EPMS.WebModels.Resources.CMS.Quotation.QuotList
            </a>
        </li>
        <li>
            @ViewBag.Title
        </li>
    </ul>
</div>
<!-- Page heading -->
<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@ViewBag.Title</small></h2>
</header>

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
<!-- Page heading ends -->
@using (Html.BeginForm("Create", "Quotation", FormMethod.Post, new { @class = "form-horizontal", @id = "AddUpdateQuotationForm", role = "form", enctype = "multipart/form-data" }))
{
    <div class="container-fluid">
        @Html.HiddenFor(model => model.QuotationId)
        @Html.HiddenFor(model => model.OldItemDetailsCount)
        @Html.HiddenFor(model => model.RecCreatedBy)
        @Html.HiddenFor(model => model.RecCreatedDate)
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Client">@EPMS.WebModels.Resources.CMS.Quotation.ClientName</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @if (direction == "ltr")
                    {
                        @Html.DropDownListFor(model => model.CustomerId, new SelectList(ViewBag.Customers, "CustomerId", "CustomerNameE"), "--Select--", new { @class = "select2me customerDDL", @id = "Client" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.CustomerId, new SelectList(ViewBag.Customers, "CustomerId", "CustomerNameA"), "--Select--", new { @class = "select2me customerDDL", @id = "Client" })
                    }
                    <label id="customerValidation"></label>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="RFQId">@EPMS.WebModels.Resources.CMS.RFQ.RfqNo</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @if (Model.CustomerId == 0)
                    {
                        @Html.DropDownListFor(m => m.RFQId, Enumerable.Empty<SelectListItem>(), "No Request for Quotation", new { @id = "RFQId", @class = "select2me OrderDDL" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.RFQId, new SelectList(ViewBag.Rfqs, "RFQId", "SerialNumber"), "--Select--", new { @id = "RFQId", @class = "select2me OrderDDL" })
                    }
                    <label id="orderValidation"></label>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="CreatedByEmployee">@EPMS.WebModels.Resources.CMS.Quotation.CreatedBy</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.CreatedByName, new { @id = "CreatedByEmployee", @class = "", @readonly = true })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="GreetingEn">@EPMS.WebModels.Resources.CMS.Quotation.Greetings</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.GreetingsEn, new { @id = "GreetingEn", @class = "" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="GreetingAr">@EPMS.WebModels.Resources.CMS.Quotation.GreetingsAr</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.GreetingsAr, new { @id = "GreetingAr", @class = "" })
                </div>
            </div>
        </div>
        @if (ViewBag.ShowExcelImport)
        {
            <div id="WYSIWYG_Editor_-_Minimum_Options" class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.CMS.Quotation.ExcelImport</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <textarea id="tiny" rows="2" class="auto-resize"></textarea>
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="button" id="importEx" class="btn">@EPMS.WebModels.Resources.CMS.Quotation.Import</button>
                </div>
            </div>
        }
        <div class="row-fluid" id="ress">
            <div class="span12">
                <table class="table table-striped table-responsive ">
                    <thead class="">
                        <tr>
                            <th style="width:70%">@EPMS.WebModels.Resources.CMS.Quotation.ItemDetails</th>
                            <th>@EPMS.WebModels.Resources.CMS.Quotation.Quantity</th>
                            <th>@EPMS.WebModels.Resources.CMS.Quotation.UnitPrice</th>
                            <th>@EPMS.WebModels.Resources.CMS.Quotation.Total</th>
                            <th style="width:4%">@EPMS.WebModels.Resources.CMS.Quotation.Delete</th>
                        </tr>
                    </thead>
                    <tbody class="qouteAdd" id="QuotationItemsTableBody">
                        <tr class="ItemDetailError Error center"></tr>
                        @if (Model.QuotationItemDetails.Any())
                        {
                            for (int i = 0; i < Model.QuotationItemDetails.Count; i++)
                            {
                                <tr data-id="@i">
                                    <td style='display:none'><input name='QuotationItemDetails.Index' type='hidden' value='@i' /></td>
                                    @Html.HiddenFor(model => model.QuotationItemDetails[i].ItemId, new { @class = "itemDetailId" })
                                    @Html.HiddenFor(model => model.QuotationItemDetails[i].QuotationId, new { @class = "itemDetailId" })
                                    @Html.HiddenFor(model => model.QuotationItemDetails[i].RecCreatedBy, new { @class = "" })
                                    @Html.HiddenFor(model => model.QuotationItemDetails[i].RecCreatedDate, new { @class = "" })
                                    @Html.HiddenFor(model => model.QuotationItemDetails[i].ItemVariationId, new { @class = "" })
                                    @Html.HiddenFor(model => model.QuotationItemDetails[i].IsItemDescription, new { @class = "" })
                                    @Html.HiddenFor(model => model.QuotationItemDetails[i].IsItemSKU, new { @class = "" })
                                    <td>
                                        @Html.TextAreaFor(model => model.QuotationItemDetails[i].ItemDetails, new { @class = "auto-resize readonly-from-rfq" })
                                        @if (!ViewBag.ShowExcelImport && (Model.RFQId == 0 || Model.RFQId == null))
                                        {
                                            <button type="button" class="btn itemAdder" data-toggle="modal" data-target="#itemSearcher">+</button>
                                        }
                                        @Html.ValidationMessageFor(m => m.QuotationItemDetails[i].ItemDetails, string.Empty, new { @class = "required" })
                                    </td>
                                    <td class="quantity">
                                        @Html.TextBoxFor(model => model.QuotationItemDetails[i].ItemQuantity, new { @id = "", @class = "n1 readonly-from-rfq" })
                                        @Html.ValidationMessageFor(m => m.QuotationItemDetails[i].ItemQuantity, string.Empty, new { @class = "required" })
                                    </td>
                                    <td class="unitPrice">
                                        @Html.TextBoxFor(model => model.QuotationItemDetails[i].UnitPrice, new { @id = "", @class = "n2 readonly-from-rfq" })
                                        @Html.ValidationMessageFor(m => m.QuotationItemDetails[i].UnitPrice, string.Empty, new { @class = "required" })
                                    </td>
                                    <td class="total">
                                        @Html.TextBoxFor(model => model.QuotationItemDetails[i].TotalPrice, new { @id = "", @class = "n3", @readonly = true })
                                    </td>
                                    @if (!Model.IsRFQManual)
                                    {
                                        <td class="delete">
                                            <i class="icon-photon minus"></i>
                                        </td>
                                    }
                                    else
                                    {
                                        <td class="delete">
                                            <i class="icon-photon minus deleteRow"></i>
                                        </td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr data-id="0">
                                <td style='display:none'>
                                    <input name='QuotationItemDetails.Index' type='hidden' value='0' />
                                    <input name='QuotationItemDetails[0].IsItemDescription' id='QuotationItemDetails_0__IsItemDescription' type='hidden' />
                                    <input name='QuotationItemDetails[0].IsItemSKU' id='QuotationItemDetails_0__IsItemSKU' type='hidden' />
                                    <input name='QuotationItemDetails[0].ItemVariationId' id='QuotationItemDetails_0__ItemVariationId' type='hidden' />
                                </td>
                                <td>
                                    <textarea rows="2" class="auto-resize toBeRequired" name="QuotationItemDetails[0].ItemDetails" id='QuotationItemDetails_0__ItemDetails' data-val="true" data-val-required="The Item Details are required."></textarea>
                                    @if (!ViewBag.ShowExcelImport)
                                    {
                                        <button type="button" class="btn itemAdder" data-toggle="modal" data-target="#itemSearcher">+</button>
                                    }
                                    <span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[0].ItemDetails" data-valmsg-replace="true"></span>
                                </td>
                                <td class="quantity">
                                    <input class="n1 toBeRequired" type="text" value="0" name="QuotationItemDetails[0].ItemQuantity" id='QuotationItemDetails_0__ItemQuantity' data-val="true" data-val-required="The field Item Qty field is required." data-val-number="The field Item Qty must be a number." data-val-range="Please enter valid quantity" data-val-range-max="2147483647" data-val-range-min="1">
                                    <span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[0].ItemQuantity" data-valmsg-replace="true"></span>
                                </td>
                                <td class="unitPrice">
                                    <input class="n2 toBeRequired" type="text" value="0" name="QuotationItemDetails[0].UnitPrice" id='QuotationItemDetails_0__UnitPrice' data-val="true" data-val-required="The field Unit Price field is required." data-val-number="The field Unit Price must be a number." data-val-range="Please enter valid price" data-val-range-max="2147483647" data-val-range-min="1">
                                    <span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[0].UnitPrice" data-valmsg-replace="true"></span>
                                </td>
                                <td class="total">
                                    <input class="n3" type="text" value="0" name="QuotationItemDetails[0].TotalPrice" readonly>
                                </td>
                                <td class="delete">
                                    <i class="icon-photon minus deleteRow"></i>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="control-group row-fluid add-item-row">
                <div class="span3 span-inset">
                    <button type="button" class="btn trAdder">@EPMS.WebModels.Resources.CMS.Quotation.Add</button>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="subtotal">@EPMS.WebModels.Resources.CMS.Quotation.Subtotal</label>
            </div>
            <div class="span9">
                <div class="controls">
                    <input id="subtotal" type="text" value="0" readonly />
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Discount">@EPMS.WebModels.Resources.CMS.Quotation.Discount<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.QuotationDiscount, new { @id = "Discount", @class = "" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="GrandTotal">@EPMS.WebModels.Resources.CMS.Quotation.GrandTotal</label>
            </div>
            <div class="span9">
                <div class="controls">
                    <input id="GrandTotal" type="text" value="0" readonly />
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="inWord">@EPMS.WebModels.Resources.CMS.Quotation.InWords</label>
            </div>
            <div class="span9">
                <div class="controls">
                    <input id="inWord" type="text" value="0" readonly />
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3 span-inset">
                <button type="button" id="actDe" class="btn">@EPMS.WebModels.Resources.CMS.Quotation.ActDeActInWords</button>
            </div>
        </div>
        <div class="alert alert-info alert-block">
            <i class="icon-alert icon-alert-info"></i>
            <strong><a>@EPMS.WebModels.Resources.CMS.Quotation.InstallmentPlan</a></strong>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Installment1">@EPMS.WebModels.Resources.CMS.Quotation.FirstInstallment<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.FirstInstallement, new { @id = "Installment1", @class = "installer" })
                    @Html.ValidationMessageFor(model => model.FirstInstallement, string.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DueAt1">@EPMS.WebModels.Resources.CMS.Quotation.DueAt<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.FirstInsDueAtCompletion, new { @id = "DueAt1", @class = "dap" })
                    @Html.ValidationMessageFor(model => model.FirstInsDueAtCompletion, string.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Installment2">@EPMS.WebModels.Resources.CMS.Quotation.SecondInstallment<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.SecondInstallment, new { @id = "Installment2", @class = "installer" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DueAt2">@EPMS.WebModels.Resources.CMS.Quotation.DueAt<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.SecondInsDueAtCompletion, new { @id = "DueAt2", @class = "dap" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Installment3">@EPMS.WebModels.Resources.CMS.Quotation.ThirdInstallment<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ThirdInstallment, new { @id = "Installment3", @class = "installer" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DueAt3">@EPMS.WebModels.Resources.CMS.Quotation.DueAt<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ThirdInsDueAtCompletion, new { @id = "DueAt3", @class = "dap" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Installment4">@EPMS.WebModels.Resources.CMS.Quotation.FourthInstallment<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.FourthInstallment, new { @id = "Installment4", @class = "installer" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DueAt4">@EPMS.WebModels.Resources.CMS.Quotation.DueAt<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.FourthInsDueAtCompletion, new { @id = "DueAt4", @class = "dap" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="coCntrol-label" for="ExtraInformationEn">@EPMS.WebModels.Resources.CMS.Quotation.Notes</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(model => model.NotesEn, new { @id = "ExtraInformationEn", @class = "", })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="ExtraInformationaAr">@EPMS.WebModels.Resources.CMS.Quotation.NotesAr</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(model => model.NotesAr, new { @id = "ExtraInformationAr", @class = "", })
                </div>
            </div>
        </div>
        @if (Model.Status != (short)QuotationStatus.QuotationCancelled && Model.Status != (short)QuotationStatus.OrderCreated)
        {
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="submit" class="btn" onclick="validateCustomer(event)">
                        @(Model.QuotationId > 0 ? EPMS.WebModels.Resources.CMS.Quotation.UpdateQuotation : EPMS.WebModels.Resources.CMS.Quotation.CreateQoute)
                    </button>
                </div>
            </div>
        }

    </div>
}

@section popups
{
    @Html.Partial("_ItemsPopUp")
}

<script type="text/javascript" src="~/Scripts/plugins/elrte.min.js"></script>
<script type="text/javascript" src="~/Scripts/plugins/elrte.en.js"></script>
<script type="text/javascript" src="~/Scripts/plugins/jquery.nToWord.js"></script>
<script src="~/Scripts/plugins/jquery.blockUI.js"></script>
<script src="~/RichTextEditor/ckeditor.js"></script>
<link href="~/Content/CSS/jsTreeCheckbox/style.css" rel="stylesheet" />
<script>
    var itemsDetailCount;
    var iExcelData = false;
    var isUpdate = false;
    var elementToDelete;
    var rfqs;
    var rfqItems;
    var siteUrl;
    var dir;
    var parsedRfiItems;
    var errorMessageTree = '@EPMS.WebModels.Resources.Shared.Common.RequiredTreeField';
    $(document).ready(function () {
        debugger;
        var rfiItems = '@Html.Raw(Json.Encode(Model.ItemVariationDropDownList))';
        parsedRfiItems = JSON.parse(rfiItems);
        dir = '@direction';
        CKEDITOR.replace('ExtraInformationEn', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html'
        });
        CKEDITOR.replace('ExtraInformationAr', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html'
        });

        var quotationId = parseInt('@Model.QuotationId');
        if (quotationId == 0) {
            $(".installer").val(0);
            $(".dap").val(0);
            $("#Installment1").val();
            $("#DueAt1").val();
            itemsDetailCount = 0;
        } else {
            itemsDetailCount = parseInt('@Model.QuotationItemDetails.Count');
            isUpdate = true;
            $('#Client').select2('disable');
            $('#RFQId').select2('disable');
        }
        if (isNaN(parseInt($("#Discount").val()))) {
            $("#Discount").val(0);
        }

        var discount = parseInt('@Model.QuotationDiscount');
        if (discount == 0 || isNaN(discount)) {
            $("#Discount").val(0);
        }
        // in update case set total and sub total price
        var n2Val = $(this).parent().parent().find(".n2").val();
        $(this).parent().parent().find(".n3").val($(this).val() * n2Val);
        var x = 0;
        $('.qouteAdd tr .n3').each(function () {
            x = x + parseInt($(this).val());
        });
        $('#subtotal').val(x);
        calDiscount();

        // set item details and discount readonly if quotation is from RFQ
        var rfqId = parseInt('@Model.RFQId');
        if (rfqId > 0 && '@Model.IsRFQManual' == 'False') {
            // textboxes readonly
            $('.readonly-from-rfq:input').attr('readonly', true);
            // hide Add new item button
            $(".add-item-row").hide();
        }

        if ('@ViewBag.ShowExcelImport' == 'True') {
            $("#importEx").on("click", function () {
                var excel = $("#WYSIWYG_Editor_-_Minimum_Options iframe").contents().find("body table");
                var coln = $(excel).find("tr:first td").length;
                var count = 0;
                var x = 0;
                itemsDetailCount = 0;
                if (coln == 3) {
                    $(excel).find("tr").each(function () {
                        var y = 0;
                        var t1 = "";
                        var t2 = 0;
                        var t3 = 0;
                        var t4 = 0;
                        $(this).find("td").each(function () {
                            if (y == 0) {
                                t1 = $(this).text();
                            }
                            else if (y == 1) {
                                t2 = parseInt($(this).text());
                            }
                            else if (y == 2) {
                                t3 = parseInt($(this).text());
                            }
                            y++;
                        });
                        t4 = t3 * t2;

                        var html = ' <tr> <td > <textarea rows="2" class="auto-resize toBeRequired" name="QuotationItemDetails[' + itemsDetailCount + '].ItemDetails">' + t1 + '</textarea> </td> ' +
                    '<td class="quantity"> <input class="n1 toBeRequired" type="text" value="' + t2 + '" name="QuotationItemDetails[' + itemsDetailCount + '].ItemQuantity"> </td> ' +
                    '<td class="unitPrice"> <input class="n2 toBeRequired" type="text" value="' + t3 + '" name="QuotationItemDetails[' + itemsDetailCount + '].UnitPrice"> </td>' +
                    ' <td class="total"> <input class="n3" type="text" readonly value="' + t4 + '" name="QuotationItemDetails[' + itemsDetailCount + '].TotalPrice"> </td> ' +
                    '<td class="delete"> <i class="icon-photon minus deleteRow"></i> </td></tr>';
                        itemsDetailCount = itemsDetailCount + 1;
                        iExcelData = true;
                        if (count == 0) {
                            $('.qouteAdd').html("");
                        }
                        $('.qouteAdd').append(html);
                        reActivateDelete();
                        reactivateCount();
                        count++;
                    });
                    $('.qouteAdd tr .n3').each(function () {

                        x = x + parseInt($(this).val());
                    });
                    $('#subtotal').val(x);
                    calDiscount();
                }
                else {
                    $.pnotify({
                        title: 'Sorry',
                        type: 'info',
                        text: 'The sheet you are trying to import is not supported, please check if the feilds match.'
                    });
                }
            });
        }
        siteUrl = $('#siteURL').val();
        var url = siteUrl + "/CMS/Quotation/GetCustomerRfqs";
        $("#Client").on("change", function () {
            var customerId = parseInt($(this).val());
            if (customerId > 0) {
                $('#RFQId').select2('enable');
                $.blockUI({
                    message: '<img src="' + siteUrl + '/Images/Gallery/ajax_loader.gif" style="width:75px; height:75"/>',
                    css: { backgroundColor: '#FFFAFA', left: "47%", width: "6%" }
                });
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: "json",
                    data: {
                        customerId: customerId
                    },
                    success: function (data) {
                        populateRfqDropDown(data.Rfqs);
                        rfqs = data.Rfqs;
                        rfqItems = data.RfqItems;
                    },
                    error: function (e) {
                        $.unblockUI();
                        alert('Error=' + e.toString());
                    }
                });
            }
        });
        $("#RFQId").on("change", function () {
            var count = 0;
            var rfqId = parseInt($(this).val());
            if (rfqId > 0) {
                // set discount
                $.each(rfqs, function (key, value) {
                    if (value.RFQId == rfqId) {
                        $(".discount-readonly:input").attr("readonly", true);
                        $("#Discount").val(value.Discount);
                    }
                });
                $(".add-item-row").hide();
                $.each(rfqItems, function (key, value) {
                    if (value.RFQId == rfqId) {
                        if (count == 0) {
                            $('.qouteAdd').html("");
                        }
                        count++;
                        addQuotationItem(value);
                    }
                });
            } else {
                $(".add-item-row").show();
                $('.qouteAdd').html("");
                var html = '<tr>' +
                                '<td>' +
                                    '<textarea rows="2" class="auto-resize toBeRequired" name="QuotationItemDetails[0].ItemDetails" data-val="true" data-val-required="The Item Details are required."></textarea>' +
                                    '<span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[0].ItemDetails" data-valmsg-replace="true"></span>' +
                                '</td>' +
                                '<td class="quantity">' +
                                    '<input class="n1 toBeRequired" type="text" value="0" name="QuotationItemDetails[0].ItemQuantity" data-val="true" data-val-required="The Item Details field is required." data-val-number="The field Item Qty must be a number." data-val-range="Please enter valid quantity" data-val-range-max="2147483647" data-val-range-min="1">' +
                                    '<span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[0].ItemQuantity" data-valmsg-replace="true"></span>' +
                                '</td>' +
                                '<td class="unitPrice">' +
                                    '<input class="n2 toBeRequired" type="text" value="0" name="QuotationItemDetails[0].UnitPrice" data-val="true" data-val-required="The Item Details field is required." data-val-number="The field Item Qty must be a number." data-val-range="Please enter valid price" data-val-range-max="2147483647" data-val-range-min="1">' +
                                    '<span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[0].UnitPrice" data-valmsg-replace="true"></span>' +
                                '</td>' +
                                '<td class="total">' +
                                    '<input class="n3" type="text" value="0" name="QuotationItemDetails[0].TotalPrice" readonly>' +
                                '</td>' +
                                '<td class="delete">' +
                                    '<i class="icon-photon minus deleteRow"></i>' +
                                '</td>' +
                            '</tr>';
                $('.qouteAdd').html(html);
                //remove validation
                $("form").removeData("validator").removeData("unobtrusiveValidation");
                //Parse the form again to apply new validations
                $.validator.unobtrusive.parse("form");
            }
        });

        $("#AddUpdateQuotationForm").validate({
            errorElement: "span",
            errorClass: "error",
            onclick: true,
            rules: {
                "numbers": {
                    required: false,
                    digits: true
                },
                "numbers_range": {
                    range: [0, 100]
                }
            }
        });
        $(".auto-resize").keyup(function () {
            autoGrowField($(this).get(0));
        });
        $('#tiny').elrte({
            lang: "en",
            styleWithCSS: false,
            height: 200,
            toolbar: 'tiny'
        });
        $('.trAdder').on("click", function () {
            if (checkIfPrevItemExist()) {
                var index = $("#QuotationItemsTableBody").children("tr").length - 1;
                var indexCell = "<td style='display:none'>" +
                    "<input name='QuotationItemDetails.Index' type='hidden' value='" + index + "' />" +
                    "<input name='QuotationItemDetails[" + index + "].IsItemDescription' id='QuotationItemDetails_" + index + "__IsItemDescription' type='hidden' />" +
                    "<input name='QuotationItemDetails[" + index + "].IsItemSKU' id='QuotationItemDetails_" + index + "__IsItemSKU' type='hidden' />" +
                    "<input name='QuotationItemDetails[" + index + "].ItemVariationId' id='QuotationItemDetails_" + index + "__ItemVariationId' type='hidden' />" +
                    "</td>";
                if (!iExcelData && !isUpdate) {
                    itemsDetailCount = itemsDetailCount + 1;
                }
                var itemAdderBtn = "";
                if ('@ViewBag.ShowExcelImport' == 'False') {
                    itemAdderBtn = '<button type="button" class="btn itemAdder" data-toggle="modal" data-target="#itemSearcher">+</button>';
                }
                //var html = ' <tr> <td > <textarea rows="2" class="auto-resize toBeRequired" name="QuotationItemDetails[' + itemsDetailCount + '].ItemDetails"></textarea> </td> ' +
                //    '<td class="quantity"> <input class="n1 toBeRequired" type="text" value=0 name="QuotationItemDetails[' + itemsDetailCount + '].ItemQuantity"> </td> ' +
                //    '<td class="unitPrice"> <input class="n2 toBeRequired" type="text" value=0 name="QuotationItemDetails[' + itemsDetailCount + '].UnitPrice"> </td>' +
                //    ' <td class="total"> <input class="n3" type="text" readonly value=0 name="QuotationItemDetails[' + itemsDetailCount + '].TotalPrice"> </td> ' +
                //    '<td class="delete"> <i class="icon-photon minus deleteRow"></i> </td></tr>';
                var html = '<tr data-id=' + index + '>' + indexCell + '<td > <textarea rows="2" class="auto-resize toBeRequired" name="QuotationItemDetails[' + index + '].ItemDetails" id=QuotationItemDetails_' + index + '__ItemDetails' + ' data-val="true" data-val-required="The Item Details are required."></textarea> ' +
                    itemAdderBtn +
                    '<span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[' + index + '].ItemDetails" data-valmsg-replace="true"></span> </td>' +
                    '<td class="quantity"> <input class="n1 toBeRequired" type="text" value="0" name="QuotationItemDetails[' + index + '].ItemQuantity" id=QuotationItemDetails_' + index + '__ItemQuantity' + ' data-val="true" data-val-required="The Item Quantity is required." data-val-number="The Item Quantity must be a number." data-val-range="Please enter valid quantity" data-val-range-max="2147483647" data-val-range-min="1"> ' +
                    '<span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[' + index + '].ItemQuantity" data-valmsg-replace="true"></span> </td> ' +
                    '<td class="unitPrice"> <input class="n2 toBeRequired" type="text" value="0" name="QuotationItemDetails[' + index + '].UnitPrice" id=QuotationItemDetails_' + index + '__UnitPrice' + ' data-val="true" data-val-required="The Unit Price is required." data-val-number="The Unit Price must be a number." data-val-range="Please enter valid price" data-val-range-max="2147483647" data-val-range-min="1"> ' +
                    '<span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[' + index + '].UnitPrice" data-valmsg-replace="true"></span> </td>' +
                    ' <td class="total"> <input class="n3" type="text" readonly value=0 name="QuotationItemDetails[' + index + '].TotalPrice"> </td> ' +
                    '<td class="delete"> <i class="icon-photon minus deleteRow"></i> </td></tr>';
                $('.qouteAdd').append(html);
                //remove validation
                $("form").removeData("validator").removeData("unobtrusiveValidation");
                //Parse the form again to apply new validations
                $.validator.unobtrusive.parse("form");
                iExcelData = false;
                isUpdate = false;
                reActivateDelete();
                reactivateCount();
            }
        });
        reActivateDelete();
        reactivateCount();

        //$('#Discount').on("blur", function () {
        //    calDiscount();
        //});

        //$.nToWord({number:n,language:"ar"});
        $('#actDe').on("click", function () {
            if ('@direction' == "ltr") {
                if ($('#inWord').hasClass("activatedBt")) {
                    $('#inWord').val("");
                    $('#inWord').removeClass("activatedBt");
                }
                else {
                    $('#inWord').val($.nToWord({ number: parseInt($('#GrandTotal').val()), language: "en" }));
                    $('#inWord').addClass("activatedBt");
                }
            }
            else if ('@direction' == "rtl") {
                if ($('#inWord').hasClass("activatedBt")) {
                    $('#inWord').val("");
                    $('#inWord').removeClass("activatedBt");
                } else {
                    $('#inWord').val($.nToWord({ number: parseInt($('#GrandTotal').val()), language: "ar" }));
                    $('#inWord').addClass("activatedBt");
                }
            }
        });

        $('#Discount').on("blur", function () {
            var b;
            b = parseInt($('#Discount').val());
            if (b > 100 || isNaN(b)) {
                discount();
                $(this).val(0);
                calDiscount();
                return;
            }
            calDiscount();
            function discount() {
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'The total % of discount should not exceed 100 and must be number'
                });
                $(this).val(0);
            }
        });
        $('.installer').on("blur", function () {
            var install = 0;
            install = parseInt($('#Installment1').val());
            if (install > 100 || isNaN(install)) {
                noteIt();
                $(this).val(0);
                return;
            } else {
                install = install + parseInt($('#Installment2').val());
                if (install > 100 || isNaN(install)) {
                    noteIt();
                    $(this).val(0);
                    return;
                } else {
                    install = install + parseInt($('#Installment3').val());
                    if (install > 100 || isNaN(install)) {
                        noteIt();
                        $(this).val(0);
                        return;
                    } else {
                        install = install + parseInt($('#Installment4').val());
                        if (install > 100 || isNaN(install)) {
                            noteIt();
                            $(this).val(0);
                            return;
                        }
                    }
                }
            }

            function noteIt() {
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'The total % of all due at project completion should not exceed 100 and must be number'
                });
                $(this).val(0);
            }

        });
        $('.dap').on("blur", function () {
            var dueAt;
            dueAt = parseInt($('#DueAt1').val());
            if (dueAt > 100 || isNaN(dueAt)) {
                noteItb();
                $(this).val(0);
                return;
            } else {
                dueAt = dueAt + parseInt($('#DueAt2').val());
                if (dueAt > 100 || isNaN(dueAt)) {
                    noteItb();
                    $(this).val(0);
                    return;
                } else {
                    dueAt = dueAt + parseInt($('#DueAt3').val());
                    if (dueAt > 100 || isNaN(dueAt)) {
                        noteItb();
                        $(this).val(0);
                        return;
                    } else {
                        dueAt = dueAt + parseInt($('#DueAt4').val());
                        if (dueAt > 100 || isNaN(dueAt)) {
                            noteItb();
                            $(this).val(0);
                            return;
                        }
                    }
                }
            }

            function noteItb() {
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'The total % of all the installments should not exceed 100 and must be number'
                });

                $(this).val(0);
            }

            LastDueAtProgressGreater();
        });
        var $radios = $('input:radio[name=ItemFrom]');
        $radios.filter('[value=dropdown]').prop('checked', true);
        $("#Simple_Select_Box_with_Filter_Search").show();
        $("#treeControl").hide();
        $("input[name=ItemFrom]:radio").change(function () {
            if ($(this).val() == "dropdown") {
                $("#Simple_Select_Box_with_Filter_Search").show();
                $("#treeControl").hide();
            }
            if ($(this).val() == "tree") {
                $("#Simple_Select_Box_with_Filter_Search").hide();
                $("#treeControl").show();
            }
        });
        $("#btnTreeSelector").click(function (event) {
            $('#itemTreeSelector').modal('show');
            event.preventDefault();
            $.fn.modal.Constructor.prototype.enforceFocus = function () { };
        });
        $('#itemSearcher').on('show', function () {
            //clear DDL required value label
            $("#ItemVariationDropDownListValidation").text("");
            $("#ItemVariationDropDownListValidation").removeClass("Error");

            //get the id from tr that is selected for the item popup
            var index = $(event.target).closest('tr').data('id');
            $("#ItemModalIndex").val(index);
            //get item's values
            var isItemDescription = $("#QuotationItemDetails_" + index + "__IsItemDescription").val();
            var isItemSKU = $("#QuotationItemDetails_" + index + "__IsItemSKU").val();
            var itemVariationId = $("#QuotationItemDetails_" + index + "__ItemVariationId").val();

            //set modal fields according to modal values
            $("#ItemVariationDropDownList").select2("val", itemVariationId); //set the value

            if (isItemDescription == "false" || isItemDescription == "False" || isItemDescription == "") {
                $('#ItemDescriptionModalChk').attr('checked', false);
            } else {
                $('#ItemDescriptionModalChk').attr('checked', true);
            }

            if (isItemSKU == "false" || isItemSKU == "False" || isItemSKU == "") {
                $('#ItemSKUModalChk').attr('checked', false);
            } else {
                $('#ItemSKUModalChk').attr('checked', true);
            }
            var itemTreeUrl = siteUrl + "/Api/Tree/GetTreeData/";
            populateTreeJsonWTCkb(itemTreeUrl, "jstree", dir);
        });
        $("#selectDepartment").on("click", function () {
            var selectedItem = $(".jstree-clicked").text();
            // validation
            if (selectedItem == "" || selectedItem == null) {
                $("#selectedItemTreeValidation").text(errorMessageTree);
                $("#selectedItemTreeValidation").addClass("Error");
                return;
            } else {
                $("#selectedItemTreeValidation").text("");
                $("#selectedItemTreeValidation").removeClass("Error");
            }
            $("#ItemVariationTree").val("");
            
            $.each(parsedRfiItems, function (key, value) {
                if (value.ItemCodeSKUCodeDescriptoinEn == selectedItem) {
                    $("#ItemVariationTree").val(value.ItemVariationId);
                }
            });
            var item = $("#ItemVariationTree").val();
            if (item == "" || item == 0 || item == null) {
                $("#selectedItemTreeValidation").text(errorMessageTree);
                $("#selectedItemTreeValidation").addClass("Error");
                return;
            } else {
                $("#selectedItemTreeValidation").text("");
                $("#selectedItemTreeValidation").removeClass("Error");
            }
            $('#itemTreeSelector').modal('toggle');
            return true;
        });
        $("#SaveChanges").on("click", function () {
            var createFrom = $("input[name=ItemFrom]:checked").val();
            if (createFrom == "dropdown") {
                if (validateSelect2Ddl("#ItemVariationDropDownList", '@EPMS.WebModels.Resources.Shared.Common.RequiredDdlField')) {
                    getModalControlsValues();
                }
            } else {
                getModalControlsValuesForTree();
            }
        });
        function getModalControlsValuesForTree() {
            //get item's values
            var isItemDescription = $('#ItemDescriptionModalChk').is(':checked');
            var isItemSku = $('#ItemSKUModalChk').is(':checked');
            var itemVariationId = $("#ItemVariationTree").val();

            //set item's values
            var index = $("#ItemModalIndex").val();
            $("#QuotationItemDetails_" + index + "__IsItemDescription").val(isItemDescription);
            $("#QuotationItemDetails_" + index + "__IsItemSKU").val(isItemSku);
            $("#QuotationItemDetails_" + index + "__ItemVariationId").val(itemVariationId);

            //set item sku and description in details text area
            $.each(parsedRfiItems, function (key, value) {
                if (value.ItemVariationId == itemVariationId) {
                    $("#QuotationItemDetails_" + index + "__ItemDetails").val("");
                    var textToAppend = "";
                    if ('@direction' == "ltr") {
                        textToAppend = textToAppend + value.ItemNameE;
                    } else {
                        textToAppend = textToAppend + value.ItemNameA;
                    }
                    if (isItemSku) {
                        textToAppend = textToAppend + "\nSKU Code: " + value.SKUCode;
                    }
                    if (isItemDescription) {
                        if ('@direction' == "ltr") {
                            if (value.DescriptionForQuotationEn != null) {
                                textToAppend = textToAppend + "\n" + value.DescriptionForQuotationEn;
                            }
                        } else {
                            if (value.DescriptionForQuotationAr != null) {
                                textToAppend = textToAppend + "\n" + value.DescriptionForQuotationAr;
                            }
                        }
                    }
                    $("#QuotationItemDetails_" + index + "__ItemDetails").val(textToAppend);
                }
            });
            $('#itemSearcher').modal('toggle');
        }
        function getModalControlsValues() {
            //get item's values
            var isItemDescription = $('#ItemDescriptionModalChk').is(':checked');
            var isItemSku = $('#ItemSKUModalChk').is(':checked');
            var itemVariationId = $("#ItemVariationDropDownList").val();

            //set item's values
            var index = $("#ItemModalIndex").val();
            $("#QuotationItemDetails_" + index + "__IsItemDescription").val(isItemDescription);
            $("#QuotationItemDetails_" + index + "__IsItemSKU").val(isItemSku);
            $("#QuotationItemDetails_" + index + "__ItemVariationId").val(itemVariationId);

            //set item sku and description in details text area
            var rfiItems = '@Html.Raw(Json.Encode(Model.ItemVariationDropDownList))';
            var parsedRfiItems = JSON.parse(rfiItems);

            $.each(parsedRfiItems, function (key, value) {
                if (value.ItemVariationId == itemVariationId) {
                    $("#QuotationItemDetails_" + index + "__ItemDetails").val("");
                    var textToAppend = "";
                    if ('@direction' == "ltr") {
                        textToAppend = textToAppend + value.ItemNameE;
                    } else {
                        textToAppend = textToAppend + value.ItemNameA;
                    }
                    if (isItemSku) {
                        textToAppend = textToAppend + "\nSKU Code: " + value.SKUCode;
                    }
                    if (isItemDescription) {
                        if ('@direction' == "ltr") {
                            if (value.DescriptionForQuotationEn != null) {
                                textToAppend = textToAppend + "\n" + value.DescriptionForQuotationEn;
                            }
                        } else {
                            if (value.DescriptionForQuotationAr != null) {
                                textToAppend = textToAppend + "\n" + value.DescriptionForQuotationAr;
                            }
                        }
                    }
                    $("#QuotationItemDetails_" + index + "__ItemDetails").val(textToAppend);
                }
            });
            $('#itemSearcher').modal('toggle');
        }
    });

    function populateRfqDropDown(data) {
        $("#RFQId").empty();
        if (data.length > 0) {
            $("#RFQId").append(
                $('<option></option>').val("").html("--Select--")
            );
            for (var i = 0; i < data.length; i++) {
                $("#RFQId").append(
                    $('<option></option>').val(data[i].RFQId).html(data[i].SerialNumber)
                );
            }
        } else {
            $("#RFQId").append(
                $('<option></option>').val("").html("No Request for Quotation")
            );
        }
        $(".select2me").select2("destroy");
        $('.select2me').select2({
            placeholder: "Select",
        });
        $.unblockUI();
    }

    function addQuotationItem(value) {
        var index = $("#QuotationItemsTableBody").children("tr").length;
        var html = ' <tr> <td > <textarea rows="2" class="auto-resize toBeRequired" readonly name="QuotationItemDetails[' + index + '].ItemDetails" data-val="true" data-val-required="The Item Details are required.">' + value.ItemDetails + '</textarea> ' +
            '<span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[' + index + '].ItemDetails" data-valmsg-replace="true"></span> </td>' +
            '<td class="quantity"> <input class="n1 toBeRequired" readonly type="text" value="' + value.ItemQuantity + '" name="QuotationItemDetails[' + index + '].ItemQuantity" data-val="true" data-val-required="The Item Quantity is required." data-val-number="The Item Quantity must be a number." data-val-range="Please enter valid quantity" data-val-range-max="2147483647" data-val-range-min="1"> ' +
            '<span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[' + index + '].ItemQuantity" data-valmsg-replace="true"></span> </td> ' +
            '<td class="unitPrice"> <input class="n2 toBeRequired" readonly type="text" value="' + value.UnitPrice + '" name="QuotationItemDetails[' + index + '].UnitPrice" data-val="true" data-val-required="The Unit Price is required." data-val-number="The Unit Price must be a number." data-val-range="Please enter valid price" data-val-range-max="2147483647" data-val-range-min="1"> ' +
            '<span class="field-validation-valid required" data-valmsg-for="QuotationItemDetails[' + index + '].UnitPrice" data-valmsg-replace="true"></span> </td>' +
            ' <td class="total"> <input class="n3" type="text" readonly value=0 name="QuotationItemDetails[' + index + '].TotalPrice"> </td> ' +
            '<td class="delete"> <i class="icon-photon minus "></i> </td></tr>';
        $('.qouteAdd').append(html);
        //remove validation
        $("form").removeData("validator").removeData("unobtrusiveValidation");
        //Parse the form again to apply new validations
        $.validator.unobtrusive.parse("form");
        reActivateDelete();
        reactivateCount();
    }

    function LastDueAtProgressGreater() {
        var dueAt1 = parseInt($("#DueAt1").val());
        var dueAt2 = parseInt($("#DueAt2").val());
        var dueAt3 = parseInt($("#DueAt3").val());
        var dueAt4 = parseInt($("#DueAt4").val());
        if (dueAt2 > 0) {
            if (dueAt1 >= dueAt2) {
                notifyInstall();
                $("#DueAt2").val(0);
                $("#DueAt2").focus();
                return false;
            }
        }
        if (dueAt3 > 0) {
            if (dueAt2 >= dueAt3) {
                notifyInstall();
                $("#DueAt3").val(0);
                $("#DueAt3").focus();
                return false;
            }
        }
        if (dueAt4 > 0) {
            if (dueAt3 >= dueAt4) {
                notifyInstall();
                $("#DueAt4").val(0);
                $("#DueAt4").focus();
                return false;
            }
        }
        function notifyInstall() {
            $.pnotify({
                title: 'Sorry',
                type: 'info',
                text: 'The percentage specified in the Last installment should be greater than the percentage in the previous one.'
            });
        }
    }

    function reActivateDelete() {
        $('.deleteRow').on("click", function () {
            $.blockUI({
                message: '<img src="' + siteUrl + '/Images/Gallery/ajax_loader.gif" style="width:75px; height:75"/>',
                css: { backgroundColor: '#FFFAFA', left: "47%", width: "6%" }
            });
            var id = parseInt($(this).closest('tr').children(".itemDetailId").val());
            elementToDelete = $(this).parent().parent();
            var quotationId = parseInt('@Model.QuotationId');
            if (quotationId > 0 && !isNaN(id)) {

                url = siteUrl + "/CMS/Quotation/Delete";
                //var isErrorInDeleting = true;
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: "json",
                    data: {
                        itemDetailId: id
                    },
                    success: function (data) {
                        if (data.Status == "Success") {
                            itemsDetailCount = itemsDetailCount - 1;
                            var count = $('.qouteAdd tr').length;
                            if (count > 1) {
                                elementToDelete.remove();
                                var x = 0;
                                $('.qouteAdd tr .n3').each(function () {
                                    x = x + parseInt($(this).val());
                                });
                                $('#subtotal').val(x);
                                calDiscount();
                            }
                            //isErrorInDeleting = false;
                            $.unblockUI();
                        }
                        if (data.Status == "Error") {
                            $.unblockUI();
                            alert("Error in deleting Item Detail");
                            return;
                        }
                    },
                    error: function (e) {
                        $.unblockUI();
                        alert('Error: You are not authorized');
                        return;
                    }
                });
            } else {
                var count = $('.qouteAdd tr').length;
                if (count > 2) {
                    itemsDetailCount = itemsDetailCount - 1;
                    elementToDelete.remove();
                    var x = 0;
                    $('.qouteAdd tr .n3').each(function () {
                        x = x + parseInt($(this).val());
                    });
                    $('#subtotal').val(x);
                    calDiscount();
                }
                $.unblockUI();
            }
        });
    }
    function reactivateCount() {
        $('.quantity .n1').on("blur", function () {
            var n2Val = $(this).parent().parent().find(".n2").val();
            $(this).parent().parent().find(".n3").val($(this).val() * n2Val);
            var x = 0;
            $('.qouteAdd tr .n3').each(function () {
                x = x + parseInt($(this).val());
            });
            $('#subtotal').val(x);
            calDiscount();
        });
        $('.unitPrice .n2').on("blur", function () {
            var n2Va2 = $(this).parent().parent().find(".n1").val();
            $(this).parent().parent().find(".n3").val($(this).val() * n2Va2);
            var x = 0;
            $('.qouteAdd tr .n3').each(function () {
                x = x + parseInt($(this).val());
            });
            $('#subtotal').val(x);
            calDiscount();
        });
        $('.quantity .n1').trigger("blur");
        $('.unitPrice .n2').trigger("blur");
    }
    function calDiscount() {
        var subtotal = parseInt($('#subtotal').val());
        var discount = parseInt($('#Discount').val());
        var grand = subtotal - (subtotal * (discount / 100));
        $('#GrandTotal').val(grand);
    }
    function validateCustomer(event) {
        var counter = 0;
        var customerId = $("#Client").val();
        if (customerId == null || customerId == "" || customerId == undefined) {
            $("#customerValidation").text("Please Select Customer");
            $("#customerValidation").addClass("Error");
            counter++;
        } else {
            $("#customerValidation").text("");
            $("#customerValidation").removeClass("Error");
        }
        if (counter > 0) {
            // scroll to customer drop down
            $('html,body').animate({
                scrollTop: $(".customerDDL").offset().top
            }, 'slow');
            event.preventDefault();
            return false;
        }
        return true;
    }
    function checkIfPrevItemExist() {
        var listSimple = $('.toBeRequired');
        var counter = 0;
        for (var i = 0; i < (listSimple.length) ; i++) {
            var control = listSimple[i];
            var fieldvalue = $(control).val();
            if (fieldvalue == null || fieldvalue == "" || fieldvalue == 0) {
                counter++;
                $(control).css("background-color", "pink");
            } else {
                $(control).css("background-color", "white");
            }
        }
        if (counter > 0) {
            $.pnotify({
                title: 'Sorry',
                type: 'info',
                text: 'Please Complete Previous Item Details.'
            });
            event.preventDefault();
            return false;
        }
        return true;
    }
</script>