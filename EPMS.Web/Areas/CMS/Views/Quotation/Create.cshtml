@model EPMS.Web.ViewModels.Quotation.QuotationCreateViewModel

@{
    ViewBag.Title = Model.PageTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var direction = EPMS.Web.Resources.Shared.Common.TextDirection;
}

<!-- Navigation Bar -->
<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/CMS/Quotation/Index">
                @EPMS.Web.Resources.CMS.Quotation.QuotList
            </a>
        </li>
        <li>
            @ViewBag.Title
        </li>
    </ul>
</div>
<!-- Page heading -->
<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@ViewBag.Title</small></h2>
</header>

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
<!-- Page heading ends -->
@using (Html.BeginForm("Create", "Quotation", FormMethod.Post, new { @class = "form-horizontal", @id = "AddUpdateQuotationForm", role = "form", enctype = "multipart/form-data" }))
{
    <div class="container-fluid">
        @*@Html.HiddenFor(model => model.CreatedByEmployee)*@
        @Html.HiddenFor(model => model.QuotationId)
        @Html.HiddenFor(model => model.OldItemDetailsCount)
        @Html.HiddenFor(model => model.ClientName)
        @Html.HiddenFor(model => model.RecCreatedBy)
        @Html.HiddenFor(model => model.RecCreatedDt)
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Client">@EPMS.Web.Resources.CMS.Quotation.ClientName</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @if (direction == "ltr")
                    {
                        @Html.DropDownListFor(model => model.CustomerId, new SelectList(ViewBag.Customers, "CustomerId", "CustomerNameE"), "--Select--", new { @class = "select2me customerDDL", @id = "Client" })
                    }
                    @if (direction == "rtl")
                    {
                        @Html.DropDownListFor(model => model.CustomerId, new SelectList(ViewBag.Customers, "CustomerId", "CustomerNameA"), "--Select--", new { @class = "select2me customerDDL", @id = "Client" })
                    }
                    <label id="customerValidation"></label>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="OrderNo">@EPMS.Web.Resources.CMS.Quotation.OrderNameNo</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @if (Model.CustomerId == 0)
                    {
                        @Html.DropDownListFor(m => m.OrderId, Enumerable.Empty<SelectListItem>(), "--Select--", new { @id = "OrderId", @class = "select2me OrderDDL" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.OrderId, new SelectList(ViewBag.Orders, "OrderId", "OrderNo"), "", new { @id = "OrderId", @class = "select2me OrderDDL", @disabled = (Model.OrderId == 0) })
                    }
                    <label id="orderValidation"></label>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="CreatedByEmployee">@EPMS.Web.Resources.CMS.Quotation.CreatedBy</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.CreatedByName, new { @id = "CreatedByEmployee", @class = "", @readonly = true })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="GreetingEn">@EPMS.Web.Resources.CMS.Quotation.Greetings</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.GreetingsEn, new { @id = "GreetingEn", @class = "" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="GreetingAr">@EPMS.Web.Resources.CMS.Quotation.GreetingsAr</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.GreetingsAr, new { @id = "GreetingAr", @class = "" })
                </div>
            </div>
        </div>
        @if (ViewBag.ShowExcelImport)
        {
            <div id="WYSIWYG_Editor_-_Minimum_Options" class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.Web.Resources.CMS.Quotation.ExcelImport</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <textarea id="tiny" rows="2" class="auto-resize"></textarea>
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="button" id="importEx" class="btn">@EPMS.Web.Resources.CMS.Quotation.Import</button>
                </div>
            </div>
        }
        <div class="row-fluid" id="ress">
            <div class="span12">
                <table class="table table-striped table-responsive ">
                    <thead class="">
                        <tr>
                            <th style="width:70%">@EPMS.Web.Resources.CMS.Quotation.ItemDetails</th>
                            <th>@EPMS.Web.Resources.CMS.Quotation.Quantity</th>
                            <th>@EPMS.Web.Resources.CMS.Quotation.UnitPrice</th>
                            <th>@EPMS.Web.Resources.CMS.Quotation.Total</th>
                            <th style="width:4%">@EPMS.Web.Resources.CMS.Quotation.Delete</th>
                        </tr>
                    </thead>
                    <tbody class="qouteAdd">
                        <tr class="ItemDetailError Error center"></tr>
                        @if (Model.QuotationItemDetails.Any())
                        {
                            for (int i = 0; i < Model.QuotationItemDetails.Count(); i++)
                            {
                                <tr data-id="@i">
                                    <td style='display:none'><input name='QuotationItemDetails.Index' type='hidden' value='@i' /></td>
                                    @Html.HiddenFor(model => model.QuotationItemDetails[i].ItemId, new { @class = "itemDetailId" })
                                    <td>
                                        @Html.TextAreaFor(model => model.QuotationItemDetails[i].ItemDetails, new { @class = "auto-resize" })
                                    </td>
                                    <td class="quantity">
                                        @Html.TextBoxFor(model => model.QuotationItemDetails[i].ItemQuantity, new { @id = "", @class = "n1" })
                                    </td>
                                    <td class="unitPrice">
                                        @Html.TextBoxFor(model => model.QuotationItemDetails[i].UnitPrice, new { @id = "", @class = "n2" })
                                    </td>
                                    <td class="total">
                                        @Html.TextBoxFor(model => model.QuotationItemDetails[i].TotalPrice, new { @id = "", @class = "n3", @readonly = true })
                                    </td>
                                    <td class="delete">
                                        <i class="icon-photon minus deleteRow"></i>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td>
                                    <textarea rows="2" class="auto-resize toBeRequired" name="QuotationItemDetails[0].ItemDetails"></textarea>
                                </td>
                                <td class="quantity">
                                    <input class="n1 toBeRequired" type="text" value="0" name="QuotationItemDetails[0].ItemQuantity">
                                </td>
                                <td class="unitPrice">
                                    <input class="n2 toBeRequired" type="text" value="0" name="QuotationItemDetails[0].UnitPrice">
                                </td>
                                <td class="total">
                                    <input class="n3" type="text" value="0" name="QuotationItemDetails[0].TotalPrice" readonly>
                                </td>
                                <td class="delete">
                                    <i class="icon-photon minus deleteRow"></i>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="button" class="btn trAdder">@EPMS.Web.Resources.CMS.Quotation.Add</button>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="subtotal">@EPMS.Web.Resources.CMS.Quotation.Subtotal</label>
            </div>
            <div class="span9">
                <div class="controls">
                    <input id="subtotal" type="text" value="0" readonly />
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Discount">@EPMS.Web.Resources.CMS.Quotation.Discount<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.QuotationDiscount, new { @id = "Discount", @class = "" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="GrandTotal">@EPMS.Web.Resources.CMS.Quotation.GrandTotal</label>
            </div>
            <div class="span9">
                <div class="controls">
                    <input id="GrandTotal" type="text" value="0" readonly />
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="inWord">@EPMS.Web.Resources.CMS.Quotation.InWords</label>
            </div>
            <div class="span9">
                <div class="controls">
                    <input id="inWord" type="text" value="0" readonly />
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3 span-inset">
                <button type="button" id="actDe" class="btn">@EPMS.Web.Resources.CMS.Quotation.ActDeActInWords</button>
            </div>
        </div>
        <div class="alert alert-info alert-block">
            <i class="icon-alert icon-alert-info"></i>
            <strong><a>@EPMS.Web.Resources.CMS.Quotation.InstallmentPlan</a></strong>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Installment1">@EPMS.Web.Resources.CMS.Quotation.FirstInstallment<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.FirstInstallement, new { @id = "Installment1", @class = "installer" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DueAt1">@EPMS.Web.Resources.CMS.Quotation.DueAt<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.FirstInsDueAtCompletion, new { @id = "DueAt1", @class = "dap" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Installment2">@EPMS.Web.Resources.CMS.Quotation.SecondInstallment<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.SecondInstallment, new { @id = "Installment2", @class = "installer" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DueAt2">@EPMS.Web.Resources.CMS.Quotation.DueAt<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.SecondInsDueAtCompletion, new { @id = "DueAt2", @class = "dap" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Installment3">@EPMS.Web.Resources.CMS.Quotation.ThirdInstallment<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ThirdInstallment, new { @id = "Installment3", @class = "installer" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DueAt3">@EPMS.Web.Resources.CMS.Quotation.DueAt<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ThirdInsDueAtCompletion, new { @id = "DueAt3", @class = "dap" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Installment4">@EPMS.Web.Resources.CMS.Quotation.FourthInstallment<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.FourthInstallment, new { @id = "Installment4", @class = "installer" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DueAt4">@EPMS.Web.Resources.CMS.Quotation.DueAt<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="0-100"><i class="icon-photon info-circle"></i></a></label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.FourthInsDueAtCompletion, new { @id = "DueAt4", @class = "dap" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="coCntrol-label" for="ExtraInformationEn">@EPMS.Web.Resources.CMS.Quotation.Notes</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(model => model.NotesEn, new { @id = "ExtraInformationEn", @class = "", })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="ExtraInformationaAr">@EPMS.Web.Resources.CMS.Quotation.NotesAr</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(model => model.NotesAr, new { @id = "ExtraInformationAr", @class = "", })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3 span-inset">
                <button type="submit" class="btn" onclick="setClientName(event)">@Model.BtnText</button>
            </div>
        </div>
    </div>
}
<script type="text/javascript" src="~/Scripts/plugins/elrte.min.js"></script>
<script type="text/javascript" src="~/Scripts/plugins/elrte.en.js"></script>
<script type="text/javascript" src="~/Scripts/plugins/jquery.nToWord.js"></script>
<script src="~/Scripts/plugins/jquery.blockUI.js"></script>
<script src="~/RichTextEditor/ckeditor.js"></script>
<script>
    function setClientName(event) {
        $("#ClientName").val($("#Client option:selected").text());
        var inst1 = $("#Installment1").val();
        var inst2 = $("#Installment2").val();
        var inst3 = $("#Installment3").val();
        var inst4 = $("#Installment4").val();
        if (inst2 > 0) {
            if (inst1 >= inst2) {
                event.preventDefault();
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'The percentage specified in the Last installment should be greater than the percentage in the previous one.'
                });
                $("#Installment2").focus();
                return false;
            }
        }
        if (inst3 > 0) {
            if (inst2 >= inst3) {
                event.preventDefault();
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'The percentage specified in the Last installment should be greater than the percentage in the previous one.'
                });
                $("#Installment3").focus();
                return false;
            }
        }
        if (inst4 > 0) {
            if (inst3 >= inst4) {
                event.preventDefault();
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'The percentage specified in the Last installment should be greater than the percentage in the previous one.'
                });
                $("#Installment4").focus();
                return false;
            }
        }
        var counter = 0;
        var customerId = $("#Client").val();
        //var orderId = $("#OrderId").val();
        var error = "";
        if (customerId == null || customerId == "" || customerId == undefined) {
            $("#customerValidation").text("Please Select Customer");
            $("#customerValidation").addClass("Error");
            counter++;
            error = "customer";
        } else {
            $("#customerValidation").text("");
            $("#customerValidation").removeClass("Error");
        }
        //if (orderId == null || orderId == "" || orderId == undefined) {
        //    $("#orderValidation").text("Please Select Order");
        //    $("#orderValidation").addClass("Error");
        //    counter++;
        //    error = "Order";
        //} else {
        //    $("#orderValidation").text("");
        //    $("#orderValidation").removeClass("Error");
        //}
        if (counter > 0) {
            //implementing focus back to error
            if ($(".Error").length > 0) {
                var divId = $(".Error")[0].id;
                if ($("#" + divId).length > 0)
                    if (error = "customer") {
                        $('html,body').animate({
                            scrollTop: $(".customerDDL").offset().top
                        },
        'slow');
                    }
                    else if (error = "Order") {
                        $('html,body').animate({
                            scrollTop: $(".OrderDDL").offset().top
                        },
        'slow');
                    }
                event.preventDefault();
                return false;
            }
        }
        return true;
    }
    function checkIfPrevItemExist() {
        var listSimple = $('.toBeRequired');
        var counter = 0;
        for (var i = 0; i < (listSimple.length) ; i++) {
            var control = listSimple[i];
            var fieldvalue = $(control).val();
            if (fieldvalue == null || fieldvalue == "" || fieldvalue == 0) {
                //$(control).prop('placeholder', 'Required');
                counter++;
                $(control).addClass("Error");

            } else {
                $(control).removeClass("Error");
            }
        }
        if (counter > 0) {
            //implementing focus back to error
            if ($(".Error").length > 0) {
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'Please Complete Previous Item Details.'
                });
                event.preventDefault();
                return false;
            }
        }
        return true;
    }
    var itemsDetailCount;
    var iExcelData = false;
    var isUpdate = false;
    var elementToDelete;
    $(document).ready(function () {
        editor = CKEDITOR.replace('ExtraInformationEn', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
            filebrowserUploadUrl: $("#siteURL").val() + '/RTB/core/connector/aspx/connector.aspx?command=QuickUpload&type=Files&currentFolder=/archive/',
            filebrowserImageUploadUrl: $("#siteURL").val() + '/RTB/core/connector/aspx/connector.aspx?command=QuickUpload&type=Images&currentFolder=/cars/',
            filebrowserFlashUploadUrl: $("#siteURL").val() + '/RTB/core/connector/aspx/connector.aspx?command=QuickUpload&type=Flash',
        });
        editor = CKEDITOR.replace('ExtraInformationAr', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
            filebrowserUploadUrl: $("#siteURL").val() + '/RTB/core/connector/aspx/connector.aspx?command=QuickUpload&type=Files&currentFolder=/archive/',
            filebrowserImageUploadUrl: $("#siteURL").val() + '/RTB/core/connector/aspx/connector.aspx?command=QuickUpload&type=Images&currentFolder=/cars/',
            filebrowserFlashUploadUrl: $("#siteURL").val() + '/RTB/core/connector/aspx/connector.aspx?command=QuickUpload&type=Flash',
        });
        var quotationId = parseInt('@Model.QuotationId');
        if (quotationId == 0) {
            $("#Discount").val(0);
            $("#Installment1").val(0);
            $("#Installment2").val(0);
            $("#Installment3").val(0);
            $("#Installment4").val(0);
            $("#DueAt1").val(0);
            $("#DueAt2").val(0);
            $("#DueAt3").val(0);
            $("#DueAt4").val(0);
            itemsDetailCount = 0;
        } else {
            itemsDetailCount = parseInt('@Model.QuotationItemDetails.Count');
            isUpdate = true;
            $("#ClientName").val($("#Client option:selected").text());
        }
        var discount = parseInt('@Model.QuotationDiscount');
        if (discount == 0 || isNaN(discount)) {
            $("#Discount").val(0);
        }
        var n2Val = $(this).parent().parent().find(".n2").val();
        $(this).parent().parent().find(".n3").val($(this).val() * n2Val);
        var x = 0;
        $('.qouteAdd tr .n3').each(function () {
            x = x + parseInt($(this).val());
        });
        $('#subtotal').val(x);
        calDiscount();
        if ('@ViewBag.ShowExcelImport' == 'True') {
            $("#importEx").on("click", function () {
                var excel = $("#WYSIWYG_Editor_-_Minimum_Options iframe").contents().find("body table");
                var coln = $(excel).find("tr:first td").length;
                var count = 0;
                var x = 0;
                itemsDetailCount = 0;
                if (coln == 3) {
                    $(excel).find("tr").each(function () {
                        var y = 0;
                        var t1 = "";
                        var t2 = 0;
                        var t3 = 0;
                        var t4 = 0;
                        $(this).find("td").each(function () {
                            if (y == 0) {
                                t1 = $(this).text();
                            }
                            else if (y == 1) {
                                t2 = parseInt($(this).text());
                            }
                            else if (y == 2) {
                                t3 = parseInt($(this).text());
                            }
                            y++;
                        });
                        t4 = t3 * t2;

                        var html = ' <tr> <td > <textarea rows="2" class="auto-resize toBeRequired" name="QuotationItemDetails[' + itemsDetailCount + '].ItemDetails">' + t1 + '</textarea> </td> ' +
                    '<td class="quantity"> <input class="n1 toBeRequired" type="text" value="' + t2 + '" name="QuotationItemDetails[' + itemsDetailCount + '].ItemQuantity"> </td> ' +
                    '<td class="unitPrice"> <input class="n2 toBeRequired" type="text" value="' + t3 + '" name="QuotationItemDetails[' + itemsDetailCount + '].UnitPrice"> </td>' +
                    ' <td class="total"> <input class="n3" type="text" readonly value="' + t4 + '" name="QuotationItemDetails[' + itemsDetailCount + '].TotalPrice"> </td> ' +
                    '<td class="delete"> <i class="icon-photon minus deleteRow"></i> </td></tr>';
                        itemsDetailCount = itemsDetailCount + 1;
                        iExcelData = true;
                        if (count == 0) {
                            $('.qouteAdd').html("");
                        }
                        $('.qouteAdd').append(html);
                        reActivateDelete();
                        reactivateCount();
                        count++;
                    });
                    $('.qouteAdd tr .n3').each(function () {

                        x = x + parseInt($(this).val());
                    });
                    $('#subtotal').val(x);
                    calDiscount();
                }
                else {
                    $.pnotify({
                        title: 'Sorry',
                        type: 'info',
                        text: 'The sheet you are trying to import is not supported, please check if the feilds match.'
                    });
                }
            });
        }
        var siteUrl = $('#siteURL').val();
        var url = siteUrl + "/CMS/Quotation/GetCustomerOrders";
        $("#Client").on("change", function () {
            var customerId = parseInt($(this).val());
            if (customerId > 0) {
                $("#ClientName").val($("#Client option:selected").text());
                //$('#SearchRequest_JobId').empty();
                $.blockUI({
                    message: '<img src="' + siteUrl + '/Images/Gallery/ajax_loader.gif" style="width:75px; height:75"/>',
                    css: { backgroundColor: '#FFFAFA', left: "47%", width: "6%" }
                });
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: "json",
                    data: {
                        customerId: customerId
                    },
                    success: function (data) {
                        populateDDL(data);
                    },
                    error: function (e) {
                        $.unblockUI();
                        alert('Error=' + e.toString());
                    }
                });
            } else {

            }

        });
        $("#AddUpdateQuotationForm").validate({
            errorElement: "span",
            errorClass: "error",
            onclick: true,
            rules: {
                "numbers": {
                    required: false,
                    digits: true
                },
                "numbers_range": {
                    range: [0, 100]
                }
            }
        });
        $(".auto-resize").keyup(function () {
            autoGrowField($(this).get(0));
        });
        $('#tiny').elrte({
            lang: "en",
            styleWithCSS: false,
            height: 200,
            toolbar: 'tiny'
        });
        $('.trAdder').on("click", function () {
            if (checkIfPrevItemExist()) {
                if (!iExcelData && !isUpdate) {
                    itemsDetailCount = itemsDetailCount + 1;
                }
                var html = ' <tr> <td > <textarea rows="2" class="auto-resize toBeRequired" name="QuotationItemDetails[' + itemsDetailCount + '].ItemDetails"></textarea> </td> ' +
                    '<td class="quantity"> <input class="n1 toBeRequired" type="text" value=0 name="QuotationItemDetails[' + itemsDetailCount + '].ItemQuantity"> </td> ' +
                    '<td class="unitPrice"> <input class="n2 toBeRequired" type="text" value=0 name="QuotationItemDetails[' + itemsDetailCount + '].UnitPrice"> </td>' +
                    ' <td class="total"> <input class="n3" type="text" readonly value=0 name="QuotationItemDetails[' + itemsDetailCount + '].TotalPrice"> </td> ' +
                    '<td class="delete"> <i class="icon-photon minus deleteRow"></i> </td></tr>';
                $('.qouteAdd').append(html);
                iExcelData = false;
                isUpdate = false;
                reActivateDelete();
                reactivateCount();
            }
        });
        reActivateDelete();
        reactivateCount();
        function reActivateDelete() {
            $('.deleteRow').on("click", function () {
                $.blockUI({
                    message: '<img src="' + siteUrl + '/Images/Gallery/ajax_loader.gif" style="width:75px; height:75"/>',
                    css: { backgroundColor: '#FFFAFA', left: "47%", width: "6%" }
                });
                var id = parseInt($(this).closest('tr').children(".itemDetailId").val());
                elementToDelete = $(this).parent().parent();
                var quotationId = parseInt('@Model.QuotationId');
                if (quotationId > 0) {

                    url = siteUrl + "/CMS/Quotation/Delete";
                    //var isErrorInDeleting = true;
                    $.ajax({
                        url: url,
                        type: 'GET',
                        dataType: "json",
                        data: {
                            itemDetailId: id
                        },
                        success: function (data) {
                            if (data.Status == "Success") {
                                itemsDetailCount = itemsDetailCount - 1;
                                var count = $('.qouteAdd tr').length;
                                if (count > 1) {
                                    elementToDelete.remove();
                                    var x = 0;
                                    $('.qouteAdd tr .n3').each(function () {
                                        x = x + parseInt($(this).val());
                                    });
                                    $('#subtotal').val(x);
                                    calDiscount();
                                }
                                //isErrorInDeleting = false;
                                $.unblockUI();
                            }
                            if (data.Status == "Error") {
                                $.unblockUI();
                                alert("Error in deleting Item Detail");
                                return;
                            }
                        },
                        error: function (e) {
                            $.unblockUI();
                            alert('Error: You are not authorized');
                            return;
                        }
                    });
                } else {
                    itemsDetailCount = itemsDetailCount - 1;
                    elementToDelete.remove();
                    var x = 0;
                    $('.qouteAdd tr .n3').each(function () {
                        x = x + parseInt($(this).val());
                    });
                    $('#subtotal').val(x);
                    calDiscount();
                    $.unblockUI();
                }
            });
        }
        function reactivateCount() {
            $('.quantity .n1').on("blur", function () {
                var n2Val = $(this).parent().parent().find(".n2").val();
                $(this).parent().parent().find(".n3").val($(this).val() * n2Val);
                var x = 0;
                $('.qouteAdd tr .n3').each(function () {
                    x = x + parseInt($(this).val());
                });
                $('#subtotal').val(x);
                calDiscount();
            });
            $('.unitPrice .n2').on("blur", function () {
                var n2Va2 = $(this).parent().parent().find(".n1").val();
                $(this).parent().parent().find(".n3").val($(this).val() * n2Va2);
                var x = 0;
                $('.qouteAdd tr .n3').each(function () {
                    x = x + parseInt($(this).val());
                });
                $('#subtotal').val(x);
                calDiscount();
            });
        }
        $('#Discount').on("blur", function () {
            calDiscount();
        });
        function calDiscount() {
            var subtotal = parseInt($('#subtotal').val());
            var discount = parseInt($('#Discount').val());
            var grand = subtotal - (subtotal * (discount / 100));
            $('#GrandTotal').val(grand);
        }
        //$.nToWord({number:n,language:"ar"});
        $('#actDe').on("click", function () {
            if ('@direction' == "ltr") {
                if ($('#inWord').hasClass("activatedBt")) {
                    $('#inWord').val("");
                    $('#inWord').removeClass("activatedBt");
                }
                else {
                    $('#inWord').val($.nToWord({ number: parseInt($('#GrandTotal').val()), language: "en" }));
                    $('#inWord').addClass("activatedBt");
                }
            }
            else if ('@direction' == "rtl") {
                if ($('#inWord').hasClass("activatedBt")) {
                    $('#inWord').val("");
                    $('#inWord').removeClass("activatedBt");
                }
                else {
                    $('#inWord').val($.nToWord({ number: parseInt($('#GrandTotal').val()), language: "ar" }));
                    $('#inWord').addClass("activatedBt");
                }
            }
        });

        $('#Discount').on("blur", function () {
            var b;
            b = parseInt($('#Discount').val());
            if (b > 100 || isNaN(b)) {
                discount();
                $(this).val(0);
                return;
            }
            function discount() {
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'The total % of discount should not exceed 100 and must be number'
                });
                $(this).val(0);
            }
        });
        $('.installer').on("blur", function () {
            b = 0;
            b = parseInt($('#Installment1').val());
            if (b > 100 || isNaN(b)) {
                noteIt();
                $(this).val(0);
                return;
            }
            else {
                b = b + parseInt($('#Installment2').val());
                if (b > 100 || isNaN(b)) {
                    noteIt();
                    $(this).val(0);
                    return;
                }
                else {
                    b = b + parseInt($('#Installment3').val());
                    if (b > 100 || isNaN(b)) {
                        noteIt();
                        $(this).val(0);
                        return;
                    }
                    else {
                        b = b + parseInt($('#Installment4').val());
                        if (b > 100 || isNaN(b)) {
                            noteIt();
                            $(this).val(0);
                            return;
                        }
                    }
                }
            }
            function noteIt() {
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'The total % of all due at project completion should not exceed 100 and must be number'
                });
                $(this).val(0);
            }
        });
        $('.dap').on("blur", function () {
            var bb;
            bb = parseInt($('#DueAt1').val());
            if (bb > 100 || isNaN(bb)) {
                noteItb();
                $(this).val(0);
                return;
            } else {
                bb = bb + parseInt($('#DueAt2').val());
                if (bb > 100 || isNaN(bb)) {
                    noteItb();
                    $(this).val(0);
                    return;
                } else {
                    bb = bb + parseInt($('#DueAt3').val());
                    if (bb > 100 || isNaN(bb)) {
                        noteItb();
                        $(this).val(0);
                        return;
                    } else {
                        bb = bb + parseInt($('#DueAt4').val());
                        if (bb > 100 || isNaN(bb)) {
                            noteItb();
                            $(this).val(0);
                            return;
                        }
                    }
                }
            }

            function noteItb() {
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'The total % of all the installments should not exceed 100 and must be number'
                });

                $(this).val(0);
            }
        });
    });
    function populateDDL(data) {
        $("#OrderId").empty();
        if (data.length > 0) {
            $("#OrderId").append(
                    $('<option></option>').val("").html("--Select--")
                );
            for (var i = 0; i < data.length; i++) {
                $("#OrderId").append(
                    $('<option></option>').val(data[i].OrderId).html(data[i].OrderNo)
                );
            }
        } else {
            $("#OrderId").append(
                    $('<option></option>').val("").html("none")
                );
        }
        $.unblockUI();
    }
</script>