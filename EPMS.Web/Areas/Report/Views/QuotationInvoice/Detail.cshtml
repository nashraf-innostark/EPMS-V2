@using Newtonsoft.Json
@model EPMS.WebModels.ViewModels.Reports.QuotationInvoiceViewModel
@{
    ViewBag.Title = EPMS.WebModels.Resources.Reports.QuotationInvoice.Detail;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var direction = EPMS.WebModels.Resources.Shared.Common.TextDirection;
}
<!-- Navigation Bar Start-->
<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/Report/QuotationInvoice/Create">
                @EPMS.WebModels.Resources.Reports.QuotationInvoice.CreateTitle
            </a>
        </li>
        <li class="current">
            @EPMS.WebModels.Resources.Reports.QuotationInvoice.Detail
        </li>
    </ul>
</div>
<!-- Navigation Bar End-->
<!-- Page Heading Start-->
<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@EPMS.WebModels.Resources.Reports.QuotationInvoice.Detail</small></h2>
</header>
<!-- Page Heading End-->
<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->

<form class="form-horizontal">
    <div class="container-fluid">
        
        <div class="control-group row-fluid">
            <!--Simple Chart begin-->
            <div class="control-group row-fluid">
                <div class="span12 span-inset-more">
                    <div id="chart_01" style="height:250px;"></div>
                    <div id="choices" style="height:20px;"></div>
                </div>
            </div>
            <!--Simple Chart end-->
        </div>

        <div class="control-group row-fluid">
            <div class="span12">

                <table id="detailTable" class="table table-striped table-responsive">
                    <thead>
                        <tr>
                            <th>@EPMS.WebModels.Resources.Reports.QuotationInvoice.Serial</th>
                            <th>@EPMS.WebModels.Resources.Reports.QuotationInvoice.Employee</th>
                            <th>@EPMS.WebModels.Resources.Reports.QuotationInvoice.Quotations</th>
                            <th>@EPMS.WebModels.Resources.Reports.QuotationInvoice.Invoices</th>
                            <th>@EPMS.WebModels.Resources.Reports.QuotationInvoice.FromTo</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>1</td>
                            <td>
                                @(direction == "ltr" ? Model.EmployeeNameE : Model.EmployeeNameA)
                            </td>
                            <td>@Model.QuotationsCount</td>
                            <td>@Model.InvoicesCount</td>
                            <td>@Model.StartDate - @Model.EndDate</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3 span-inset">
                <button type="submit" class="btn">@EPMS.WebModels.Resources.Reports.CustomerReport.GenerateAsPDF</button>
            </div>

        </div>

    </div>
</form>


<script src="~/Scripts/html2canvas/html2canvas.js"></script>
<script>
    var img;
    var theCanvas;
    var reportId;
    $(document).ready(function () {
        reportId = '@Model.ReportId';
        $('#detailTable').dataTable({
            "sPaginationType": "bootstrap",
            "aoColumns": [
                null,
                null,
                null,
                null,
                null,
            ],
            "fnInitComplete": function () {
                $(".dataTables_wrapper select").select2({
                    dropdownCssClass: 'noSearch'
                });
            },
        });
        $("#simpleSelectBox").select2({
            dropdownCssClass: 'noSearch'
        });

        DrawGraph();
        // html to canvas
        // here I am converting the html of graph to canvas
        html2canvas($("#chart_01"), {
            onrendered: function (canvas) {
                // save canvas
                theCanvas = canvas;
                var imgId = "report_" + reportId;
                SaveCanvasAsImage(theCanvas, imgId);
                UploadImage(imgId);
            }
        });

    });

    function DrawGraph() {
        var markings = [
            { color: "#F6F6F6", lineWidth: 1, xaxis: { from: '@Model.GrpahStartTimeStamp', to: '@Model.GrpahEndTimeStamp' } }
        ];

        var graphItems = '@Html.Raw(Json.Encode(Model.GraphItems))';
        var parsed = JSON.parse(graphItems);
        //var datasets = [];

        //Parsing Quotation DataSet and making Array of Values
        var quotationDataSet = '@Html.Raw(Json.Encode(Model.QuotationDataSet))';
        var quotationDataSetParsed = JSON.parse(quotationDataSet);
        var quotationtimeStamp = [];
        $.each(quotationDataSetParsed, function (index, val) {
            var values = [val.TimeStamp, val.Value];
            quotationtimeStamp.push(values);
        });

        //Parsing Invoice DataSet and making Array of Values
        var invoiceDataSet = '@Html.Raw(Json.Encode(Model.InvoiceDataSet))';
        var invoiceDataSetParsed = JSON.parse(invoiceDataSet);
        var invoiceTimeStamp = [];
        $.each(invoiceDataSetParsed, function (index, val) {
            var values = [val.TimeStamp, val.Value];
            invoiceTimeStamp.push(values);
        });
        

        var datasets = {
            "quotation": {
                label: "Quotation",
                data: quotationtimeStamp
            },
            "invoice": {
                label: "Invoice",
                data: invoiceTimeStamp
            }

        };

        var i = 0;
        $.each(datasets, function (key, val) {
            val.color = i;
            ++i;
        });

        // insert checkboxes
        var choiceContainer = $("#choices");
        $.each(datasets, function (key, val) {
            choiceContainer.append("<input type='checkbox' style='float:left;margin-left: 20px;' name='" + key +
                "' checked='checked' id='id" + key + "'></input>" +
                "<label style='float:left;'for='id" + key + "'>"
                + val.label + "</label>");
        });
        choiceContainer.find("input").click(plotAccordingToChoices);
        function plotAccordingToChoices() {
            var data = [];
            var dataArray = [];
            var xmaxl = 0;
            var xminl = 500000000;
            var ymaxl = 0;
            var yminl = 500000000;
            choiceContainer.find("input:checked").each(function () {
                var xmax = 0;
                var xmin = 5000000000;
                var ymax = 0;
                var ymin = 5000000000;
                var key = $(this).attr("name");
                var datalenght = datasets[key].data.length;
                for (n = 0; n < datalenght; n++) {
                    var x = datasets[key].data[n] + "";
                    var d = x.split(',');
                    var d1 = parseInt(d[0]);
                    var d2 = parseInt(d[1]);
                    // alert(x);
                    if (xmax < d1) {
                        xmax = d1;
                    }
                    if (xmin > d1) {
                        xmin = d1;
                    }
                    if (ymax < d2) {
                        ymax = d2;
                    }
                    if (ymin > d2) {
                        ymin = d2;
                    }
                }
                if (xmaxl < xmax) {
                    xmaxl = xmax;
                }
                if (xminl > xmin) {
                    xminl = xmin;
                }
                if (ymaxl < ymax) {
                    ymaxl = ymax;
                }
                if (yminl > ymin) {
                    yminl = ymin;
                }
                if (key && datasets[key]) {
                    data.push(datasets[key]);
                }
            });

            var xzoomMin = xminl; var xZoomMax = xmaxl; var xPanMin = xminl; var xPanMax = xmaxl; var yzoomMin = yminl; var yZoomMax = ymaxl; var yPanMin = yminl; var yPanMax = ymaxl;
            if (data.length > 0) {
                $.plot("#chart_01", data, {
                    series: {
                        lines: { show: true, fill: true }
                    },
                    grid: { hoverable: true, clickable: true, borderWidth: 1, color: '#bbb', markings: markings },

                    xaxis: {
                        mode: "time",
                        timeformat: "%y,%m,%d",
                        zoomRange: [xzoomMin, xZoomMax],
                        panRange: [xPanMin, xPanMax]
                    },
                    yaxis: {
                        zoomRange: [yzoomMin, yZoomMax],
                        panRange: [yPanMin, yPanMax]
                    },
                    zoom: {
                        interactive: true
                    },
                    pan: {
                        interactive: true
                    }
                });
            }
        }

        plotAccordingToChoices();
        // drawByChoice(datasets);

        $("<div id='tooltip'></div>").css({
            position: "absolute",
            "z-index": "500",
            display: "none",
            border: "1px solid #fdd",
            padding: "2px",
            "background-color": "#fee",
            opacity: 0.80
        }).appendTo("body");

        $("#chart_01").bind("plothover", function (event, pos, item) {
            var str = "(" + pos.x.toFixed(2) + ", " + pos.y.toFixed(2) + ")";

            $("#hoverdata").text(str);
            if (item) {
                var DATE_FORMAT = "%y,%m,%d";
                var x = $.plot.formatDate(new Date(item.datapoint[0]), DATE_FORMAT),
                    y = item.datapoint[1];

                $("#tooltip").html(item.series.label + " of " + y + " in " + x)
                    .css({ top: item.pageY + 5, left: item.pageX + 5 })
                    .fadeIn(200);
            } else {
                $("#tooltip").hide();
            }

        });

        $("#chart_01").bind("plotpan", function (event, plot) {
            var axes = plot.getAxes();
            $(".message").html("Panning to x: " + axes.xaxis.min.toFixed(2)
                + " &ndash; " + axes.xaxis.max.toFixed(2)
                + " and y: " + axes.yaxis.min.toFixed(2)
                + " &ndash; " + axes.yaxis.max.toFixed(2));
        });

        $("#chart_01").bind("plotzoom", function (event, plot) {
            var axes = plot.getAxes();
            $(".message").html("Zooming to x: " + axes.xaxis.min.toFixed(2)
                + " &ndash; " + axes.xaxis.max.toFixed(2)
                + " and y: " + axes.yaxis.min.toFixed(2)
                + " &ndash; " + axes.yaxis.max.toFixed(2));
        });

        // drawGraphs();
    }

</script>