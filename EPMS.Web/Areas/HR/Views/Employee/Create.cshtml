@using System.Configuration
@model EPMS.Web.ViewModels.Employee.EmployeeViewModel
@{
    ViewBag.Title = Model.PageTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Navigation Bar -->
<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="dashboard-En.html">
                <i class="icon-photon home"></i>
            </a>
        </li>
        @if (Roles.IsUserInRole("Admin"))
        {
            <li>
                <a href="~/HR/Employee/Index">
                    Employees
                </a>
            </li>
        }
        @if (Model.Employee != null)
        {
            <li>
                <a href="">
                    @Model.EmployeeName
                </a>
            </li>
        }
        else
        {
            <li>
                <a href="">
                    Add New Employee
                </a>
            </li>
        }
    </ul>
</div>
<!-- Page heading -->
<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@Model.EmployeeName</small></h2>
    @if (Model.Employee != null)
    {
        if (Model.Employee.EmployeeId > 0)
        {
            <img class="employeeImg" src='@Model.ImagePath' alt="Employee" />
        }
    }
</header>

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
<!-- Page heading ends -->
@using (Html.BeginForm("Create", "Employee", FormMethod.Post, new { @class = "form-horizontal", @id = "AddEditEmployeeForm", role = "form", enctype = "multipart/form-data" }))
{
    <div class="container-fluid">
        @Html.AntiForgeryToken()

        @Html.HiddenFor(model => model.Employee.EmployeeId)
        @Html.HiddenFor(model => model.Employee.EmployeeImagePath, new { @id = "EmployeeImage" })
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="EmployeeFirstName">First Nmae</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.EmployeeFirstName, new { @id = "EmployeeFirstName" })
                    @Html.ValidationMessageFor(m => m.Employee.EmployeeFirstName)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="EmployeeMiddleName">Middle Name</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.EmployeeMiddleName, new { @id = "EmployeeMiddleName" })
                    @Html.ValidationMessageFor(m => m.Employee.EmployeeMiddleName)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="EmployeeLastName">Last Name</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.EmployeeLastName, new { @id = "EmployeeLastName" })
                    @Html.ValidationMessageFor(m => m.Employee.EmployeeLastName)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="JobTitle">Job Title</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.DropDownListFor(model => model.Employee.JobTitleId, new SelectList(Model.JobTitleList, "JobTitleId", "JobTitleName"), "--Select--", new { @class = "setDeptJobId", @id = "JobTitle" })
                    @Html.ValidationMessageFor(m => m.Employee.JobTitleId)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DepartmentName">Department</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.DepartmentName, new { @id = "DepartmentName", @disabled = true })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="JobID">Job ID</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.JobTitleId, new { @disabled = true, @id = "JobID" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="MobileNumber">Mobile Number</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.EmployeeMobileNum, new { @id = "MobileNumber" })
                    @Html.ValidationMessageFor(m => m.Employee.EmployeeMobileNum)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="LandlineNumber">Telephone Number</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.EmployeeLandlineNum, new { @id = "LandlineNumber" })
                    @Html.ValidationMessageFor(m => m.Employee.EmployeeLandlineNum)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="MaritalStatus">Marital Status</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.DropDownListFor(model => model.Employee.MaritalStatus, new[] { new SelectListItem { Text = "--Select--", Value = "" }, new SelectListItem { Text = "Unmaried", Value = "1" }, new SelectListItem { Text = "Married", Value = "0" } }, new { @id = "MaritalStatus" })
                    @Html.ValidationMessageFor(m => m.Employee.MaritalStatus)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="EmployeeDOB">Date of Birth (Arabic-Gregorian)</label>
            </div>
            <div class="span9">
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.Employee.EmpDateOfBirthArabic, new { @class = "col-lg-2 datepickerArabic form-control ", onchange = "HijriToGregorian(this,'#EmployeeDOB')", @id = "EmpDateOfBirthArabic" })
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.Employee.EmployeeDOB, new { @class = "col-lg-2 datepicker form-control ", @id = "EmployeeDOB" })
                </div>
                @Html.ValidationMessageFor(m => m.Employee.EmployeeDOB)
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Nationality">Nationality</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.DropDownListFor(model => model.Employee.EmployeeNationality, new[] { new SelectListItem { Text = "--Select--", Value = "" }, new SelectListItem { Text = "Saudi Arabia", Value = "1" }, new SelectListItem { Text = "USA", Value = "2" } }, new { @id = "Nationality" })
                    @Html.ValidationMessageFor(m => m.Employee.EmployeeNationality)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="IqamaId">Iqama Number Or National ID Number</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.EmployeeIqama, new { @id = "IqamaId" })
                    @Html.ValidationMessageFor(m => m.Employee.EmployeeIqama)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="IqamaIssueDate">Iqama Issue Date Or National ID Issue Date</label>
            </div>
            <div class="span9">
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.Employee.EmployeeIqamaIssueDtAr, new { @id = "IqamaIssueDateAr", onchange = "HijriToGregorian(this,'#IqamaIssueDate')", @class = "col-lg-2 datepickerArabic form-control " })
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.Employee.EmployeeIqamaIssueDt, new { @id = "IqamaIssueDate", @class = "col-lg-2 datepicker form-control " })
                </div>
                @Html.ValidationMessageFor(m => m.Employee.EmployeeIqamaIssueDt)
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="IqamaExpiryDate">Iqama Expiry Date Or National ID Expiry Date</label>
            </div>
            <div class="span9">
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.Employee.EmployeeIqamaExpiryDtAr, new { @id = "IqamaExpiryDateAr", onchange = "HijriToGregorian(this,'#IqamaExpiryDate')", @class = "col-lg-2 datepickerArabic form-control " })
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.Employee.EmployeeIqamaExpiryDt, new { @id = "IqamaExpiryDate", @class = "col-lg-2 datepicker form-control " })
                </div>
                @Html.ValidationMessageFor(m => m.Employee.EmployeeIqamaExpiryDt)
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="PassportID">Passport Id</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.EmployeePassportNum, new { @id = "PassportID" })
                    @Html.ValidationMessageFor(m => m.Employee.EmployeePassportNum)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="PassportExpiryDate">Passport Expiry Date</label>
            </div>
            <div class="span9">
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.Employee.EmployeePassportExpiryDtAr, new { @id = "PassportExpiryDateAr", onchange = "HijriToGregorian(this,'#PassportExpiryDate')", @class = "col-lg-2 datepickerArabic form-control " })
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.Employee.EmployeePassportExpiryDt, new { @id = "PassportExpiryDate", @class = "col-lg-2 datepicker form-control " })
                </div>
                @Html.ValidationMessageFor(m => m.Employee.EmployeePassportExpiryDt)
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="ExtraInformation">Extra Information</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.EmployeeDetails, new { @id = "ExtraInformation" })
                    @Html.ValidationMessageFor(m => m.Employee.EmployeeDetails)
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="BasicSalary">Basic Salary</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Employee.JobTitle.BasicSalary, new { @disabled = true, @id = "BasicSalary" })
                    @Html.ValidationMessageFor(m => m.JobTitle.BasicSalary)
                </div>
            </div>
        </div>
        @if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("PM"))
        {
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce1">Allownce1</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.Allowance.Allowance1, new { @id = "Allownce1" })
                        @Html.ValidationMessageFor(m => m.Allowance.Allowance1)
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce2">Allownce2</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.Allowance.Allowance2, new { @id = "Allownce2" })
                        @Html.ValidationMessageFor(m => m.Allowance.Allowance2)
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce3">Allownce3</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.Allowance.Allowance3, new { @id = "Allownce3" })
                        @Html.ValidationMessageFor(m => m.Allowance.Allowance3)
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce4">Allownce4</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.Allowance.Allowance4, new { @id = "Allownce4" })
                        @Html.ValidationMessageFor(m => m.Allowance.Allowance4)
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce5">Allownce5</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.Allowance.Allowance5, new { @id = "Allownce5" })
                        @Html.ValidationMessageFor(m => m.Allowance.Allowance5)
                    </div>
                </div>
            </div>
            if (Model.Employee != null && Roles.IsUserInRole("Admin"))
            {
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="Deduction1">Deduction1</label>
                    </div>
                    <div class="span9">
                        <div class="controls">

                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="Deduction2">Deduction2</label>
                    </div>
                    <div class="span9">
                        <div class="controls">

                        </div>
                    </div>
                </div>
            }
        }
        @if (Model.Employee != null)
        {
            if (Roles.IsUserInRole("Employee"))
            {
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for=""><a>Payroll Page</a></label>
                    </div>
                </div>
            }
            <div class="alert alert-info alert-block">
                <i class="icon-alert icon-alert-info"></i>
                <strong>Requests History</strong>
            </div>
            <!--Sortable Responsive Table begin-->
            <div class="row-fluid">
                <div class="span12">
                    <table class="table table-striped table-responsive" id="tableSortableRes">
                        <thead>
                            <tr>
                                <th>Requests</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
            <!--Sortable Responsive Table end-->
            <div class="alert alert-info alert-block">
                <i class="icon-alert icon-alert-info"></i>
                <strong>Assigned Tasks</strong>
            </div>

            <!--Sortable Responsive Table begin-->
            <div class="row-fluid">
                <div class="span12">
                    <table class="table table-striped table-responsive" id="tableSortableProjects">
                        <thead>
                            <tr>
                                <th> Tasks</th>
                                <th>Project Name</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        }
        @if ((Roles.IsUserInRole("Admin")) && Model.Employee != null)
        {
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="button" class="btn">@Model.BtnText</button>
                </div>
                <div class="span3 span-inset">
                    <button type="button" class="btn">Deactivate Employee</button>
                </div>
            </div>
        }
        else if (Roles.IsUserInRole("Admin"))
        {
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="button" class="btn">@Model.BtnText</button>
                </div>
            </div>
        }
    </div>
}
<script>
    $(document).ready(function () {
        // set JobId and Department Name
        $(".setDeptJobId").on("change", function () {
            var jobId = $(this).val();
            if (jobId != "") {
                $("#JobID").val(jobId);
                var jobsList = '@Html.Raw(Json.Encode(Model.JobTitleDeptList))';
                //'@Html.Raw(Json.Encode(Model.JobTitleDeptList))';
                var parsed = JSON.parse(jobsList);

                $.each(parsed, function (key, value) {
                    if (value.JobId == jobId) {
                        $("#DepartmentName").val(value.DeptName);
                        $("#BasicSalary").val(value.BasicSalary);
                    }
                });
            } else {
                $("#DepartmentName").val(jobId);
                $("#JobID").val(jobId);
            }
        });
        $('#tableSortableRes,#tableSortableProjects').dataTable({
            "sPaginationType": "bootstrap",
            "fnInitComplete": function () {
                $(".dataTables_wrapper select").select2({
                    dropdownCssClass: 'noSearch'
                });
            }
        });

        // Gregorian Date Picker
        $(".datepicker").mask('99/99/9999');
        $(".datepicker").datepicker({
            changeMonth: true,
            changeYear: true
        });
        // Arabic Date Picker for DOB
        var calendar = $.calendars.instance('islamic');
        $('.datepickerArabic').calendarsPicker({
            calendar: calendar,
            onSelect: function () {
                $(this).change();
            }
        });
        ConvertGregorianToIslamic();
        // Date from Gregorian to Islamic Starts
        $("#EmployeeDOB").on("change", function () {
            if ($('#EmployeeDOB').val() == "") {
                $('#EmpDateOfBirthArabic').val("");
            }
            else {
                var dateToBeChanged = $('#EmployeeDOB').val();
                var newDate = ConvertDates(dateToBeChanged, 'gregorian', 'islamic');
                $('#EmpDateOfBirthArabic').val(newDate);
            }
        });
        $("#IqamaIssueDate").on("change", function () {
            if ($('#IqamaIssueDate').val() == "") {
                $('#IqamaIssueDateAr').val("");
            }
            else {
                var dateToBeChanged = $('#IqamaIssueDate').val();
                var newDate = ConvertDates(dateToBeChanged, 'gregorian', 'islamic');
                $('#IqamaIssueDateAr').val(newDate);
            }
        });
        $("#IqamaExpiryDate").on("change", function () {
            if ($('#IqamaExpiryDate').val() == "") {
                $('#IqamaExpiryDateAr').val("");
            }
            else {
                var dateToBeChanged = $('#IqamaExpiryDate').val();
                var newDate = ConvertDates(dateToBeChanged, 'gregorian', 'islamic');
                $('#IqamaExpiryDateAr').val(newDate);
            }
        });
        $("#PassportExpiryDate").on("change", function () {
            if ($('#PassportExpiryDate').val() == "") {
                $('#PassportExpiryDateAr').val("");
            }
            else {
                var dateToBeChanged = $('#PassportExpiryDate').val();
                var newDate = ConvertDates(dateToBeChanged, 'gregorian', 'islamic');
                $('#PassportExpiryDateAr').val(newDate);
            }
        });
        // Date from Gregorian to Islamic Ends
    });

    function ConvertGregorianToIslamic() {
        $("#EmpDateOfBirthArabic").val(ConvertDates($("#EmployeeDOB").val(), "gregorian", "islamic"));
        $("#IqamaIssueDateAr").val(ConvertDates($("#IqamaIssueDate").val(), "gregorian", "islamic"));
        $("#IqamaExpiryDateAr").val(ConvertDates($("#IqamaExpiryDate").val(), "gregorian", "islamic"));
        $("#PassportExpiryDateAr").val(ConvertDates($("#PassportExpiryDate").val(), "gregorian", "islamic"));
    }
    function HijriToGregorian(currElement, toValue) {
        if ($(currElement).val() == "") {
            $(toValue).val("");
        }
        else {
            var splittedDate = $(currElement).val().split('/');
            $(currElement).val(splittedDate[1] + '/' + splittedDate[2] + '/' + splittedDate[0]);
            var dateToBeChanged = $(currElement).val();
            var newDate = ConvertDates(dateToBeChanged, 'islamic', 'gregorian');
            $(toValue).val(newDate);
        }
    }
    function ConvertDates(dateTobeChanged, fromCalender, toCalender) {
        var calender = $.calendars.instance(fromCalender);
        var dateToBeChanged = calender.parseDate("mm/dd/yyyy", dateTobeChanged);
        calender = $.calendars.instance(toCalender);
        var changedDate = calender.fromJD(dateToBeChanged.toJD());
        return calender.formatDate("mm/dd/yyyy", changedDate);
    }
</script>
