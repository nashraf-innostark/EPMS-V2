@model EPMS.Web.ViewModels.Employee.EmployeeDetailViewModel
@{
    ViewBag.Title = Model.EmployeeViewModel.PageTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var direction = EPMS.Web.Resources.Shared.Common.TextDirection;
}
<!-- Navigation Bar -->
<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/HR/Employee/Index">
                @EPMS.Web.Resources.HR.Employee.Employeelist
            </a>
        </li>
        @if (Model.EmployeeViewModel.Employee != null)
        {
            <li>
                @Model.EmployeeViewModel.EmployeeName
            </li>
        }
        else
        {
            <li>
                @EPMS.Web.Resources.HR.Employee.AddNew
            </li>
        }
    </ul>
</div>
<!-- Page heading -->
<header>
    <i class="icon-big-notepad"></i>
    @if (Model.EmployeeViewModel.Employee.EmployeeId > 0)
    {
        <h2><small>@Model.EmployeeViewModel.EmployeeName</small></h2>
    }
    else
    {
        <h2><small>@EPMS.Web.Resources.HR.Employee.AddNew</small></h2>
    }

    @if (Model.EmployeeViewModel.Employee != null)
    {
        if (Model.EmployeeViewModel.Employee.EmployeeId > 0)
        {
            <img class="employeeImg" src='@Model.EmployeeViewModel.ImagePath' alt="Employee" />
        }
    }
</header>

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
<!-- Page heading ends -->
@using (Html.BeginForm("Create", "Employee", FormMethod.Post, new { @class = "form-horizontal", @id = "AddEditEmployeeForm", role = "form", enctype = "multipart/form-data" }))
{
    <div class="container-fluid">

        @Html.HiddenFor(model => model.EmployeeViewModel.Employee.EmployeeId)
        @Html.HiddenFor(model => model.EmployeeViewModel.OldAllowance.Allowance1)
        @Html.HiddenFor(model => model.EmployeeViewModel.OldAllowance.Allowance2)
        @Html.HiddenFor(model => model.EmployeeViewModel.OldAllowance.Allowance3)
        @Html.HiddenFor(model => model.EmployeeViewModel.OldAllowance.Allowance4)
        @Html.HiddenFor(model => model.EmployeeViewModel.OldAllowance.Allowance5)
        @Html.HiddenFor(model => model.EmployeeViewModel.Employee.EmployeeJobId)
        @Html.HiddenFor(model => model.EmployeeViewModel.Employee.EmployeeImagePath, new { @id = "EmployeeImage" })
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="EmployeeNameE">@EPMS.Web.Resources.HR.Employee.Name</label>
            </div>
            <div class="span9">

                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeNameE, new { @id = "EmployeeNameE", @class = "toBeRequired" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeeNameE, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="EmployeeNameA">@EPMS.Web.Resources.HR.Employee.NameA</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeNameA, new { @id = "EmployeeNameA", @class = "toBeRequired" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeeNameA, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="JobTitle">@EPMS.Web.Resources.HR.Employee.JobTitle</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @Html.DropDownListFor(model => model.EmployeeViewModel.Employee.JobTitleId, new SelectList(Model.EmployeeViewModel.JobTitleList, "JobTitleId", "JobTitleNameE"), "--Select--", new { @class = "select2me setDeptJobId", @id = "JobTitle" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.JobTitleId, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="DepartmentName">@EPMS.Web.Resources.HR.Employee.Department</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.JobTitle.DepartmentNameE, new { @id = "DepartmentName", @disabled = true })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="JobID">@EPMS.Web.Resources.HR.Employee.JobId</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.JobTitleId, new { @disabled = true, @id = "JobID" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="EmployeeJobId">@EPMS.Web.Resources.HR.Employee.EmployeeJobId</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeJobId, new { @id = "EmployeeJobId", @disabled = true })
                </div>
            </div>
        </div>
        <!--Drag And Drop Upload begin-->
        <div id="Drag_And_Drop_Upload" class="control-group row-fluid ignore">
            <div class="span3">
                <label class="control-label" for="inputField">
                    @EPMS.Web.Resources.HR.Employee.Image<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="file size shouldn't exceed 1MB"><i class="icon-photon info-circle"></i></a>
                </label>
            </div>
            <div class="span9 row-fluid">
                <div class="upload-boxes row-fluid">
                    <div class="span3" id="upload"></div>
                    <div class="span9" id="uploaded"></div>
                </div>
            </div>
        </div>
        <!--Drag And Drop Upload end-->
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="MobileNumber">@EPMS.Web.Resources.HR.Employee.MobNumber</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeMobileNum, new { @id = "MobileNumber", @class = "toBeRequired" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeeMobileNum, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="LandlineNumber">@EPMS.Web.Resources.HR.Employee.TelephoneNumber</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeLandlineNum, new { @id = "LandlineNumber", @class = "toBeRequired" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeeLandlineNum, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Email">@EPMS.Web.Resources.HR.Employee.Email</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.Email, new { @id = "Email", @class = "toBeRequired" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.Email, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="MaritalStatus">@EPMS.Web.Resources.HR.Employee.MaritalStat</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @Html.DropDownListFor(model => model.EmployeeViewModel.Employee.MaritalStatus, new[] { new SelectListItem { Text = "--Select--", Value = "" }, new SelectListItem { Text = "Unmaried", Value = "1" }, new SelectListItem { Text = "Married", Value = "0" } }, new { @id = "MaritalStatus", @class = "select2me" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="EmployeeDOB">@EPMS.Web.Resources.HR.Employee.DOB</label>
            </div>
            <div class="span9">
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmpDateOfBirthArabic, new { @class = "col-lg-2 datepickerArabic form-control", onchange = "HijriToGregorian(this,'#EmployeeDOB')", @id = "EmpDateOfBirthArabic" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeeDOB, String.Empty, new { @class = "required" })
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeDOB, new { @class = "col-lg-2 datepickerGregorian form-control toBeRequired cursorHand", @id = "EmployeeDOB", @readonly = true, onchange = "GregorianToHijri(this, EmpDateOfBirthArabic)" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Nationality">@EPMS.Web.Resources.HR.Employee.Nationality</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @Html.DropDownListFor(model => model.EmployeeViewModel.Employee.EmployeeNationality, new[]
                    {
                        new SelectListItem { Text = "--Select--", Value = "" },
                        new SelectListItem { Value = "0" , Text = "Saudi Arabia" },
                        new SelectListItem { Value = "1" , Text = "Pakistan" },
                        new SelectListItem { Value = "2" , Text = "UAE" },
                        new SelectListItem { Value = "3" , Text = "USA" },
                        new SelectListItem { Value = "4" , Text = "UK" },
                    }, new { @id = "Nationality", @class = "select2me" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="IqamaId">@EPMS.Web.Resources.HR.Employee.IqamaNo</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeIqama, new { @id = "IqamaId", @class = "toBeRequired" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeeIqama, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        @*<div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="IqamaIssueDate">Iqama Issue Date Or National ID Issue Date</label>
                </div>
                <div class="span9">
                    <div class="controls span4">
                        @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeIqamaIssueDtAr, new { @id = "IqamaIssueDateAr", onchange = "HijriToGregorian(this,'#IqamaIssueDate')", @class = "col-lg-2 datepickerArabic form-control " })
                        @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeeIqamaIssueDt, String.Empty, new { @class = "required" })
                    </div>
                    <div class="controls span4">
                        @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeIqamaIssueDt, new { @id = "IqamaIssueDate", @class = "col-lg-2 datepicker form-control " })

                    </div>
                </div>
            </div>*@
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="IqamaExpiryDate">@EPMS.Web.Resources.HR.Employee.IqamaExpiryDate</label>
            </div>
            <div class="span9">
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeIqamaExpiryDtAr, new { @id = "IqamaExpiryDateAr", onchange = "HijriToGregorian(this,'#IqamaExpiryDate')", @class = "col-lg-2 datepickerArabic form-control " })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeeIqamaExpiryDt, String.Empty, new { @class = "required" })
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeeIqamaExpiryDt, new { @id = "IqamaExpiryDate", @class = "col-lg-2 datepickerGregorian form-control toBeRequired cursorHand", @readonly = true })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="PassportID">@EPMS.Web.Resources.HR.Employee.PassId</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeePassportNum, new { @id = "PassportID", @class = "toBeRequired" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeePassportNum, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="PassportExpiryDate">@EPMS.Web.Resources.HR.Employee.PassExpiryDate</label>
            </div>
            <div class="span9">
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeePassportExpiryDtAr, new { @id = "PassportExpiryDateAr", onchange = "HijriToGregorian(this,'#PassportExpiryDate')", @class = "col-lg-2 datepickerArabic form-control " })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.EmployeePassportExpiryDt, String.Empty, new { @class = "required" })
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.EmployeePassportExpiryDt, new { @id = "PassportExpiryDate", @class = "col-lg-2 datepickerGregorian form-control toBeRequired cursorHand", @readonly = true })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label cultureE" for="ExtraInformationE">@EPMS.Web.Resources.HR.Employee.ExtraInfo</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(model => model.EmployeeViewModel.Employee.EmployeeDetailsE, new { @dir = "ltr", @id = "ExtraInformationE" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label cultureE" for="ExtraInformationA">@EPMS.Web.Resources.HR.Employee.ExtraInfo</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(model => model.EmployeeViewModel.Employee.EmployeeDetailsA, new { @id = "ExtraInformationA" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="BasicSalary">@EPMS.Web.Resources.HR.Employee.BasicSal</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.EmployeeViewModel.Employee.JobTitle.BasicSalary, new { @disabled = true, @id = "BasicSalary" })
                    @Html.ValidationMessageFor(m => m.EmployeeViewModel.Employee.JobTitle.BasicSalary)
                </div>
            </div>
        </div>
        @if (Model.Role == "Admin" || Model.Role == "PM")
        {
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce1">@EPMS.Web.Resources.HR.Employee.Allow1</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.EmployeeViewModel.Allowance.Allowance1, new { @id = "Allownce1" })
                        @Html.ValidationMessageFor(m => m.EmployeeViewModel.Allowance.Allowance1)
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce2">@EPMS.Web.Resources.HR.Employee.Allow2</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.EmployeeViewModel.Allowance.Allowance2, new { @id = "Allownce2" })
                        @Html.ValidationMessageFor(m => m.EmployeeViewModel.Allowance.Allowance2)
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce3">@EPMS.Web.Resources.HR.Employee.Allow3</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.EmployeeViewModel.Allowance.Allowance3, new { @id = "Allownce3" })
                        @Html.ValidationMessageFor(m => m.EmployeeViewModel.Allowance.Allowance3)
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce4">@EPMS.Web.Resources.HR.Employee.Allow4</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.EmployeeViewModel.Allowance.Allowance4, new { @id = "Allownce4" })
                        @Html.ValidationMessageFor(m => m.EmployeeViewModel.Allowance.Allowance4)
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Allownce5">@EPMS.Web.Resources.HR.Employee.Allow5</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(model => model.EmployeeViewModel.Allowance.Allowance5, new { @id = "Allownce5" })
                        @Html.ValidationMessageFor(m => m.EmployeeViewModel.Allowance.Allowance5)
                    </div>
                </div>
            </div>
            if (Model.EmployeeViewModel.Employee != null && Model.Role == "Admin" && Model.EmployeeViewModel.Employee.EmployeeId > 0)
            {
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="Deduction1">@EPMS.Web.Resources.HR.Employee.Deduc1</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(model => model.EmployeeViewModel.Deduction1, new { @id = "Deduction1", @disabled = true })
                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="Deduction2">@EPMS.Web.Resources.HR.Employee.Deduc2</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(model => model.EmployeeViewModel.Deduction2, new { @id = "Deduction2", @disabled = true })
                        </div>
                    </div>
                </div>
            }
        }
        @if (Model.EmployeeViewModel.Employee != null && Model.EmployeeViewModel.Employee.EmployeeId > 0)
        {
            if (Model.Role == "Employee")
            {
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for=""><a href="~/HR/Payroll/Detail/@Model.EmployeeViewModel.Employee.EmployeeId">Payroll Page</a></label>
                    </div>
                </div>
            }
            <div class="alert alert-info alert-block">
                <i class="icon-alert icon-alert-info"></i>
                <strong>@EPMS.Web.Resources.HR.Employee.ReqHistory</strong>
            </div>
            if (Model.Role != "Admin")
            {
                <div>
                    <header>
                        <i class="icon-big-notepad"></i>
                        <h2><small>@EPMS.Web.Resources.HR.Request.Requests</small></h2>
                        <h3> <small><a href="~/HR/Request/Create">@EPMS.Web.Resources.HR.Request.CreateRequest</a></small></h3>
                    </header>
                </div>
            }
            <!--Sortable Responsive Table begin-->
            <div class="row-fluid">
                <div class="span12">
                    <table class="table table-striped table-responsive" id="tableRequsts">
                        <thead>
                            <tr>
                                <th></th>
                                <th>@EPMS.Web.Resources.HR.Request.Requests</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.RequestListViewModel.aaData != null)
                            {
                                foreach (var item in Model.RequestListViewModel.aaData.ToList())
                                {
                                    <tr>
                                        <td>@item.RequestId</td>
                                        <td>@Html.ActionLink(@item.RequestTopic, "Create", "Request", new { id = item.RequestId }, null) </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <!--Sortable Responsive Table end-->
            <div class="alert alert-info alert-block">
                <i class="icon-alert icon-alert-info"></i>
                <strong>@EPMS.Web.Resources.HR.Tasks.AssigTasks</strong>
            </div>

            <!--Sortable Responsive Table begin-->
            <div class="row-fluid">
                <div class="span12">
                    <table class="table table-striped table-responsive" id="tableProjects">
                        <thead>
                            <tr>
                                <th></th>
                                <th>@EPMS.Web.Resources.HR.Tasks.Task</th>
                                <th>@EPMS.Web.Resources.HR.Tasks.ProjName</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.TaskEmployees != null)
                            {
                                foreach (var item in Model.TaskEmployees)
                                {
                                    <tr>
                                        <td>@item.TaskEmployeeId</td>
                                        @if (direction == "ltr")
                                        {
                                            <td>@Html.ActionLink(@item.ProjectTask.TaskNameE, "Create", "Task", new {area = "PMS", id = item.TaskId}, null) </td>
                                            <td>@item.ProjectTask.ProjectNameE</td>
                                        }
                                        else
                                        {
                                            <td>@Html.ActionLink(@item.ProjectTask.TaskNameA, "Create", "Task", new {area = "PMS", id = item.TaskId}, null) </td>
                                            <td>@item.ProjectTask.ProjectNameA</td>
                                        }
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        @if ((Model.Role == "Admin") && Model.EmployeeViewModel.Employee.EmployeeId > 0)
        {
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="submit" class="btn" onclick="">@Model.EmployeeViewModel.BtnText</button>
                </div>
                <div class="span3 span-inset">
                    <button type="button" class="btn">@EPMS.Web.Resources.HR.Employee.DeactiveEmp</button>
                </div>
            </div>
        }
        else if (Model.Role == "Admin")
        {
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="submit" class="btn" onclick="">@Model.EmployeeViewModel.BtnText</button>
                </div>
            </div>
        }
    </div>
}
<script src="~/RichTextEditor/ckeditor.js"></script>
<script>
    $(document).ready(function () {
        // CK Editor
        CKEDITOR.replace('ExtraInformationE');
        CKEDITOR.replace('ExtraInformationA');
        $("#AddEditEmployeeForm").validate({
            //ignore: ".ignore"
        }).settings.ignore = ".ignore, .file";
        $('.select2me').select2({
            placeholder: "Select",
            allowClear: true
        });
        // upload Image
        var errors = "";
        var url = "/HR/Employee/UploadEmployeePhoto";
        $('#upload').mfupload({
            type: 'jpg,png,tif,jpeg', //all types
            maxsize: 1,
            post_upload: url,
            folder: "./",
            ini_text: "Drag your file here or click (max: 1MB)",
            over_text: "Drop Here",
            over_col: '#666666',
            over_bkcol: '#f0f0f0',

            init: function () {
                $("#uploaded").empty();
            },

            start: function (result) {
                $("#uploaded").append("<div id='FILE" + result.fileno + "' class='files'>" + result.filename + "<div class='progress progress-info progress-thin'><div class='bar' id='PRO" + result.fileno + "'></div></div></div>");
            },

            loaded: function (result) {
                $("#PRO" + result.fileno).remove();
                $("#FILE" + result.fileno).html("Uploaded: " + result.filename + " (" + result.size + ")");
                $("#EmployeeImage").val(result.filename);
            },

            progress: function (result) {
                $("#PRO" + result.fileno).css("width", result.perc + "%");
            },

            error: function (error) {
                errors += error.filename + ": " + error.err_des + "\n";
            },

            completed: function () {
                if (errors != "") {
                    alert(errors);
                    errors = "";
                }
            }
        });

        // set JobId and Department Name
        $(".setDeptJobId").on("change", function () {
            var jobId = $(this).val();
            if (jobId != "") {
                $("#JobID").val(jobId);
                var jobsList = '@Html.Raw(Json.Encode(Model.EmployeeViewModel.JobTitleDeptList))';
                var parsed = JSON.parse(jobsList);

                $.each(parsed, function (key, value) {
                    if (value.JobId == jobId) {
                        $("#DepartmentName").val(value.DeptNameE);
                        $("#BasicSalary").val(value.BasicSalary);
                    }
                });
            } else {
                $("#DepartmentName").val(jobId);
                $("#JobID").val(jobId);
            }
        });
        $('#tableProjects').dataTable({
            "sPaginationType": "bootstrap",
            "aoColumns": [
                { "bVisible": false },
                  null,
                  null
            ],
            "fnInitComplete": function () {
                $(".dataTables_wrapper select").select2({
                    dropdownCssClass: 'noSearch'
                });
            }
        });
        $('#tableRequsts').dataTable({
            "sPaginationType": "bootstrap",
            "aoColumns": [
                { "bVisible": false }, // cloumn to be hide
                  null // not hide
            ],
            "fnInitComplete": function () {
                $(".dataTables_wrapper select").select2({
                    dropdownCssClass: 'noSearch'
                });
            }
        });
        $(".dataTables_length select").select2({
            dropdownCssClass: 'noSearch'
        });

        // Gregorian Date Picker
        $(".datepicker").mask('99/99/9999');
        $(".datepicker").datepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: "1900:2050"
        });
        // Arabic Date Picker for DOB
        var calendar = $.calendars.instance('islamic');
        $('.datepickerArabic').calendarsPicker({
            calendar: calendar,
            onSelect: function () {
                $(this).change();
            }
        });
        if ('@Model.EmployeeViewModel.Employee.EmployeeId' > 0) {
            ConvertGregorianToIslamic();
        }
        // Date from Gregorian to Islamic Starts
        $("#EmployeeDOB").on("change", function () {
            if ($('#EmployeeDOB').val() == "") {
                $('#EmpDateOfBirthArabic').val("");
            }
            else {
                var dateToBeChanged = $('#EmployeeDOB').val();
                var newDate = ConvertDates(dateToBeChanged, 'gregorian', 'islamic');
                $('#EmpDateOfBirthArabic').val(newDate);
            }
        });
        //$("#IqamaIssueDate").on("change", function () {
        //    if ($('#IqamaIssueDate').val() == "") {
        //        $('#IqamaIssueDateAr').val("");
        //    }
        //    else {
        //        var dateToBeChanged = $('#IqamaIssueDate').val();
        //        var newDate = ConvertDates(dateToBeChanged, 'gregorian', 'islamic');
        //        $('#IqamaIssueDateAr').val(newDate);
        //    }
        //});
        $("#IqamaExpiryDate").on("change", function () {
            if ($('#IqamaExpiryDate').val() == "") {
                $('#IqamaExpiryDateAr').val("");
            }
            else {
                var dateToBeChanged = $('#IqamaExpiryDate').val();
                var newDate = ConvertDates(dateToBeChanged, 'gregorian', 'islamic');
                $('#IqamaExpiryDateAr').val(newDate);
            }
        });
        $("#PassportExpiryDate").on("change", function () {
            if ($('#PassportExpiryDate').val() == "") {
                $('#PassportExpiryDateAr').val("");
            }
            else {
                var dateToBeChanged = $('#PassportExpiryDate').val();
                var newDate = ConvertDates(dateToBeChanged, 'gregorian', 'islamic');
                $('#PassportExpiryDateAr').val(newDate);
            }
        });
        // Date from Gregorian to Islamic Ends

    });

    function ConvertGregorianToIslamic() {
        $("#EmpDateOfBirthArabic").val(ConvertDates($("#EmployeeDOB").val(), "gregorian", "islamic"));
        //$("#IqamaIssueDateAr").val(ConvertDates($("#IqamaIssueDate").val(), "gregorian", "islamic"));
        $("#IqamaExpiryDateAr").val(ConvertDates($("#IqamaExpiryDate").val(), "gregorian", "islamic"));
        $("#PassportExpiryDateAr").val(ConvertDates($("#PassportExpiryDate").val(), "gregorian", "islamic"));
    }
    function HijriToGregorian(currElement, toValue) {
        if ($(currElement).val() == "") {
            $(toValue).val("");
        }
        else {
            var splittedDate = $(currElement).val().split('/');
            $(currElement).val(splittedDate[1] + '/' + splittedDate[2] + '/' + splittedDate[0]);
            var dateToBeChanged = $(currElement).val();
            var newDate = ConvertDates(dateToBeChanged, 'islamic', 'gregorian');
            $(toValue).val(newDate);
        }
    }
    function ConvertDates(dateTobeChanged, fromCalender, toCalender) {
        var calender = $.calendars.instance(fromCalender);
        var dateToBeChanged = calender.parseDate("dd/mm/yyyy", dateTobeChanged);
        calender = $.calendars.instance(toCalender);
        var changedDate = calender.fromJD(dateToBeChanged.toJD());
        return calender.formatDate("dd/mm/yyyy", changedDate);
    }
    //function validateForm(event) {
    //    event.preventDefault();
    //    // Ignore Image Validation in Data Annotation
    //    $("#AddEditEmployeeForm").validate({
    //        ignore: mf_file_upload,
    //        rules: {
    //        }
    //    });
    //}
    function validateForm(event) {
        var listSimple = $('.toBeRequired');
        var counter = 0;
        for (var i = 0; i < (listSimple.length) ; i++) {
            var control = listSimple[i];
            var fieldvalue = $(control).val();
            if (fieldvalue == null || fieldvalue == "") {
                $(control).prop('placeholder', 'Required');
                counter++;
                $(control).addClass("Error");

            } else {
                $(control).removeClass("Error");
            }
        }
        if (counter > 0) {
            //implementing focus back to error
            if ($(".Error").length > 0) {
                var divId = $(".Error")[0].id;
                if ($("#" + divId).length > 0)
                    $("#" + divId).focus();
                event.preventDefault();
                return false;
            }
        }
        return true;
    }
</script>
