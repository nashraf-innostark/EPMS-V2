@model EPMS.Web.ViewModels.IRF.ItemReleaseCreateViewModel

@{
    var direction = EPMS.Web.Resources.Shared.Common.TextDirection;
    string[] userPermissionsSet = (string[])HttpContext.Current.Session["UserPermissionSet"];
    if (Model.ItemRelease.ItemReleaseId > 0)
    {
        ViewBag.Title = EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.PageTitleEdit;
    }
    else
    {
        ViewBag.Title = EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.PageTitle;
    }
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/Inventory/ItemRelease/Index">
                @EPMS.Web.Resources.Inventory.IRF.Index.IRFIndex.Header
            </a>
        </li>
        <li class="current">
            <a href="javascript:;">
                @ViewBag.Title
            </a>
        </li>
    </ul>
</div>

<header>
    <i class="icon-big-notepad"></i>
    @if (Model.ItemRelease.ItemReleaseId > 0)
    {
        <h2><small>@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.HeaderEdit</small></h2>
    }
    else
    {
        <h2><small>@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Header</small></h2>
    }
</header>

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
@using (Html.BeginForm("Create", "ItemRelease", FormMethod.Post, new { @class = "form-horizontal AddEditItemReleaseForm", @id = "AddEditItemReleaseForm", role = "form", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(model => model.ItemRelease.ItemReleaseId)
    @Html.HiddenFor(model => model.ItemRelease.Status)
    @Html.HiddenFor(model => model.ItemRelease.QuantityReleased)
    @Html.HiddenFor(model => model.ItemRelease.Notes)
    @Html.HiddenFor(model => model.ItemRelease.NotesAr)
    @Html.HiddenFor(model => model.ItemRelease.ManagerId)
    @Html.HiddenFor(model => model.ItemRelease.RecCreatedBy)
    @Html.HiddenFor(model => model.ItemRelease.RecCreatedDate)
    <div class="container-fluid">
        @* JsTree *@
        @*<div style="margin-left: 100px">
                <div id="jstree"></div>
            </div>*@
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="FormNumber">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.ItemReleaseFormNumber</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ItemRelease.FormNumber, new { @id = "FormNumber", @class = "disableOnLoad" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="Requester">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Requester</label>
            </div>
            <div class="span2">
                <div class="controls requesterDDL">
                    @if (direction == "ltr")
                    {
                        @Html.DropDownListFor(m => m.ItemRelease.RequesterId, new SelectList(Model.Employees, "UserId", "EmployeeNameE"), "--Select--", new { @class = "select2me disableDdl", @id = "Requester" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.ItemRelease.RequesterId, new SelectList(Model.Employees, "UserId", "EmployeeNameA"), "--Select--", new { @class = "select2me disableDdl", @id = "Requester" })
                    }
                    <label id="requesterValidationError" class="required"></label>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="RfiId">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.RFI</label>
            </div>
            <div class="span2">
                <div class="controls rfiDDL">
                    @if (direction == "ltr")
                    {
                        @Html.DropDownListFor(m => m.ItemRelease.RFIId, new SelectList(Model.Rfis, "RFIId", "FormNumber"), "--Select--", new { @class = "select2me disableDdl", @id = "RfiId" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.ItemRelease.RFIId, new SelectList(Model.Rfis, "RFIId", "FormNumber"), "--Select--", new { @class = "select2me disableDdl", @id = "RfiId" })
                    }
                    <label id="rfiValidationError" class="required"></label>
                </div>
            </div>

        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="OrderNumber">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Order</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ItemRelease.OrderNo, new { @id = "OrderNumber", @class = "disableOnLoad" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="CreatedBy">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.CreatedBy</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ItemRelease.CreatedBy, new { @id = "CreatedBy", @class = "disableOnLoad" })
                </div>
            </div>
        </div>
        <div id="detailEditor">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="DeliveryInfo">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.DeliveryInfo</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="DeliveryInfoE" class="disableOnLoad" />
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="DeliveryInfoArabic">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.DeliveryInfoArabic</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="DeliveryInfoA" class="disableOnLoad" />
                    </div>
                </div>
            </div>
        </div>
        <div id="CKEditor" style="display: none">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="DeliveryInfo">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.DeliveryInfo</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(model => model.ItemRelease.DeliveryInfo, new { @id = "DeliveryInfoEn", @class = "" })
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="DeliveryInfoAr">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.DeliveryInfoArabic</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(model => model.ItemRelease.DeliveryInfoArabic, new { @id = "DeliveryInfoAr", @class = "" })
                    </div>
                </div>
            </div>
        </div>


        <div class="row-fluid" id="ress">
            <div class="span12">
                <table class="table table-striped table-responsive ">
                    <thead class="">
                        <tr>
                            <th>@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Serial</th>
                            <th style="width:50%">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.ItemDetails</th>
                            <th>@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Warehouse</th>
                            <th>@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Quantity</th>
                            <th style="width:4%">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Delete</th>
                        </tr>
                    </thead>
                    <tbody id="ItemReleaseDetailsTableBody" class="qouteAdd">
                        @if (Model.ItemReleaseDetails.Any())
                        {
                            for (int i = 0; i < Model.ItemReleaseDetails.Count(); i++)
                            {
                                <tr data-id=@i>
                                    <td style='display: none'>
                                        <input name='ItemReleaseDetails.Index' type='hidden' value=@i />

                                        @Html.HiddenFor(m => m.ItemReleaseDetails[i].IsItemDescription)
                                        @Html.HiddenFor(m => m.ItemReleaseDetails[i].IsItemSKU)
                                        @Html.HiddenFor(m => m.ItemReleaseDetails[i].ItemVariationId)
                                        @Html.HiddenFor(m => m.ItemReleaseDetails[i].IRFDetailId)
                                        @Html.HiddenFor(m => m.ItemReleaseDetails[i].PlaceInDepartment)
                                        @Html.HiddenFor(m => m.ItemReleaseDetails[i].RecCreatedBy)
                                        @Html.HiddenFor(m => m.ItemReleaseDetails[i].RecCreatedDate)
                                        @for (var q = 0; q < Model.ItemReleaseDetails[i].ItemReleaseQuantities.Count; q++)
                                        {
                                            <div class="control-group row-fluid formWarehouses_@i-@q" style="display:none">
                                                @Html.HiddenFor(m => m.ItemReleaseDetails[i].ItemReleaseQuantities[q].ItemReleaseQuantityId)
                                                @Html.HiddenFor(m => m.ItemReleaseDetails[i].ItemReleaseQuantities[q].IRFDetailId)
                                                @Html.HiddenFor(m => m.ItemReleaseDetails[i].ItemReleaseQuantities[q].ItemVariationId)
                                                @Html.HiddenFor(m => m.ItemReleaseDetails[i].ItemReleaseQuantities[q].Quantity)
                                                @Html.HiddenFor(m => m.ItemReleaseDetails[i].ItemReleaseQuantities[q].WarehouseId)
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        <div class="control-group row-fluid">
                                            <div class="span1">
                                                <label class="control-label serialNumber">@(i + 1)</label>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        @Html.TextAreaFor(m => m.ItemReleaseDetails[i].ItemDetails, new { @class = "auto-resize toBeDisable", @rows = 2 })
                                        <button type="button" class="btn itemAdder btnDisable" data-toggle="modal" data-target="#itemSearcher">+</button>
                                        @Html.ValidationMessageFor(m => m.ItemReleaseDetails[i].ItemDetails)
                                    </td>
                                    <td>
                                        @Html.TextAreaFor(m => m.ItemReleaseDetails[i].PlaceInWarehouse, new { @class = "auto-resize toBeDisable", @rows = 2 })
                                        <button type="button" class="btn itemAdder btnDisable" data-id=@i data-toggle="modal" data-target="#warhouseSelector">+</button>
                                        @Html.ValidationMessageFor(m => m.ItemReleaseDetails[i].PlaceInWarehouse)
                                    </td>
                                    <td class="quantity">
                                        @Html.TextBoxFor(m => m.ItemReleaseDetails[i].ItemQty, new { @class = "n1 disableOnLoad" })
                                        @Html.ValidationMessageFor(m => m.ItemReleaseDetails[i].ItemQty, null, new { @class = "required" })
                                    </td>
                                    <td class="delete">
                                        <i class="icon-photon minus deleteRow btnDisable"></i>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr data-id="0">
                                <td style='display:none'>
                                    <input name='ItemReleaseDetails.Index' type='hidden' value='0' />
                                    <input name='ItemReleaseDetails[0].IsItemDescription' id='ItemReleaseDetails_0__IsItemDescription' type='hidden' />
                                    <input name='ItemReleaseDetails[0].IsItemSKU' id='ItemReleaseDetails_0__IsItemSKU' type='hidden' />
                                    <input name='ItemReleaseDetails[0].ItemVariationId' id='ItemReleaseDetails_0__ItemVariationId' type='hidden' />
                                    <input name='ItemReleaseDetails[0].PlaceInDepartment' id='ItemReleaseDetails_0__PlaceInDepartment' type='hidden' />
                                </td>
                                <td>
                                    <div class="control-group row-fluid">
                                        <div class="span1">
                                            <label class="control-label serialNumber">1</label>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <textarea rows="2" id='ItemReleaseDetails_0__ItemDetails' class="auto-resize toBeDisable" data-val="true" data-val-required="The Item Details field is required." name="ItemReleaseDetails[0].ItemDetails"></textarea>
                                    <button type="button" class="btn itemAdder btnDisable" data-toggle="modal" data-target="#itemSearcher">+</button>
                                    <span class="field-validation-valid required" data-valmsg-for="ItemReleaseDetails[0].ItemDetails" data-valmsg-replace="true"></span>
                                </td>
                                <td>
                                    <textarea rows="2" id='ItemReleaseDetails_0__PlaceInWarehouse' class="auto-resize toBeDisable" data-val="true" data-val-required="The Warehouse field is required." name="ItemReleaseDetails[0].PlaceInWarehouse"></textarea>
                                    <button type="button" class="btn itemAdder btnDisable" data-toggle="modal" data-target="#warhouseSelector">+</button>
                                    <span class="field-validation-valid required" data-valmsg-for="ItemReleaseDetails[0].PlaceInWarehouse" data-valmsg-replace="true"></span>
                                </td>
                                <td class="quantity">
                                    <input id='ItemReleaseDetails_0__ItemQty' class="n1 disableOnLoad" type="text" name="ItemReleaseDetails[0].ItemQty" data-val="true" data-val-number="The field Item Qty must be a number." data-val-range="Please enter valid quantity" data-val-range-max="2147483647" data-val-range-min="1" data-val-required="The Item Qty field is required.">
                                    <span class="field-validation-valid required" data-valmsg-for="ItemReleaseDetails[0].ItemQty" data-valmsg-replace="true"></span>
                                </td>
                                <td class="delete">
                                    <i class="icon-photon minus deleteRow btnDisable"></i>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="button" class="btn trAdder btnDisable">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Add</button>
                </div>
            </div>
        </div>
        <div id="EditRecord" class="control-group row-fluid" style="display: none">
            <div class="span3 span-inset">
                <button id="edit" type="button" class="btn">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Edit</button>
            </div>
        </div>
        <div id="SubmitRecord" class="control-group row-fluid">
            <div class="span3 span-inset">
                <button type="submit" class="btn" onclick="validateForm(event)">@EPMS.Web.Resources.Inventory.IRF.AddEdit.IRFCreate.Submit</button>
            </div>
        </div>
    </div>
}

@section popups
{
    @Html.Partial("_IRFItemsPopUp")
    @*@Html.Partial("_ItemsPopUp")*@
    @Html.Partial("_IRFWarehousePopUp")
}
<script src="~/RichTextEditor/ckeditor.js"></script>
<link href="~/Content/CSS/jsTreeCheckbox/style.css" rel="stylesheet" />
<script>
    var siteUrl;
    var orderNo = [];
    var dir;
    var divId;
    var errorMessage = '@EPMS.Web.Resources.Shared.Common.RequiredDdlField';
    var errorMessageTree = '@EPMS.Web.Resources.Shared.Common.RequiredTreeField';
    var textTillParent = "";
    var itemWarehouses = '@Html.Raw(Json.Encode(Model.ItemWarehouses))';
    var parsedWarehouses = JSON.parse(itemWarehouses);
    var releaseDetails = '@Html.Raw(Json.Encode(Model.ItemReleaseDetails))';
    var parsedQuantities = JSON.parse(releaseDetails);
    var availableItemsWarehouses = [];
    // previously added quantities of item in warehouse pop up
    var addedQuantities = new Array();
    var addedQuantitiesObj = [];
    // set selected values of warehouse MultiSelect in warehouse pop up
    var selectedValues = new Array();
    $(document).ready(function () {
        siteUrl = $("#siteURL").val();
        dir = '@direction';
        divId = "jstree";
        $('.' + 'disableOnLoad' + ':input').attr('readonly', true);
        CKEDITOR.replace('DeliveryInfoEn', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('DeliveryInfoAr', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        var itemId = parseInt('@Model.ItemRelease.ItemReleaseId');
        if (itemId > 0) {
            // disable on load section
            $('.disableDdl').select2('disable');
            $('.btnDisable').addClass('disableList');
            $('.' + 'toBeDisable' + ':input').attr('readonly', true);
            // CK Editor to simple textbox
            var deliveryInfoEn = $("#DeliveryInfoEn").val();
            var regex = /(<([^>]+)>)/ig;
            var result = deliveryInfoEn.replace(regex, "");
            $("#DeliveryInfoE").val(result);

            var deliveryInfoAr = $("#DeliveryInfoAr").val();
            regex = /(<([^>]+)>)/ig;
            result = deliveryInfoAr.replace(regex, "");
            $("#DeliveryInfoA").val(result);
            $("#detailEditor").show();
            $("#CKEditor").hide();
            $("#CKEditor").hide();
            $("#SubmitRecord").hide();
            if ('@userPermissionsSet.Contains("ItemReleaseCreate")' == 'True') {
                $("#EditRecord").show();
            }
            //
        }

        $('.trAdder').on("click", function () {
            var index = $("#ItemReleaseDetailsTableBody").children("tr").length;
            var html = "<tr data-id=" + index + ">" +
                            "<td style='display:none'>" +
                                "<input name='ItemReleaseDetails.Index' type='hidden' value='" + index + "' />" +
                                "<input name='ItemReleaseDetails[" + index + "].IsItemDescription' id='ItemReleaseDetails_" + index + "__IsItemDescription' type='hidden' />" +
                                "<input name='ItemReleaseDetails[" + index + "].IsItemSKU' id='ItemReleaseDetails_" + index + "__IsItemSKU' type='hidden' />" +
                                "<input name='ItemReleaseDetails[" + index + "].ItemVariationId' id='ItemReleaseDetails_" + index + "__ItemVariationId' type='hidden' />" +
                                "<input name='ItemReleaseDetails[" + index + "].PlaceInDepartment' id='ItemReleaseDetails_" + index + "__PlaceInDepartment' type='hidden' />" +
                            "</td>" +
                            "<td>" +
                                "<div class=\"control-group row-fluid\">" +
                                    "<div class=\"span1\">" +
                                        "<label class=\"control-label serialNumber\">" + index + "</label>" +
                                    "</div>" +
                                "</div>" +
                            "</td>" +
                            "<td>" +
                                "<textarea rows=\"2\" id='ItemReleaseDetails_" + index + "__ItemDetails' class=\"auto-resize toBeDisable\" data-val=\"true\" data-val-required=\"The Item Details field is required.\" name=\"ItemReleaseDetails[" + index + "].ItemDetails\"></textarea>" +
                                "<button type=\"button\" class=\"btn itemAdder btnDisable\" data-toggle=\"modal\" data-target=\"#itemSearcher\">+</button>" +
                                "<span class=\"field-validation-valid required\" data-valmsg-for=\"ItemReleaseDetails[" + index + "].ItemDetails\" data-valmsg-replace=\"true\"></span>" +
                            "</td>" +
                            "<td>" +
                                "<textarea rows=\"2\" id='ItemReleaseDetails_" + index + "__PlaceInWarehouse' class=\"auto-resize toBeDisable\" data-val=\"true\" data-val-required=\"The Warehouse field is required.\" name=\"ItemReleaseDetails[" + index + "].PlaceInWarehouse\"></textarea>" +
                                "<button type=\"button\" class=\"btn itemAdder btnDisable\" data-toggle=\"modal\" data-target=\"#warhouseSelector\">+</button>" +
                                "<span class=\"field-validation-valid required\" data-valmsg-for=\"ItemReleaseDetails[" + index + "].PlaceInWarehouse\" data-valmsg-replace=\"true\"></span>" +
                            "</td>" +
                            "<td class=\"quantity\">" +
                                "<input id='ItemReleaseDetails_" + index + "__ItemQty' readonly='true' class='n1 disableOnLoad' type='text' name='ItemReleaseDetails[" + index + "].ItemQty' data-val='true' data-val-number='The field Item Qty must be a number.' data-val-range='Please enter valid quantity' data-val-range-max='2147483647' data-val-range-min='1' data-val-required='The Item Qty field is required.'>" +
                                "<span class='field-validation-valid required' data-valmsg-for='ItemReleaseDetails[" + index + "].ItemQty' data-valmsg-replace='true'></span>" +
                            "</td>" +
                            "<td class='delete'>" +
                                "<i class='icon-photon minus deleteRow btnDisable'></i>" +
                            "</td>" +
                        "</tr>";
            $('.qouteAdd').append(html);
            //remove validation
            $("form").removeData("validator").removeData("unobtrusiveValidation");

            //Parse the form again to apply new validations
            $.validator.unobtrusive.parse("form");
            activateSerial();
            reActivateDelete();
            //reactivateCount();
        });
        reActivateDelete();

        $("#Add").on("click", function () {
            var createFrom = $("input[name=ItemFrom]:checked").val();
            if (createFrom == "dropdown") {
                if (validateSelect2Ddl("#RFIItemVariationDropDownList", errorMessage)) {
                    getModalControlsValuesForDropDown();
                }
                $("#MultiWarehouse").empty();
                // get warehouse
                var warehouse = "";
                var itemVariationId = $("#RFIItemVariationDropDownList").val();
                $.each(parsedWarehouses, function (key, value) {
                    if (value.ItemVariationId == itemVariationId) {
                        warehouse = warehouse + value.WarehouseNo + " > " + value.PlaceInWarehouse + " - ";
                        var html = '<option value="' + value.WarehouseId + '">' + value.WarehouseNo + ' - ' + value.Quantity + '</option>';
                        $("#MultiWarehouse").append(html);
                    }
                });
                var index = parseInt($("#ItemModalIndex").val());
                $("#ItemReleaseDetails_" + index + "__PlaceInWarehouse").val(warehouse);
            }
            if (createFrom == "tree") {
                getModalControlsValuesForTree();
                $("#MultiWarehouse").empty();
                // get warehouse
                var warehouse = "";
                var itemVariationId = $("#RFIItemVariationTree").val();
                $.each(parsedWarehouses, function (key, value) {
                    if (value.ItemVariationId == itemVariationId) {
                        warehouse = warehouse + value.WarehouseNo + " > " + value.PlaceInWarehouse + " - ";
                        var html = '<option value="' + value.WarehouseId + '">' + value.WarehouseNo + ' - ' + value.Quantity + '</option>';
                        $("#MultiWarehouse").append(html);
                    }
                });
                var index = parseInt($("#ItemModalIndex").val());
                $("#ItemReleaseDetails_" + index + "__PlaceInWarehouse").val(warehouse);
            }


            

            return true;
        });
        $("#selectDepartment").on("click", function () {
            var selectedItem = $(".jstree-clicked").text();
            // validation
            if (selectedItem == "" || selectedItem == null) {
                $("#selectedItemTreeValidation").text(errorMessageTree);
                $("#selectedItemTreeValidation").addClass("Error");
                return;
            } else {
                $("#selectedItemTreeValidation").text("");
                $("#selectedItemTreeValidation").removeClass("Error");
            }
            var rfiItems = '@Html.Raw(Json.Encode(Model.ItemVariationDropDownList))';
            var parsedRfiItems = JSON.parse(rfiItems);
            $.each(parsedRfiItems, function(key, value) {
                if (value.ItemCodeSKUCode == selectedItem) {
                    $("#RFIItemVariationTree").val(value.ItemVariationId);
                }
            });
            var item = $("#RFIItemVariationTree").val();
            if (item == "" || item == 0 || item ==null) {
                $("#selectedItemTreeValidation").text(errorMessageTree);
                $("#selectedItemTreeValidation").addClass("Error");
                return;
            } else {
                $("#selectedItemTreeValidation").text("");
                $("#selectedItemTreeValidation").removeClass("Error");
            }
            $('#itemTreeSelector').modal('toggle');
            return true;
        });
        $("#treeSelector").click(function (event) {
            $('#itemTreeSelector').modal('show');
            event.preventDefault();
            $.fn.modal.Constructor.prototype.enforceFocus = function () { };
        });
        //open item pop up
        $('#itemSearcher').on('show', function () {
            //clear DDL required value label
            $("#RFIItemVariationDropDownListValidation").text("");
            $("#RFIItemVariationDropDownListValidation").removeClass("Error");

            //get the id from tr that is selected for the item popup
            var index = $(event.target).closest('tr').data('id');
            $("#ItemModalIndex").val(index);
            //get item's values
            var isItemDescription = $("#ItemReleaseDetails_" + index + "__IsItemDescription").val();
            var isItemSKU = $("#ItemReleaseDetails_" + index + "__IsItemSKU").val();
            var itemVariationId = $("#ItemReleaseDetails_" + index + "__ItemVariationId").val();
            var placeInDepartment = $("#ItemReleaseDetails_" + index + "__PlaceInDepartment").val();
            // clear selected department label text
            $("#txtSelectedDepartmentName").text("");

            //set modal fields according to modal values
            $("#RFIItemVariationDropDownList").select2("val", itemVariationId); //set the value

            if (isItemDescription == "false" || isItemDescription == "False" || isItemDescription == "") {
                $('#ItemDescriptionModalChk').attr('checked', false);
            } else {
                $('#ItemDescriptionModalChk').attr('checked', true);
            }

            if (isItemSKU == "false" || isItemSKU == "False" || isItemSKU == "") {
                $('#ItemSKUModalChk').attr('checked', false);
            } else {
                $('#ItemSKUModalChk').attr('checked', true);
            }
            var itemTreeUrl = siteUrl + "/Api/Tree/GetTreeData/";
            populateTreeJsonWTCkb(itemTreeUrl, divId, dir);
        });
        $('#warhouseSelector').on('show', function () {
            // multi select empty
            $("#MultiWarehouse").empty();
            // validation error
            $("#WarehouseQtyExceedError").text("");
            $("#WarehouseQtyNullError").text("");
            // drop all warehouse from view
            dropAllWar();
            // drop all warehouses from form while create

            // get warehouse
            var warehouse = "";
            var index = $(event.target).closest('tr').data('id');
            $("#WarehouseModalIndex").val(index);

            var itemVariationId = parseInt($("#ItemReleaseDetails_" + index + "__ItemVariationId").val());
            $.each(parsedWarehouses, function (key, value) {
                if (value.ItemVariationId == itemVariationId) {
                    warehouse = warehouse + value.PlaceInWarehouse + " - ";
                    var html = '<option value="' + value.WarehouseId + '">' + value.WarehouseNo + ' - ' + value.Quantity + '</option>';
                    $("#MultiWarehouse").append(html);
                }
            });
            var itemDetailId = $("#ItemReleaseDetails_" + index + "__IRFDetailId").val();
            if (itemDetailId > 0) {
                var quantities;
                $.each(parsedQuantities, function (key, value) {
                    if (value.ItemVariationId == itemVariationId) {
                        quantities = value.ItemReleaseQuantities;
                    }
                });
                dropAllFormWarForEdit(index, quantities.length);
                $("#WarehouseCount").val(0);

                selectedValues = new Array();
                for (var i = 0; i < quantities.length; i++) {
                    var hiddenFields =
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].Index" type="hidden" value="' + i + '" />' +
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].ItemReleaseQuantityId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__ItemReleaseQuantityId" value="' + quantities[i].ItemReleaseQuantityId + '" type="hidden" />' +
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].WarehouseId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__WarehouseId" value="' + quantities[i].WarehouseId + '" type="hidden" />' +
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].IRFDetailId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__IRFDetailId" value="' + quantities[i].IRFDetailId + '" type="hidden" />' +
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].ItemVariationId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__ItemVariationId" value="' + quantities[i].ItemVariationId + '" type="hidden" />';
                    var popUpvalues =
                        '<div class="control-group row-fluid warhouses">' + hiddenFields +
                            '<div class="span3">' +
                                '<label class="control-label" for="createdBy">' + quantities[i].Warehouse.WarehouseNumber + ' </label>' +
                            '</div>' +
                            '<div class="span7"> ' +
                                '<div class="controls">' +
                                    '<input  type="text" for="numbers" value="' + quantities[i].Quantity + '" name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].Quantity" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__Quantity">' +
                                '</div>' +
                            '</div>' +
                            '<div class="span1 span-inset">' +
                                '<button type="button" class="btn dropWar" data-id="' + i + '">-</button>' +
                            '</div>' +
                        '</div>';

                    $('.warhouseSelection').append(popUpvalues);
                    selectedValues.push(quantities[i].Warehouse.WarehouseId);
                    addedQuantitiesObj = {
                        ItemVariationId: quantities[i].ItemVariationId,
                        WarehouseId: quantities[i].Warehouse.WarehouseId,
                        Quantity: quantities[i].Quantity
                    };
                    addedQuantities.push(addedQuantitiesObj);
                    var count = parseInt($("#WarehouseCount").val());
                    count = count + 1;
                    $("#WarehouseCount").val(count);
                    dropWarhouse();
                }
                $("#MultiWarehouse").val(selectedValues);
            }
        });
        $('#warhouseSelector').on('hide', function () {
            var warehouseCount = parseInt($("#WarehouseCount").val());
            var index = parseInt($("#WarehouseModalIndex").val());

            for (var i = 0; i < warehouseCount; i++) {
                var currQty = parseInt($("#ItemReleaseDetails_" + index + "_ItemReleaseQuantities_" + i + "__Quantity").val());
                if (!isNaN(currQty)) {

                }
                var hiddenFields =
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].Index" type="hidden" value="' + i + '" />' +
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].ItemReleaseQuantityId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__ItemReleaseQuantityId" value="' + $("#ItemReleaseDetails_" + index + "_ItemReleaseQuantities_" + i + "__ItemReleaseQuantityId").val() + '" type="hidden" />' +
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].WarehouseId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__WarehouseId" value="' + $("#ItemReleaseDetails_" + index + "_ItemReleaseQuantities_" + i + "__WarehouseId").val() + '" type="hidden" />' +
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].IRFDetailId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__IRFDetailId" value="' + $("#ItemReleaseDetails_" + index + "_ItemReleaseQuantities_" + i + "__IRFDetailId").val() + '" type="hidden" />' +
                            '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].ItemVariationId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__ItemVariationId" value="' + $("#ItemReleaseDetails_" + index + "_ItemReleaseQuantities_" + i + "__ItemVariationId").val() + '" type="hidden" />';
                var mainFormValues =
                        '<div class="control-group row-fluid formWarehouses_' + index + '-' + i + '" style="display:none">' + hiddenFields +
                            '<input  type="text" for="numbers" value="' + $("#ItemReleaseDetails_" + index + "_ItemReleaseQuantities_" + i + "__Quantity").val() + '" name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].Quantity" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__Quantity">' +
                        '</div>';
                $('.AddEditItemReleaseForm').append(mainFormValues);
            }

        });
        $("#AddWarehouse").on("click", function () {
            var index = parseInt($("#WarehouseModalIndex").val());
            var addedWarehouses = $("#MultiWarehouse option:selected").length;
            var validationCount = 0;
            var i = 0;
            var quantityReleased = 0;
            $("#MultiWarehouse option:selected").each(function () {
                var warId = parseInt($(this).val());
                var itemVariationId = $("#ItemReleaseDetails_" + index + "__ItemVariationId").val();
                var availableQty;
                $.each(parsedWarehouses, function (key, value) {
                    if (value.WarehouseId == warId && value.ItemVariationId == itemVariationId) {
                        if (addedQuantities.length > 0) {
                            $.each(addedQuantities, function (key1, value1) {
                                if (value1.WarehouseId == warId && value1.ItemVariationId == itemVariationId) {
                                    availableQty = value.Quantity + value1.Quantity;
                                    return;
                                }
                            });
                        } else {
                            availableQty = value.Quantity;
                        }
                        return;
                    }
                });
                var enteredQty = parseInt($("#ItemReleaseDetails_" + index + "_ItemReleaseQuantities_" + i + "__Quantity").val());
                if (isNaN(enteredQty)) {
                    $("#WarehouseQtyNullError").text("Please enter correct value for all Quantities");
                    return false;
                } else {
                    $("#WarehouseQtyNullError").text("");
                    quantityReleased = quantityReleased + enteredQty;
                }
                if (enteredQty <= availableQty) {
                    validationCount = validationCount + 1;
                    if (validationCount == addedWarehouses) {
                        $('#warhouseSelector').modal('toggle');
                        $("#ItemReleaseDetails_" + index + "__ItemQty").val(quantityReleased);
                        return true;
                    }
                } else {
                    $("#WarehouseQtyExceedError").text("Please enter available Quantity");
                    return false;
                }
                i = i + 1;
            });

            return;
        });
        $("#selectBoxFilter").select2();
        $("#Requester").on("change", function () {
            var requesterId = $(this).val();
            if (requesterId == "") {
                $("#RfiId").empty();
                $("#RfiId").append(
                        $('<option></option>').val(0).html("none")
                    );
                $(".select2me").select2("destroy");
                $('.select2me').select2({
                    //placeholder: "Select",
                });
                $("#DeliveryInfoE").val("");
                $("#DeliveryInfoA").val("");
                //CKEDITOR.instances['DeliveryInfoEn'].setData("");
                //CKEDITOR.instances['DeliveryInfoAr'].setData("");
                return true;
            }

            var url = siteUrl + "/Inventory/ItemRelease/GetRequesterRfis";
            ajaxLoader();
            $.ajax({
                url: url,
                type: 'GET',
                dataType: "json",
                data: {
                    requesterId: requesterId
                },
                success: function (data) {
                    populateRFIDDL(data);
                },
                error: function (e) {
                    $.unblockUI();
                    alert('Error=' + e.toString());
                }
            });
        });
        $("#RfiId").on("change", function () {
            var rfiId = parseInt($("#RfiId").val());
            if (rfiId == 0) {
                $("#OrderNumber").val("");
                $("#DeliveryInfoE").val("");
                $("#DeliveryInfoA").val("");
                CKEDITOR.instances['DeliveryInfoEn'].setData("");
                CKEDITOR.instances['DeliveryInfoAr'].setData("");
            }
            $.each(orderNo, function (key, value) {
                if (value.rfiId == rfiId) {
                    $("#OrderNumber").val(value.orderNo);
                    $("#DeliveryInfoE").val(value.deliveryInfo);
                    $("#DeliveryInfoA").val(value.deliveryInfo);
                    CKEDITOR.instances['DeliveryInfoEn'].setData(value.deliveryInfo);
                    CKEDITOR.instances['DeliveryInfoAr'].setData(value.deliveryInfo);
                }
            });
        });
        $(".addWar").click(function () {
            dropAllWar();
            $("#WarehouseCount").val(0);
            var index = $("#WarehouseModalIndex").val();
            var itemVariationId = $("#ItemReleaseDetails_" + index + "__ItemVariationId").val();
            var i = 0;
            dropAllFormWarForCreate(parseInt(index));
            $("#MultiWarehouse option:selected").each(function () {
                var warId = parseInt($(this).val());
                var war;
                var quantity;
                $.each(parsedWarehouses, function (key, value) {
                    if (value.WarehouseId == warId && value.ItemVariationId == itemVariationId) {
                        war = value;
                        return;
                    }
                });
                $.each(parsedQuantities, function (key, value) {
                    if (value.WarehouseId == warId && value.ItemVariationId == itemVariationId) {
                        quantity = value;
                        return;
                    }
                });

                var html =
                '<div class="control-group row-fluid warhouses">' +
                '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].Index" type="hidden" value="' + index + '" />' +
                '<input value="' + war.WarehouseId + '" name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].WarehouseId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__WarehouseId" type="hidden" />' +
                '<input name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].IRFDetailId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__IRFDetailId" type="hidden" />' +
                '<input value="' + war.ItemVariationId + '" name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].ItemVariationId" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__ItemVariationId" type="hidden" />' +
                    '<div class="span3">' +
                        '<label class="control-label" for="createdBy">' + war.WarehouseNo + ' </label>' +
                    '</div>' +
                    '<div class="span7"> ' +
                        '<div class="controls">' +
                            '<input  type="text" for="numbers" name="ItemReleaseDetails[' + index + '].ItemReleaseQuantities[' + i + '].Quantity" id="ItemReleaseDetails_' + index + '_ItemReleaseQuantities_' + i + '__Quantity">' +
                        '</div>' +
                    '</div>' +
                    '<div class="span1 span-inset">' +
                        '<button type="button" class="btn dropWar">-</button>' +
                    '</div>' +
                '</div>';
                i = i + 1;

                if (quantity != undefined) {
                    addedQuantitiesObj = {
                        ItemVariationId: quantity.ItemVariationId,
                        WarehouseId: quantity.Warehouse.WarehouseId,
                        Quantity: quantity.Quantity
                    };
                    addedQuantities.push(addedQuantitiesObj);
                }
                var count = parseInt($("#WarehouseCount").val());
                count = count + 1;
                $("#WarehouseCount").val(count);
                $('.warhouseSelection').append(html);
                dropWarhouse();
            });
        });
        function dropWarhouse() {
            $(".dropWar").click(function (event) {
                $(this).parents().eq(1).remove();
                var i = $(event.target).data('id');
                var index = parseInt($("#WarehouseModalIndex").val());
                $(".formWarehouses_" + index + "-" + i).remove();
            });
        }
        function dropAllWar() {
            $(".warhouses").remove();
        }
        function dropAllFormWarForEdit(index, count) {
            for (var i = 0; i < count; i++) {
                $(".formWarehouses_" + index + "-" + i).remove();
            }
        }
        function dropAllFormWarForCreate(index) {
            var warehouses = $("#MultiWarehouse > option").length;
            for (var i = 0; i < warehouses; i++) {
                $(".formWarehouses_" + index + "-" + i).remove();
            }
        }
        var $radios = $('input:radio[name=ItemFrom]');
        $radios.filter('[value=dropdown]').prop('checked', true);
        $("#Simple_Select_Box_with_Filter_Search").show();
        $("#treeControl").hide();
        $("input[name=ItemFrom]:radio").change(function () {
            if ($(this).val() == "dropdown") {
                $("#Simple_Select_Box_with_Filter_Search").show();
                $("#treeControl").hide();
            }
            if ($(this).val() == "tree") {
                $("#Simple_Select_Box_with_Filter_Search").hide();
                $("#treeControl").show();
            }
        });
    });

    function AddEdit() {
        var isDetail;
        var val = '@userPermissionsSet.Contains("ItemReleaseCreate")';
        if (val == 'True') {
            isDetail = false;
        } else {
            isDetail = true;
        }
        if (isDetail) {

        } else {
            $('.btnDisable').removeClass('disableList');
            $('.disableDdl').select2('enable');
            $('.' + 'toBeDisable' + ':input').attr('readonly', false);

            //$("#detailEditor").hide();
            //$("#CKEditor").show();
            $("#EditRecord").hide();
            $("#SubmitRecord").show();
        }
    }

    $("#edit").on('click', function () {
        AddEdit();
    });
    $('#tiny').elrte({
        lang: "en",
        styleWithCSS: false,
        height: 200,
        toolbar: 'tiny'
    });
    function getModalControlsValuesForDropDown() {
        //get item's values
        var isItemDescription = $('#ItemDescriptionModalChk').is(':checked');
        var isItemSku = $('#ItemSKUModalChk').is(':checked');
        var itemVariationId = $("#RFIItemVariationDropDownList").val();

        //set item's values
        var index = $("#ItemModalIndex").val();
        $("#ItemReleaseDetails_" + index + "__IsItemDescription").val(isItemDescription);
        $("#ItemReleaseDetails_" + index + "__IsItemSKU").val(isItemSku);
        $("#ItemReleaseDetails_" + index + "__ItemVariationId").val(itemVariationId);

        //set item sku and description in details text area
        var rfiItems = '@Html.Raw(Json.Encode(Model.ItemVariationDropDownList))';
        var parsedRfiItems = JSON.parse(rfiItems);

        $.each(parsedRfiItems, function (key, value) {
            if (value.ItemVariationId == itemVariationId) {
                $("#RifItem_" + index + "__ItemDetails").val("");
                var textToAppend = "";
                if ('@direction' == "ltr") {
                    textToAppend = textToAppend + "Name: " + value.ItemNameE;
                } else {
                    textToAppend = textToAppend + "Name: " + value.ItemNameA;
                }
                if (isItemSku) {
                    textToAppend = textToAppend + "\nSKU Code: " + value.SKUCode;
                }
                if (isItemDescription) {
                    if ('@direction' == "ltr") {
                        if (value.ItemVariationDescriptionE == null) {
                            textToAppend = textToAppend + "\nDescription:";
                        } else {
                            textToAppend = textToAppend + "\nDescription: " + value.ItemVariationDescriptionE;
                        }

                    } else {
                        if (value.ItemVariationDescriptionA == null) {
                            textToAppend = textToAppend + "\nDescription:";
                        } else {
                            textToAppend = textToAppend + "\nDescription: " + value.ItemVariationDescriptionA;
                        }
                    }
                }
                $("#ItemReleaseDetails_" + index + "__ItemDetails").val(textToAppend);
            }
        });

        $('#itemSearcher').modal('toggle');
    }
    function getModalControlsValuesForTree() {
        //get item's values
        var isItemDescription = $('#ItemDescriptionModalChk').is(':checked');
        var isItemSku = $('#ItemSKUModalChk').is(':checked');
        var itemVariationId = $("#RFIItemVariationTree").val();

        //set item's values
        var index = $("#ItemModalIndex").val();
        $("#ItemReleaseDetails_" + index + "__IsItemDescription").val(isItemDescription);
        $("#ItemReleaseDetails_" + index + "__IsItemSKU").val(isItemSku);
        $("#ItemReleaseDetails_" + index + "__ItemVariationId").val(itemVariationId);

        //set item sku and description in details text area
        var rfiItems = '@Html.Raw(Json.Encode(Model.ItemVariationDropDownList))';
        var parsedRfiItems = JSON.parse(rfiItems);

        $.each(parsedRfiItems, function (key, value) {
            if (value.ItemVariationId == itemVariationId) {
                $("#RifItem_" + index + "__ItemDetails").val("");
                var textToAppend = "";
                if ('@direction' == "ltr") {
                    textToAppend = textToAppend + "Name: " + value.ItemNameE;
                } else {
                    textToAppend = textToAppend + "Name: " + value.ItemNameA;
                }
                if (isItemSku) {
                    textToAppend = textToAppend + "\nSKU Code: " + value.SKUCode;
                }
                if (isItemDescription) {
                    if ('@direction' == "ltr") {
                        if (value.ItemVariationDescriptionE == null) {
                            textToAppend = textToAppend + "\nDescription:";
                        } else {
                            textToAppend = textToAppend + "\nDescription: " + value.ItemVariationDescriptionE;
                        }

                    } else {
                        if (value.ItemVariationDescriptionA == null) {
                            textToAppend = textToAppend + "\nDescription:";
                        } else {
                            textToAppend = textToAppend + "\nDescription: " + value.ItemVariationDescriptionA;
                        }
                    }
                }
                $("#ItemReleaseDetails_" + index + "__ItemDetails").val(textToAppend);
            }
        });

        $('#itemSearcher').modal('toggle');
    }
    function reActivateDelete() {
        $('.deleteRow').on("click", function () {
            var count = $('.qouteAdd tr').length;
            if (count > 1) {
                $(this).parent().parent().remove();
                /*
                        var x = 0;
                $('.qouteAdd tr .n3').each(function(){

                     x  = x + parseInt($(this).val());

                });
                    $('#subtotal').val(x);
                    discount();
                    */
            }
            activateSerial();
        });
    }
    function activateSerial() {
        var count = $('.qouteAdd tr').length;
        var add = 0;
        $('.qouteAdd tr').each(function () {
            add++;
            $(this).find(".serialNumber").text(add);
        });
    }
    function populateRFIDDL(data) {
        $("#RfiId").empty();
        if (data.length > 0) {
            orderNo = [];
            $("#RfiId").append(
                $('<option></option>').val(0).html("--Select--")
            );
            for (var i = 0; i < data.length; i++) {
                $("#RfiId").append(
                    $('<option></option>').val(data[i].RFIId).html(data[i].FormNumber)
                );
                var order = {
                    rfiId: data[i].RFIId,
                    orderNo: data[i].OrderNumber,
                    deliveryInfo: data[i].CustomerDeliveryInfo
                };
                orderNo.push(order);


            }
        } else {
            $("#RfiId").append(
                $('<option></option>').val(0).html("none")
            );
        }
        $(".select2me").select2("destroy");
        $('.select2me').select2({
            //placeholder: "Select",
        });
        $.unblockUI();
    }
    function jsTreeClick(event) {
        return true;
    }
    function validateForm(event) {
        var requester = $("#Requester").val();
        if (requester == 0 || requester == "" || requester == null) {
            event.preventDefault();
            $("#requesterValidationError").text("Please Select Requester");
            $('html,body').animate({
                scrollTop: $(".requesterDDL").offset().top
            }, 'slow');
            return false;
        } else {
            $("#requesterValidationError").text("");
        }
        var rfi = $("#RfiId").val();
        if (rfi == 0 || rfi == "" || rfi == null) {
            event.preventDefault();
            $("#rfiValidationError").text("Please Select RFI");
            $('html,body').animate({
                scrollTop: $(".rfiDDL").offset().top
            }, 'slow');
            return false;
        } else {
            $("#rfiValidationError").text("");
        }
        return true;
    }
</script>