@model EPMS.WebModels.ViewModels.InventoryWarehouse.InventoryWarehouseCreateViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var direction = EPMS.WebModels.Resources.Shared.Common.TextDirection;
    string[] userPermissionsSet = (string[])HttpContext.Current.Session["UserPermissionSet"];
    string[] userModules = (string[])HttpContext.Current.Session["UserModules"];
    if (Model.Warehouse.WarehouseId > 0)
    {
        if (userPermissionsSet.Contains("InventoryWarehouseCreate"))
        {
            ViewBag.Title = EPMS.WebModels.Resources.Inventory.InventoryWarehouse.InventoryWarehouseEdit;
        }
        else
        {
            ViewBag.Title = EPMS.WebModels.Resources.Inventory.InventoryWarehouse.WarehouseView;
        }
    }
    else
    {
        ViewBag.Title = EPMS.WebModels.Resources.Inventory.InventoryWarehouse.InventoryWarehouseCreate;
    }
}

<style>
    .form-details input {
        margin-bottom: 6px !important;
    }
</style>

<div class="main-content withPanel">
    <div class="panel">
        <div class="panel-content filler">
            <div class="panel-logo"></div>
            <div class="panel-header">
                <h1><small>@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.TreeTitle</small></h1>
                <button type="submit" class="btn btn-mini" onclick="deleteRow();"><i class="icon-photon minus_alt" title="Delete Node"></i></button>
                <button type="submit" class="btn btn-mini" onclick="AddNewNode();"><i class="icon-photon move_alt2" title="Add Node"></i></button>
            </div>
            <div class="panel-search container-fluid">
                <form class="form-horizontal" action="javascript:;">
                    <input id="panelSearch" placeholder="Search" type="text" name="panelSearch">
                    <button class="btn btn-search"></button>
                </form>
            </div>
            <div class="sidebarMenuHolder">
                <div class="JStree">
                    <div class="Jstree_shadow_top"></div>
                    <div id="jstree"></div>
                    <div class="Jstree_shadow_bottom"></div>
                </div>
            </div>
        </div>
        <div class="panel-slider">
            <div class="panel-slider-center">
                <div class="panel-slider-arrow"></div>
            </div>
        </div>
    </div>
    <div class="breadcrumb-container">
        <ul class="xbreadcrumbs">
            <li>
                <a href="~/Dashboard/Index">
                    <i class="icon-photon home"></i>
                </a>
            </li>
            <li>
                <a href="~/Inventory/InventoryWarehouse/Index">
                    @EPMS.WebModels.Resources.Inventory.InventoryWarehouse.BCTitle
                </a>
            </li>
            <li class="current">
                <a href="javascript:;">
                    @ViewBag.Title
                </a>
            </li>
        </ul>
    </div>

    <div id="detail">
        <header>
            <i class="icon-big-notepad"></i>
            <h2><small>@ViewBag.Title</small></h2>
        </header>
        @using (Html.BeginForm("Create", "InventoryWarehouse", FormMethod.Post, new { @class = "form-horizontal", @id = "AddEditWarehouseForm", role = "form", enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(model => model.Warehouse.WarehouseId)
            @Html.HiddenFor(model => model.Warehouse.WarehouseNumber)
            @Html.HiddenFor(model => model.Warehouse.ParentId)
            @Html.HiddenFor(model => model.Warehouse.WarehouseSize)
            @Html.HiddenFor(model => model.Warehouse.RecCreatedBy)
            @Html.HiddenFor(model => model.Warehouse.RecCreatedDt)
            <div class="container-fluid">
                <div id="Warehouse" style="display: none">
                    <div class="control-group row-fluid ">
                        <div class="span3">
                            <label class="control-label" for="WarehouseNumber">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.WarehouseNumber</label>
                        </div>
                        <div class="span9">
                            <div class="controls">
                                @Html.TextBoxFor(m => m.Warehouse.WarehouseNumber, new { id = "WarehouseNumber", @class = "disable" })
                                @*@Html.ValidationMessageFor(m => m.Warehouse.WarehouseNumber, "", new { @class = "required" })*@
                            </div>
                        </div>
                    </div>
                    <div class="control-group row-fluid">
                        <div class="span3">
                            <label class="control-label" for="Manager">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.WarehouseManager</label>
                        </div>
                        @if (userModules.Contains("HRS"))
                        {
                            <div class="span2">
                                <div class="controls">
                                    @if (direction == "ltr")
                                    {
                                        @Html.DropDownListFor(model => model.Warehouse.WarehouseManager, new SelectList(Model.Employees, "EmployeeId", "EmployeeNameE"), "--Select--", new { @class = "select2me", @id = "Manager" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.Warehouse.WarehouseManager, new SelectList(Model.Employees, "EmployeeId", "EmployeeNameA"), "--Select--", new { @class = "select2me", @id = "Manager" })
                                    }
                                </div>
                                <label id="managerValidationErrorMsg" class="required"></label>
                            </div>
                        }
                        else
                        {
                            <div class="span9">
                                <div class="controls">
                                    @Html.TextBoxFor(model => model.Warehouse.ManagerName, new { @class = "toBeDisabled" })
                                    @Html.ValidationMessageFor(m => m.Warehouse.ManagerName, String.Empty, new { @class = "required" })
                                </div>
                            </div>
                        }
                    </div>
                    <div class="control-group row-fluid" id="CKEditorLocation">
                        <div class="span3">
                            <label class="control-label" for="LocationCK">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.WarehouseLocation</label>
                        </div>
                        <div class="span9">
                            <div class="controls">
                                @Html.TextAreaFor(model => model.Warehouse.WarehouseLocation, new { @id = "LocationCK", @class = "" })
                            </div>
                        </div>
                    </div>
                    <div class="control-group row-fluid" id="Location">
                        <div class="span3">
                            <label class="control-label" for="LocationText">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.WarehouseLocation</label>
                        </div>
                        <div class="span9">
                            <div class="controls">
                                <input type="text" id="LocationText" class="toBeDisabled" />
                            </div>
                        </div>
                    </div>
                    <div class="control-group row-fluid">
                        <div class="span3">
                            <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.IsFull</label>
                        </div>
                        <div class="span9 span-inset">
                            <div data-on-label="YES" data-off-label="NO" class="switch switch-small" data-on="success" data-off="danger">
                                @Html.CheckBoxFor(model => model.Warehouse.IsFull, new { @id = "IsMonetary" })
                            </div>
                        </div>
                    </div>
                </div>
                <div id="WarehouseDetails" style="display: none">
                    <div class="control-group row-fluid">
                        <div class="span3">
                            <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.NumberOfAisles</label>
                        </div>
                        <div class="span9">
                            <div class="controls">
                                @Html.TextBoxFor(m => m.Warehouse.NoOfAisles, new { id = "", @class = "disable" })
                            </div>
                        </div>
                    </div>
                    <div class="control-group row-fluid">
                        <div class="span3">
                            <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.NumberOfSections</label>
                        </div>
                        <div class="span9">
                            <div class="controls">
                                @Html.TextBoxFor(m => m.Warehouse.NoOfSections, new { id = "", @class = "disable" })
                            </div>
                        </div>
                    </div>
                    <div class="control-group row-fluid">
                        <div class="span3">
                            <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.NumberOfShalves</label>
                        </div>
                        <div class="span9">
                            <div class="controls">
                                @Html.TextBoxFor(m => m.Warehouse.NoOfShalves, new { id = "", @class = "disable" })
                            </div>
                        </div>
                    </div>
                    <div class="control-group row-fluid">
                        <div class="span3">
                            <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.NumberOfSectionsOnShalves</label>
                        </div>
                        <div class="span9">
                            <div class="controls">
                                @Html.TextBoxFor(m => m.Warehouse.NoOfSectoinsInShalves, new { id = "", @class = "disable" })
                            </div>
                        </div>
                    </div>
                </div>

                <div id="Edit" style="display: none">
                    <div class="control-group row-fluid">
                        <div class="span3 span-inset">
                            <button type="button" class="btn" id="edit">@EPMS.WebModels.Resources.Shared.Common.Edit</button>
                        </div>
                    </div>
                </div>
                <div id="SaveNewNode" style="display: none">
                    <div class="control-group row-fluid">
                        <div class="span3 span-inset">
                            <button type="submit" class="btn" onclick="validateForm(event)" name="Create">@EPMS.WebModels.Resources.Shared.Common.Create</button>
                        </div>
                    </div>
                </div>
                <div id="UpdateNode" style="display: none">
                    <div class="control-group row-fluid">
                        <div class="span3 span-inset">
                            <button type="submit" class="btn" onclick="validateForm(event)" name="Update">@EPMS.WebModels.Resources.Shared.Common.Update</button>
                        </div>
                    </div>
                </div>
                <div id="DeleteNode" style="display: none">
                    <div class="control-group row-fluid">
                        <div class="span3 span-inset">
                            <button type="submit" class="btn" name="Delete">@EPMS.WebModels.Resources.Shared.Common.Delete</button>
                        </div>
                    </div>
                </div>
            </div><!-- end container -->
        }
    </div>
    <div id="addUpdateNode">
        <form class="form-horizontal form-details">
            <input id="DetailParentId" type="hidden" />
            <input id="DetailId" type="hidden" />
            <input id="WarehouseId" type="hidden" />
            <input id="NodeLevel" type="hidden" />
            <input id="CreatedBy" type="hidden" />
            <input id="CreatedDt" type="hidden" />
            <header>
                <i class="icon-big-notepad"></i>
                <h2><small>@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.InventoryWarehouseDetail</small></h2>
            </header>
            <div class="container-fluid">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.DetailNameEn</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            <input type="text" id="nameEn" class="toBeDisabledDetail" />
                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.DetailNameAr</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            <input type="text" id="nameAr" class="toBeDisabledDetail" />
                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid" id="divShelfOrSpace" style="display: none">
                    <div class="span3">
                        <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.ShelfSpace</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            <label>
                                <input id="shelf" type="radio" name="shelfspace" value="Shelf">
                                @EPMS.WebModels.Resources.Inventory.InventoryWarehouse.Shelf
                            </label>
                            <br />
                            <label>
                                <input id="space" type="radio" name="shelfspace" value="Space">
                                @EPMS.WebModels.Resources.Inventory.InventoryWarehouse.Space
                            </label>
                        </div>
                    </div>
                </div>
                <div id="EditDetail" style="display: none">
                    <div class="control-group row-fluid">
                        <div class="span3 span-inset">
                            <button type="button" class="btn" id="editDetail">@EPMS.WebModels.Resources.Shared.Common.Edit</button>
                        </div>
                    </div>
                </div>
                <div id="AddDetail" style="display: none">
                    <div class="control-group row-fluid">
                        <div class="span3 span-inset">
                            <button type="button" class="btn disableBtn" onclick="SaveNode(); ">@EPMS.WebModels.Resources.Shared.Common.Create</button>
                        </div>
                    </div>
                </div>
                <div id="UpdateDetail" style="display: none">
                    <div class="control-group row-fluid">
                        <div class="span3 span-inset">
                            <button type="button" class="btn disableBtn" onclick="SaveNode(); ">@EPMS.WebModels.Resources.Shared.Common.Update</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script src="~/RTE/ckeditor.js"></script>
<script src="~/Scripts/Functions/jsTreePopulate.js"></script>
<script>
    var warehouseId;
    var dir = '@direction';
    var myTree;
    var inventoryWarehouse = '@Html.Raw(Json.Encode(Model.Warehouse.WarehouseDetails))';
    var parsed = JSON.parse(inventoryWarehouse);
    $().ready(function () {
        $("#layoutMainContent").removeClass("main-content");
        $('.' + 'disable' + ':input').attr('disabled', true);
        warehouseId = parseInt('@Model.Warehouse.WarehouseId');
        var parentNodeId = warehouseId + "_Parent";
        AddEdit();
        $("#addUpdateNode").hide();
        if (warehouseId == 0) {
            $("#Warehouse").show();
            $("#WarehouseDetails").hide();
        } else {
            $("#Warehouse").show();
            $("#WarehouseDetails").show();
        }
        var treeInitialData;
        if (dir == "ltr") {
            treeInitialData = [
                {
                    "data": {
                        "title": '@Model.Warehouse.WarehouseNumber',
                        "attr": { "href": "#", "onclick": "jsTreeClick(event)" }
                    },
                    "attr": { "id": parentNodeId },
                }
            ];
        } else {
            treeInitialData = [
                {
                    "data": {
                        "title": '@Model.Warehouse.WarehouseNumber',
                        "attr": { "href": "#", "onclick": "jsTreeClick(event)" }
                    },
                    "attr": { "id": parentNodeId },
                }
            ];
        }
        myTree = $("#jstree").jstree({
            "json_data": {
                "data": treeInitialData
            },
            "plugins": ["themes", "json_data", "ui"],
            "ui": {
                "initially_select": [parentNodeId]
            },
            "core": {
                "initially_open": [parentNodeId]
            }
        });
        var siteUrl = $('#siteURL').val();
        var url = siteUrl + "/Inventory/InventoryWarehouse/GetWarehouseDetails";
        if (warehouseId > 0) {
            populateTree(warehouseId, "jstree", url);
        }
    });
    $("#edit").click(function (event) {
        $('#Manager').select2('enable');
        $('.' + 'toBeDisabled' + ':input').attr('disabled', false);
        $("#CKEditorLocation").show();
        $("#Location").hide();
        $("#SaveNewNode").css("display", "none");
        $("#UpdateNode").css("display", "block");
        $("#DeleteNode").css("display", "block");
        $("#Edit").css("display", "none");
        CKEDITOR.replace('LocationCK', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
    });

    function AddEdit() {
        var isDetail;
        var val = '@userPermissionsSet.Contains("InventoryWarehouseCreate")';
        if (val == 'True') {
            isDetail = false;
        } else {
            isDetail = true;
        }
        var loc = $("#LocationCK").val();
        var regex = /(<([^>]+)>)/ig;
        var result = loc.replace(regex, "");
        $("#LocationText").val(result);
        if (isDetail == true) {
            $('.' + 'toBeDisabled' + ':input').attr('disabled', true);
            $('#Manager').select2('disable');
            $("#SaveNewNode").css("display", "none");
            $("#UpdateNode").css("display", "none");
            $("#DeleteNode").css("display", "none");
            $("#Edit").css("display", "none");

        } else {
            if (warehouseId > 0) {
                $('#Manager').select2('disable');
                $("#SaveNewNode").css("display", "none");
                $("#Edit").css("display", "block");
                $('.' + 'toBeDisabled' + ':input').attr('disabled', true);
            } else {
                $("#SaveNewNode").css("display", "block");
                $("#Edit").css("display", "none");
            }
            $("#UpdateNode").css("display", "none");
            $("#DeleteNode").css("display", "none");
        }
        if (warehouseId == 0) {
            $("#CKEditorLocation").show();
            $("#Location").hide();
            CKEDITOR.replace('LocationCK', {
                filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
            });
        } else {
            $("#CKEditorLocation").hide();
            $("#Location").show();
        }
    }
    function validateForm(event) {
        var managerId = $("#Manager").val();
        if (managerId != undefined) {
            if (managerId == "" || managerId == 0) {
                $("#managerValidationErrorMsg").text("Warehouse Manager is required");
                event.preventDefault();
                return false;
            } else {
                $("#managerValidationErrorMsg").text("");
                return true;
            }
        }
    }
    function jsTreeClick(event) {
        var currNode = event.currentTarget.parentNode.id;
        var parentId = warehouseId + "_Parent";
        if (currNode != parentId) {
            $("#detail").hide();
            $("#addUpdateNode").show();
        } else {
            $("#detail").show();
            $("#addUpdateNode").hide();
        }
        var temp = $(event.target).text();
        var text = temp.substring(1, temp.length);
        if (text == '@Model.Warehouse.WarehouseNumber') {
            return true;
        } else {
            $.each(parsed, function (key, value) {
                if (value.NameEn == text || value.NameAr == text) {
                    $("#DetailParentId").val(value.ParentId);
                    $("#WarehouseId").val(value.WarehouseId);
                    $("#DetailId").val(value.WarehouseDetailId);
                    $("#NodeLevel").val(value.NodeLevel);
                    if (value.NodeLevel == 3 || value.NodeLevel == 5) {
                        $("#divShelfOrSpace").show();
                        if (value.NodeLevel == 3) {
                            var $radios = $('input:radio[name=shelfspace]');
                            $radios.filter('[value=Shelf]').prop('checked', true);
                            $("#divShelfOrSpace").addClass('disableList');
                        } else if (value.NodeLevel == 5) {
                            var $radios = $('input:radio[name=shelfspace]');
                            $radios.filter('[value=Space]').prop('checked', true);
                            $("#divShelfOrSpace").addClass('disableList');
                        }
                    } else {
                        $("#divShelfOrSpace").hide();
                    }
                    $("#nameEn").val(value.NameEn);
                    $("#nameAr").val(value.NameAr);
                    $("#CreatedBy").val(value.RecCreatedBy);
                    $("#CreatedDt").val(value.RecCreatedDt);
                    $('.' + 'toBeDisabledDetail' + ':input').attr('disabled', true);
                    if ('@userPermissionsSet.Contains("InventoryWarehouseCreate")' == 'True') {
                        $("#EditDetail").show();
                        $("#AddDetail").hide();
                        $("#UpdateDetail").hide();
                    }
                }
            });
        }
        return true;
    }
    $("#editDetail").click(function () {
        $('.' + 'toBeDisabledDetail' + ':input').attr('disabled', false);
        $("#EditDetail").hide();
        $("#AddDetail").hide();
        $("#UpdateDetail").show();
    });
    function AddNewNode() {
        if (parseInt($("#Warehouse_WarehouseId").val()) == 0) {
            return false;
        }
        var parentId = $('#jstree').jstree('get_selected').attr('id');
        var warehouse = warehouseId + "_Parent";
        if (parentId == warehouse) {
            $("#DetailParentId").val(0);
            $("#NodeLevel").val(1);
        } else {
            $("#DetailParentId").val(parentId);
            $("#NodeLevel").val((parseInt($("#NodeLevel").val()) + 1));
        }
        if (parseInt($("#NodeLevel").val()) > 4) {
            alert("You can't create further child node");
            return false;
        } else {
            $("#detail").hide();
            $("#addUpdateNode").show();
            $('.' + 'toBeDisabledDetail' + ':input').attr('disabled', false);
        }
        $("#WarehouseId").val(parseInt($("#Warehouse_WarehouseId").val()));
        $("#DetailId").val(0);
        $("#nameEn").val("");
        $("#nameAr").val("");
        $("#CreatedBy").val("");
        $("#CreatedDt").val("");
        var $radios = $('input:radio[name=shelfspace]');
        if (parseInt($("#NodeLevel").val()) == 3) {
            $("#divShelfOrSpace").show();
            $radios.filter('[value=Shelf]').prop('checked', true);
            $("#divShelfOrSpace").removeClass('disableList');
        } else {
            $radios.filter('[value=Shelf]').prop('checked', false);
            $radios.filter('[value=Space]').prop('checked', false);
            $("#divShelfOrSpace").hide();
        }
        $("#EditDetail").hide();
        $("#AddDetail").show();
        $("#UpdateDetail").hide();
        return true;
    }
    function SaveNode() {
        $("button.disableBtn").attr("disabled", true);
        var parent = parseInt($('#DetailParentId').val());
        if (isNaN(parent)) {
            parent = 0;
        }
        var parentId = parent;
        var warehouseId = parseInt($("#WarehouseId").val());
        var nodeId = parseInt($("#DetailId").val());
        var titleEn = $("#nameEn").val();
        var titleAr = $("#nameAr").val();
        var createFrom = $("input[name=shelfspace]:checked").val();
        var nodeLevel;
        if (createFrom == "Shelf") {
            nodeLevel = 3;
        }
        else if (createFrom == "Space") {
            nodeLevel = 5;
        } else {
            nodeLevel = parseInt($("#NodeLevel").val());
        }
        var createdBy = $("#CreatedBy").val();
        var createdDt = $("#CreatedDt").val();
        var dataToPost = {
            parentId: parentId,
            warehouseId: warehouseId,
            nodeId: nodeId,
            nameEn: titleEn,
            nameAr: titleAr,
            nodeLevel: nodeLevel,
            createdBy: createdBy,
            createdDt: createdDt,
        };
        var postUrl = $("#siteURL").val() + "/Inventory/InventoryWarehouse/SaveWarehouseDetails";
        $.ajax({
            type: "POST",
            datatype: "json",
            url: postUrl,
            data: dataToPost,
            success: function (data) {
                // Set values
                successCreatingNode(data);
            },
            error: callError
        });
    }
    function successCreatingNode(data) {
        $("button.disableBtn").attr("disabled", true);
        if (data != null) {
            if (data == "Saved") {
                window.location.reload();
            }
            if (data == "Updated") {
                window.location.reload();
            }
        }
        else {
            alert("Problem in Saving Changes.");
        }
    }
    function callError() {
        $("button.disableBtn").attr("disabled", true);
        alert("Problem in Saving Changes.");
    }
    function deleteRow() {
        if (confirm("Are you sure you want to delete this row ?") == false) {
            return;
        }

        debugger;
        if (parseInt($("#Warehouse_WarehouseId").val()) == 0) {
            return false;
        }
        var parentId = $('#jstree').jstree('get_selected').attr('id');

        var serviceUrl = '/Inventory/InventoryWarehouse/Delete';
        $.ajax({
            url: serviceUrl,
            type: "POST",
            dataType: "json",
            data: {
                id: parentId
            },
            success: function (data) {
                if (data == "Deleted") {
                    $.pnotify({
                        title: 'Success',
                        type: 'success',
                        text: 'Record has been Deleted.'
                    });
                    location.reload();
                } else if (data == "AssociatedDetails") {
                    $.pnotify({
                        title: 'Failure',
                        type: 'error',
                        text: 'Cannot delete, sections exist.'
                    });
                } else {
                    $.pnotify({
                        title: 'Failure',
                        type: 'error',
                        text: 'Cannot delete, inventory items exist.'
                    });
                }

            },
        });
    }
</script>