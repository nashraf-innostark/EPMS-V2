@model EPMS.WebModels.ViewModels.InventoryItem.InventoryItemListViewModel

@{
    var direction = EPMS.WebModels.Resources.Shared.Common.TextDirection;
    ViewBag.Title = EPMS.WebModels.Resources.Inventory.InventoryItem.Label; ;
    ViewBag.MessageVM = TempData["message"];
    Layout = "~/Views/Shared/_Layout.cshtml";
    var serial = 0;
    string[] userPermissionsSet = (string[])HttpContext.Current.Session["UserPermissionSet"];
}

<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="">
                @EPMS.WebModels.Resources.Inventory.InventoryItem.Label
            </a>
        </li>
    </ul>
</div>

<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@ViewBag.Title</small></h2>
    @if (userPermissionsSet.Contains("InventoryItemCreate"))
    {
        <h3> <small><a href="~/Inventory/InventoryItem/Create">@EPMS.WebModels.Resources.Inventory.InventoryItem.CreateNew</a></small></h3>
    }
</header>

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->

<form class="form-horizontal">
    <div id="English" class="container-fluid">

        @Html.HiddenFor(model => model.SearchRequest.SearchString, new { id = "searchString" })
        <div class="row-fluid">
            <div class="span12">
                <table id="InventoryItems" class="table table-striped table-responsive">
                    <thead>
                        <tr>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Serial</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemCode</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemName</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.DescriptionEn</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.DeptInfo</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.QOnHand</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.QSold</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.AveragePrice</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.AverageCost</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.ReorderPoint</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Delete</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>

    </div>
</form>

<script>
    $(document).ready(function () {
        var oTable = $('#InventoryItems').dataTable({
            "sPaginationType": "bootstrap",
            "bProcessing": true,
            "bServerSide": true,
            "aoColumns": [
                {
                    "aTargets": [0],
                    "sDefaultContent": "",
                    "bVisible": true,
                    "bSortable": false
                },
                {
                    "aTargets": [1],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        return full["ItemCode"];
                    },
                    "bSortable": true
                },
                {
                    "aTargets": [2],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        var name = full["ItemNameEn"];
                        var id = full["ItemId"];
                        var element = '<a href="Create/' + id + '">' + name + '</a>';
                        return element;
                    },
                    "bSortable": true
                },
                {
                    "aTargets": [3],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        return full["ItemDescriptionEn"];
                    },
                    "bSortable": true
                },
                {
                    "aTargets": [4],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        return full["DepartmentPath"];
                    },
                    "bSortable": false
                },
                {
                    "aTargets": [5],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        return full["QuantityInHand"];
                    },
                    "bSortable": false
                },
                {
                    "aTargets": [6],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        return full["QuantitySold"];
                    },
                    "bSortable": false
                },
                {
                    "aTargets": [7],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        return full["AveragePrice"];
                    },
                    "bSortable": false
                },
                {
                    "aTargets": [8],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        return full["AverageCost"];
                    },
                    "bSortable": false
                },
                {
                    "aTargets": [9],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        return full["ReorderLevel"];
                    },
                    "bSortable": false
                },
                {
                    "aTargets": [10],
                    "sDefaultContent": "",
                    "mRender": function (data, type, full) {
                        var name = "Delete";
                        var id = full["ItemId"];
                        //var element = '<a href="Delete/' + id + '">' + name + '</a>';
                        var ele = '<a><span class="cursorHand" onclick="deleteRow(' + id + ')">' + name + '</span></a>';
                        return ele;
                    },
                    "bSortable": true
                }
            ],
            "fnServerParams": function (aoData) {
                aoData.push({ "name": "search", "value": $('input').val() });
            },
            "sAjaxSource": "/Inventory/InventoryItem/Index",
            "sServerMethod": "POST",
            "oLanguage": {
                "sLoadingRecords": "Please wait - loading records...",
                "sZeroRecords": "No records to display.",
                "sProcessing": "Processing...",
                "sInfoEmpty": "No entries to display."
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex) {
                var oSettings = oTable.fnSettings();
                $("td:first", nRow).html(oSettings._iDisplayStart + iDisplayIndex + 1);
                return nRow;
            },
        });

        $(".dataTables_length select").select2({
            dropdownCssClass: 'noSearch'
        });
        $(".dataTables_filter input").unbind()
            .bind("input", function (e) {
                // Bind our desired behavior
                if (this.value.length >= 3 || e.keyCode == 13) {
                    $("#searchString").val(this.value);
                    oTable.fnDraw();
                }
                if (this.value == "") {
                    $("#searchString").val(this.value);
                    oTable.fnDraw();
                }
                return;
            });
    });

    function deleteRow(inventoryItemId) {
        if (confirm("Are you sure you want to delete this row ?") == false) {
            return;
        }

        var serviceUrl = '/Inventory/InventoryItem/Delete';
        $.ajax({
            url: serviceUrl,
            type: "POST",
            dataType: "json",
            data: {
                inventoryItemId: inventoryItemId
            },
            success: function (data) {
                if (data == "Deleted") {
                    $.pnotify({
                        title: 'Success',
                        type: 'success',
                        text: 'Record has been Deleted.'
                    });
                    var row = $("." + inventoryItemId).parent().get(0);
                    var atable = $('#InventoryItems').dataTable();
                    var pos = atable.fnGetPosition(row);
                    atable.fnDeleteRow(pos);
                } else {
                    $.pnotify({
                        title: 'Failure',
                        type: 'error',
                        text: 'Cannot delete, Variation exists.'
                    });
                }
            },
        });
    }

</script>