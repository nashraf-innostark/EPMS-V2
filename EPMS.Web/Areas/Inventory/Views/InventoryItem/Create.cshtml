@using System.Configuration
@using EPMS.Models.ResponseModels
@model EPMS.Web.ViewModels.InventoryItem.InventoryItemViewModel

@{
    ViewBag.Title = Model.InventoryItem.ItemId > 0 ? EPMS.Web.Resources.Inventory.InventoryItem.UpdateTitle : EPMS.Web.Resources.Inventory.InventoryItem.CreateTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.MessageVM = TempData["message"];
    var direction = EPMS.Web.Resources.Shared.Common.TextDirection;
}

<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/Inventory/InventoryItem/Index">
                @EPMS.Web.Resources.Inventory.InventoryItem.Label
            </a>
        </li>
        <li class="current">
            <a href="">
                @ViewBag.Title
            </a>
        </li>
    </ul>
</div>

<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@ViewBag.Title</small></h2>
</header>

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
@using (Html.BeginForm("Create", "InventoryItem", FormMethod.Post, new { @id = "ItemForm", @class = "form-horizontal", role = "form" }))
{
    <div class="container-fluid">

        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.InventoryItem.ItemId)
        @Html.HiddenFor(m => m.InventoryItem.RecCreatedBy)
        @Html.HiddenFor(m => m.InventoryItem.RecCreatedDt)
        @Html.HiddenFor(m => m.InventoryItem.DepartmentId, new {@id = "departmentId"})
        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.ItemCode</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.ItemCode, new {id = "ItemCode", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.InventoryItem.ItemCode)
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.ItemNameEn</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.ItemNameEn, new {id = "ItemNameEn", @class = "tbdisable toBeRequired"})
                    @Html.ValidationMessageFor(m => m.InventoryItem.ItemNameEn, "" ,new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.ItemNameAr</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.ItemNameAr, new {id = "ItemNameAr", @class = "tbdisable toBeRequired"})
                    @Html.ValidationMessageFor(m => m.InventoryItem.ItemNameAr, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div id="CKEditorDescp">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.DescriptionEn</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.InventoryItem.ItemDescriptionEn, new {id = "ItemDescriptionEn", @class = "tbdisable toBeRequired"})
                        @Html.ValidationMessageFor(m => m.InventoryItem.ItemDescriptionEn, "", new { @class = "required" })
                    </div>
                </div>
            </div>

            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.DescriptionAr</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.InventoryItem.ItemDescriptionAr, new {id = "ItemDescriptionAr", @class = "tbdisable toBeRequired" })
                        @Html.ValidationMessageFor(m => m.InventoryItem.ItemDescriptionAr, "", new { @class = "required" })
                    </div>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.DescForQuotationEn</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.DescriptionForQuotationEn, new {id = "DescriptionForQuotationEn", @class = "tbdisable toBeRequired"})
                    @Html.ValidationMessageFor(m => m.InventoryItem.DescriptionForQuotationEn, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.DescForQuotationAr</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.DescriptionForQuotationAr, new {id = "DescriptionForQuotationAr", @class = "tbdisable toBeRequired"})
                    @Html.ValidationMessageFor(m => m.InventoryItem.DescriptionForQuotationAr, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.AveragePrice</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.AveragePrice, new {id = "AveragePrice", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.InventoryItem.AveragePrice, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.AverageCost</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.AverageCost, new {id = "AverageCost", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.InventoryItem.AverageCost, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.AveragePackagePrice</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.AveragePackagePrice, new {id = "AveragePackagePrice", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.InventoryItem.AveragePackagePrice, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.QuantityInPackage</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.QuantityInPackage, new {id = "QuantityInPackage", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.InventoryItem.QuantityInPackage, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.QuantityInHand</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.QuantityInHand, new {id = "QuantityInHand", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.InventoryItem.QuantityInHand, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.QuantitySold</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.QuantitySold, new {id = "QuantitySold", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.InventoryItem.QuantitySold, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div id="CKEditorDescp">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.HazardousEn</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.InventoryItem.HazardousEn, new {id = "HazardousEn", @class = "tbdisable toBeRequired" })
                        @Html.ValidationMessageFor(m => m.InventoryItem.HazardousEn, "", new { @class = "required" })
                    </div>
                </div>
            </div>

            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.HazardousAr</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.InventoryItem.HazardousAr, new {id = "HazardousAr", @class = "tbdisable toBeRequired" })
                        @Html.ValidationMessageFor(m => m.InventoryItem.HazardousAr, "", new { @class = "required" })
                    </div>
                </div>
            </div>

            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.UsageEn</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.InventoryItem.UsageEn, new {id = "UsageEn", @class = "tbdisable toBeRequired" })
                        @Html.ValidationMessageFor(m => m.InventoryItem.UsageEn, "", new { @class = "required" })
                    </div>
                </div>
            </div>

            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.UsageAr</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.InventoryItem.UsageAr, new {id = "UsageAr", @class = "tbdisable toBeRequired" })
                        @Html.ValidationMessageFor(m => m.InventoryItem.UsageAr, "", new { @class = "required" })
                    </div>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.Inventory.InventoryItem.ReorderPoint</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.InventoryItem.ReorderLevel, new {id = "ReorderLevel", @class = "tbdisable toBeRequired", @ViewBag.Disabled })
                    @Html.ValidationMessageFor(m => m.InventoryItem.ReorderLevel, "", new { @class = "required" })
                </div>
            </div>
        </div>
        
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="inputFielda">Department Information</label>
            </div>
            <div class="span9">

                @Html.TextBoxFor(m => m.InventoryItem.DepartmentPath, new {id = "DepartmentPath", @readonly = "true" })
                <div class="control-group row-fluid">
                    <div class="span12 span-inset">
                        <a href="#modal-dialog" role="button" class="btn treeSelectorButton" data-toggle="modal">Tree Selector</a>

                    </div>
                </div>
            </div>
        </div>
        

        @if (Model.InventoryItem.ItemId > 0)
        {
            <span id="itemVariationTable">
                <div class="alert alert-info alert-block">
                    <i class="icon-alert icon-alert-info"></i>
                    <strong>Item Variations</strong><a href="/Inventory/ItemVariation/Create?inventoryItemId=@Model.InventoryItem.ItemId">Create New Item Variation</a>
                </div>

                <!--Sortable Responsive Table begin-->
                <div class="row-fluid">
                    <div class="span12">
                        <table class="table table-striped table-responsive" id="tableSortableVariations">
                            <thead>
                                <tr>
                                    <th> Serial</th>
                                    <th>Barcode</th>
                                    <th>(SKU)Code - SKU Description</th>
                                    <th>Description</th>
                                    <th>Size</th>
                                    <th>Condition</th>
                                    <th>Color</th>
                                    <th>Unit Price</th>
                                    <th>Avrage Cost</th>
                                    <th>Package Price</th>
                                    <th>On-hand Quantity</th>
                                    <th>Quantity Sold</th>
                                    <th>Quantity Used in Manufacturing</th>


                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.InventoryItem.ItemVariations != null)
                                {
                                    var serial = 0;
                                    foreach (var item in Model.InventoryItem.ItemVariations.ToList())
                                    {
                                        serial = serial + 1;
                                        <tr class="gradeX">
                                            <td>@serial</td>
                                            <td>@item.ItemBarcode</td>
                                            @if (direction == "ltr")
                                            {
                                                <td><a href="~/Inventory/ItemVariation/Create/@item.ItemVariationId?inventoryItemId=@item.InventoryItemId">@item.SKUCode - @item.SKUDescriptionEn</a></td>
                                            }
                                            else
                                            {
                                                <td><a href="~/Inventory/ItemVariation/Create/@item.ItemVariationId?inventoryItemId=@item.InventoryItemId">@item.SKUCode - @item.SKUDescriptionAr</a></td>
                                            }
                                            @if (direction == "ltr")
                                            {
                                                <td>@Html.Raw(item.ItemDescForIndexEn)</td>
                                            }
                                            else
                                            {
                                                <td>@Html.Raw(item.ItemDescForIndexAr)</td>
                                            }
                                            @if (direction == "ltr")
                                            {
                                                <td>@item.SizeNameEn</td>
                                                <td>@item.StatusNameEn</td>
                                                <td>@item.ColorNameEn</td>
                                            }
                                            else
                                            {
                                                <td>@item.ColorNameAr</td>
                                                <td>@item.StatusNameAr</td>
                                                <td>@item.ColorNameAr</td>
                                            }
                                            <td>@item.UnitPrice</td>
                                            @if (direction == "ltr")
                                            {
                                                <td>@item.AverageCost</td>
                                            }
                                            else
                                            {
                                                <td>@item.AverageCost</td>
                                            }
                                            <td>@item.PackagePrice</td>
                                            <td>@item.QuantityInHand</td>
                                            <td>@item.QuantitySold</td>
                                            <td>@item.QuantityInManufacturing</td>
                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                    </div>
                </div>
                <!--Sortable Responsive Table end-->
            </span>
        }

        <div class="control-group row-fluid">
            <div class="span3">
                <div class="span3 span-inset">
                    <button id="edit" class="btn">@EPMS.Web.Resources.Inventory.Vendor.EditButton</button>
                    <button id="savebtn" class="btn" type="submit">@EPMS.Web.Resources.Inventory.Vendor.SaveButton</button>
                </div>
                <div class="span3 span-inset">
                    <button id="cancel" class="btn" onclick="window.location.href = '@(ConfigurationManager.AppSettings["SiteURL"])/Inventory/InventoryItem/Index'" type="reset">@EPMS.Web.Resources.HR.JobTitle.CancelButton</button>
                </div>
            </div>
        </div>

    </div>
}

@section popups
{
    <div id="modal-dialog" class="modal hide fade treeSelector">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Department</h3>
    </div>
    <div class="modal-body ">
        <form class="form-horizontal">
            <div class="sidebarMenuHolder">
                <div class="JStree">
                    <div class="Jstree_shadow_top"></div>
                    <div id="jstree"></div>
                    <div class="Jstree_shadow_bottom"></div>
                </div>
            </div>
        </form>
    </div>

    <div class="modal-footer">
        <a href="javascript:;" class="btn btn-primary" id="selectDepartment">@EPMS.Web.Resources.RFI.RFI.Select</a>
        <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.Web.Resources.RFI.RFI.Cancel</a>
    </div>
</div>
}


<script src="~/RichTextEditor/ckeditor.js"></script>
<script>
    var editor;
    var textTillParent;
    var dir = '@direction';
    var siteUrl = $("#siteURL").val();
    var itemId = parseInt($('#InventoryItem_ItemId').val());
    var siteUrl = $("#siteURL").val();
    $(document).ready(function () {
        $('#tableSortableVariations').dataTable({
            "sPaginationType": "bootstrap",
            "fnInitComplete": function() {
                $(".dataTables_wrapper select").select2({
                    dropdownCssClass: 'noSearch'
                });
            }
        });
        if (itemId == 0 || itemId == "") {
            //Auto Generated Number Calculation
            var url = "/Inventory/InventoryItem/GetLastItemCode";
            $.ajax({
                url: url,
                type: "POST",
                dataType: "json",
                success: function(data) {
                    if (data == null) {
                        $('#ItemCode').val(10001000);
                    } else {
                        $('#ItemCode').val(++data);
                    }
                },
                error: function() {
                    alert("An error has occured!!!");
                }
            });
            $('.' + 'tbdisable' + ':input').attr('disabled', false);
            $("#savebtn").show();
            $("#cancel").show();
            $("#edit").hide();
            $('.treeSelectorButton').show();
            showCkEditors();
        } else {
            $('.' + 'tbdisable' + ':input').attr('disabled', true);
            $("#savebtn").hide();
            $("#cancel").hide();
            $("#edit").show();
            $('.treeSelectorButton').hide();
        }

        //Departments Tree
        var treeInitialData;
        if (dir == "ltr") {
            treeInitialData = [
                {
                    "data": {
                        "title": "Departments",
                        "attr": { "href": "#", "onclick": "jsTreeClick(event)" }
                    },
                    "attr": { "id": "parentNode" },
                }
            ];
        } else {
            treeInitialData = [
                {
                    "data": {
                        "title": "الإدارات",
                        "attr": { "href": "#", "onclick": "jsTreeClick(event)" }
                    },
                    "attr": { "id": "parentNode" },
                }
            ];
        }
        $("#jstree").jstree({
            "json_data": {
                "data": treeInitialData
            },
            "plugins": ["themes", "json_data", "ui"],
            "ui": {
                "initially_select": ["parentNode"]
            },
            "core": {
                "initially_open": ["parentNode"]
            }
        }).bind("select_node.jstree", function(event, data) {
            //`data.rslt.obj` is the jquery extended node that was clicked
            if (data.inst._get_parent(data.rslt.obj) != -1) {
                var parents = [];
                textTillParent = "";
                data.rslt.obj.parents("li").each(function() {
                    parents.push({ id: $(this).attr("id"), description: $(this).children("a").text() });
                });
                $.each(parents, function(key, value) {
                    textTillParent = value.description + " >" + textTillParent;
                });
                textTillParent = textTillParent + $(".jstree-clicked").text();
            }
        });
        var requestUrl = "/Inventory/InventoryItem/GetAllDepartments";
        populateTree(0, "jstree", requestUrl);

        $("#selectDepartment").on("click", function () {
            debugger;
            $('#DepartmentPath').val("Selected: " + textTillParent);
            $('#departmentId').val($('#jstree').jstree('get_selected').attr('id'));
            $('#modal-dialog').modal('toggle');
            return true;
        });

    });

    //Edit CLick Function
    $("#edit").click(function(event) {
        $('.' + 'tbdisable' + ':input').attr('disabled', false);
        $("#savebtn").show();
        $("#cancel").show();
        $("#edit").hide();
        $("#itemVariationTable").hide();
        $("#CKEditorDescp").show();
        showCkEditors();
        $('.treeSelectorButton').show();
        event.preventDefault();
    });

    //Show CK Editors to Fields
    function showCkEditors() {
        $("#CKEditorDescp").show();
        CKEDITOR.replace('ItemDescriptionEn', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('ItemDescriptionAr', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('HazardousEn', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('HazardousAr', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('UsageEn', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('UsageAr', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
    }

    function jsTreeClick(event) {
        return true;
    }

</script>