@using System.Configuration
@model EPMS.WebModels.ViewModels.ItemVariation.ItemVariationViewModel

@{
    ViewBag.Title = Model.ItemVariation.ItemVariationId > 0 ? EPMS.WebModels.Resources.Inventory.ItemVariation.UpdatePageTitle : EPMS.WebModels.Resources.Inventory.ItemVariation.CreatePageTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.MessageVM = TempData["message"];
    var direction = EPMS.WebModels.Resources.Shared.Common.TextDirection;
    string[] userPermissionsSet = (string[])HttpContext.Current.Session["UserPermissionSet"];
}

<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/Inventory/InventoryItem/Index">
                @EPMS.WebModels.Resources.Inventory.InventoryItem.Label
            </a>
        </li>
        <li>
            <a href="~/Inventory/InventoryItem/Create/@Model.ItemVariation.InventoryItemId">
                @EPMS.WebModels.Resources.Inventory.InventoryItem.InventoryItemLabel
            </a>
        </li>
        <li class="current">
            <a href="">
                @ViewBag.Title
            </a>
        </li>
    </ul>
</div>

<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@ViewBag.Title</small></h2>
</header>

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
@using (Html.BeginForm("Create", "ItemVariation", FormMethod.Post, new { @id = "VariationForm", @class = "form-horizontal", role = "form" }))
{
    <div class="container-fluid">

        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.ItemVariation.Sizes)
        @Html.HiddenFor(m => m.ItemVariation.InventoryItemId)
        @Html.HiddenFor(m => m.ItemVariation.ItemVariationId)
        @Html.HiddenFor(m => m.ItemVariation.RecCreatedBy)
        @Html.HiddenFor(m => m.ItemVariation.RecCreatedDt)
        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.Barcode</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.ItemBarcode, new { @id = "ItemBarcode", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.ItemBarcode)
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.SKUCode</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.SKUCode, new { @id = "SKUCode", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.SKUCode)
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.UnitCost</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.UnitCost, new { @id = "UnitCost", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.UnitCost, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.CostCalculation</label>
            </div>
            <div class="span9 span-inset disabled-switch">
                <div data-on-label="YES" data-off-label="NO" class="switch switch-small" data-on="success" data-off="danger">
                    @Html.CheckBoxFor(model => model.ItemVariation.CostCalculation, new { @id = "CostCalculation" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.UnitPrice</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.UnitPrice, new { @id = "UnitPrice", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.UnitPrice, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.AddToAveragePrice</label>
            </div>
            <div class="span9 span-inset disabled-switch">
                <div data-on-label="YES" data-off-label="NO" class="switch switch-small" data-on="success" data-off="danger">
                    @Html.CheckBoxFor(model => model.ItemVariation.PriceCalculation, new { @id = "PriceCalculation" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.QuantityInPackage</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.QuantityInPackage, new { @id = "QuantityInPackage", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.QuantityInPackage, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.PackagePrice</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.PackagePrice, new { @id = "PackagePrice", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.PackagePrice, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.DescriptionEn</label>
            </div>
            <div class="span9">
                <div class="controls">
                    <input type="text" id="descpE" readonly="true" />
                    <script>
                        var descpE = '@Html.Raw(Model.ItemVariation.DescriptionEn)';
                        var regex = /(<([^>]+)>)/ig;
                        var result = descpE.replace(regex, "");
                        $("#" + 'descpE').val(result);
                    </script>
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.DescriptionAr</label>
            </div>
            <div class="span9">
                <div class="controls">
                    <input type="text" id="descpA" readonly="true" />
                    <script>
                        var descpA = '@Html.Raw(Model.ItemVariation.DescriptionAr)';
                        var regex = /(<([^>]+)>)/ig;
                        var result = descpE.replace(regex, "");
                        $("#" + 'descpA').val(result);
                    </script>

                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryItem.DescForQuotationEn</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.DescriptionForQuotationEn, new { id = "DescriptionForQuotationEn", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.DescriptionForQuotationEn, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryItem.DescForQuotationAr</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.DescriptionForQuotationAr, new { id = "DescriptionForQuotationAr", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.DescriptionForQuotationAr, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.SKUDescEn</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.SKUDescriptionEn, new { @id = "SKUDescriptionEn", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.SKUDescriptionEn)
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.SKUDescAr</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.SKUDescriptionAr, new { @id = "SKUDescriptionAr", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.SKUDescriptionAr)
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.QtyInHand</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.QuantityInHand, new { @id = "QuantityInHand", @class = "tbdisable" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.QuantityInHand, "", new { @class = "required" })
                </div>
            </div>
        </div>

        @*<div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.QtySold</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextBoxFor(m => m.ItemVariation.TotalQuantityInHand, new { @id = "TotalQuantityInHand", @readonly = "true" })
                        @Html.ValidationMessageFor(m => m.ItemVariation.TotalQuantityInHand, "", new { @class = "required" })
                    </div>
                </div>
            </div>*@

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.QtySold</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.QuantitySold, new { @id = "QuantitySold", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.QuantitySold, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.ReorderPoint</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.ReorderPoint, new { @id = "ReorderPoint", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.ReorderPoint, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.QtyUsedInManufacturing</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.QuantityInManufacturing, new { @id = "QuantityInManufacturing", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.QuantityInManufacturing, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.Weight</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.Weight, new { @id = "Weight", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.Weight, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.Height</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.Height, new { @id = "Height", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.Height, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.Width</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.Width, new { @id = "Width", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.Width, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.Depth</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(m => m.ItemVariation.Depth, new { @id = "Depth", @class = "tbdisable toBeRequired" })
                    @Html.ValidationMessageFor(m => m.ItemVariation.Depth, "", new { @class = "required" })
                </div>
            </div>
        </div>

        <div id="CKEditorDescp">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.NotesEn</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.ItemVariation.NotesEn, new { @id = "NotesEn", @class = "tbdisable toBeRequired" })
                        @Html.ValidationMessageFor(m => m.ItemVariation.NotesEn, "", new { @class = "required" })
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.NotesAr</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.ItemVariation.NotesAr, new { @id = "NotesAr", @class = "tbdisable toBeRequired" })
                        @Html.ValidationMessageFor(m => m.ItemVariation.NotesAr, "", new { @class = "required" })
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.AdditionalInfoEn</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.ItemVariation.AdditionalInfoEn, new { @id = "AdditionalInfoEn", @class = "tbdisable toBeRequired" })
                        @Html.ValidationMessageFor(m => m.ItemVariation.AdditionalInfoEn, "", new { @class = "required" })
                    </div>
                </div>

            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.AdditionalInfoAr</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(m => m.ItemVariation.AdditionalInfoAr, new { @id = "AdditionalInfoAr", @class = "tbdisable toBeRequired" })
                        @Html.ValidationMessageFor(m => m.ItemVariation.AdditionalInfoAr, "", new { @class = "required" })
                    </div>
                </div>
            </div>
        </div>

        <div id="noCkEditor">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.NotesEn</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="notesE" class="tbdisable" />
                        <script>
                            var descpE = '@Html.Raw(Model.ItemVariation.NotesEn)';
                            var regex = /(<([^>]+)>)/ig;
                            var result = descpE.replace(regex, "");
                            $("#" + 'notesE').val(result);
                        </script>
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.NotesAr</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="notesA" class="tbdisable" />
                        <script>
                            var descpE = '@Html.Raw(Model.ItemVariation.NotesAr)';
                            var regex = /(<([^>]+)>)/ig;
                            var result = descpE.replace(regex, "");
                            $("#" + 'notesA').val(result);
                        </script>
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.AdditionalInfoEn</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="addInfoE" class="tbdisable" />
                        <script>
                            var descpE = '@Html.Raw(Model.ItemVariation.AdditionalInfoEn)';
                            var regex = /(<([^>]+)>)/ig;
                            var result = descpE.replace(regex, "");
                            $("#" + 'addInfoE').val(result);
                        </script>
                    </div>
                </div>

            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label">@EPMS.WebModels.Resources.Inventory.ItemVariation.AdditionalInfoAr</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="addInfoA" class="tbdisable" />
                        <script>
                            var descpE = '@Html.Raw(Model.ItemVariation.AdditionalInfoAr)';
                            var regex = /(<([^>]+)>)/ig;
                            var result = descpE.replace(regex, "");
                            $("#" + 'addInfoA').val(result);
                        </script>
                    </div>
                </div>
            </div>
        </div>
        <div class="alert alert-info alert-block">
            <i class="icon-alert icon-alert-info"></i>
            <strong>@EPMS.WebModels.Resources.Inventory.InventoryItem.Size</strong>
            @if (userPermissionsSet.Contains("CreateItemVariation"))
            {
            <a href="#sizeModule" data-toggle="modal" id="addNewSize">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewSize</a>
            }
        </div>
        <!--Sortable Responsive Table begin-->

        <div class="row-fluid">
            <div class="span12">
                <table class="table table-striped table-responsive tableSize" id="tableSortableVariationsSize">
                    <thead>
                        <tr>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Size</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Delete</th>
                        </tr>
                    </thead>
                    <tbody class="sizeTable">
                        @foreach (var item in Model.ItemVariation.Sizes.ToList())
                        {
                        <tr class="gradeX sizeTableRow">
                            <input type="hidden" class="sizeIdHidden" value="@item.SizeId" />
                            @if (direction == "ltr")
                                {
                                <td>@item.SizeNameEn</td>
                                }
                                else
                                {
                                <td>@item.SizeNameAr</td>
                                }

                            <td>
                                <i class="icon-photon minus deleteSize"></i>
                            </td>

                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!--Sortable Responsive Table end-->

        <div class="alert alert-info alert-block">
            <i class="icon-alert icon-alert-info"></i>
            <strong>@EPMS.WebModels.Resources.Inventory.InventoryItem.Warehouse</strong>
            @if (userPermissionsSet.Contains("CreateItemVariation"))
            {
            <a href="#wherehouseModule" data-toggle="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddWarehouse</a>
            }
        </div>

        <!--Sortable Responsive Table begin-->
        <div class="row-fluid">
            <div class="span12">
                <table class="table table-striped table-responsive tableWarehouse" id="tableSortableVariationsWherehouse">
                    <thead>
                        <tr>
                            <td style='display:none'></td>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Serial</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryWarehouse.WarehouseNumber</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.QuantityInWarehouse</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.PlaceInWarehouse</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Delete</th>
                        </tr>
                    </thead>
                    <tbody class="warehouseTable" id="warehouseDetails">
                        @if (Model.ItemVariation.ItemWarehouses.Any())
                        {

                            var serial = 0;
                            for (int i = 0; i < Model.ItemVariation.ItemWarehouses.Count(); i++)
                            {
                                serial = serial + 1;

                        <tr class="gradeX" data-id="@i">
                            @Html.HiddenFor(model => model.ItemVariation.ItemWarehouses[i].WarehouseId, new { @class = "auto-resize", @hidden = "true", @id = "warehouseId" })
                            @Html.HiddenFor(model => model.ItemVariation.ItemWarehouses[i].ItemVariationId, new { @class = "auto-resize", @hidden = "true", @id = "warehouseId" })
                            @Html.HiddenFor(model => model.ItemVariation.ItemWarehouses[i].WarehouseDetailId, new { @class = "auto-resize", @hidden = "true" })
                            <td style='display:none'><input name='ItemVariation.ItemWarehouses.Index' type='hidden' value='@i' /></td>
                            <td>
                                <label class="control-label serialNumber">@serial</label>
                            </td>
                            <td>@Html.DisplayFor(model => model.ItemVariation.ItemWarehouses[i].WarehouseNo, new { @class = "WarehouseNo" })</td>
                            <td>
                                @Html.HiddenFor(model => model.ItemVariation.ItemWarehouses[i].Quantity, new { @class = "Quantity" })
                                @Html.DisplayFor(model => model.ItemVariation.ItemWarehouses[i].Quantity, new { @class = "Quantity" })
                            </td>
                            <td>
                                @Html.HiddenFor(model => model.ItemVariation.ItemWarehouses[i].PlaceInWarehouse, new { @class = "PlaceInWarehouse" })
                                @Html.DisplayFor(model => model.ItemVariation.ItemWarehouses[i].PlaceInWarehouse, new { @class = "PlaceInWarehouse" })
                            </td>
                            <td><i class="icon-photon minus deleteWarehouse"></i></td>
                        </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!--Sortable Responsive Table end-->

        <div class="alert alert-info alert-block">
            <i class="icon-alert icon-alert-info"></i>
            <strong>@EPMS.WebModels.Resources.Inventory.InventoryItem.Manufacturer</strong>
            @if (userPermissionsSet.Contains("CreateItemVariation"))
            {
            <a href="#manufacturModule" data-toggle="modal" id="addNewManufacturer">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddManufacturer</a>
            }
        </div>
        <!--Sortable Responsive Table begin-->

        <div class="row-fluid">
            <div class="span12">
                <table class="table table-striped table-responsive tableManufacturer" id="tableSortableVariationsManufacturer">
                    <thead>
                        <tr>
                            <td style='display:none'></td>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Serial</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Manufacturer</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Price</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Quantity</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Delete</th>

                        </tr>
                    </thead>
                    <tbody class="manufacturerTable" id="manufacturerDetails">
                        @if (Model.ItemVariation.ItemManufacturers.Any())
                        {

                            var serial = 0;
                            for (int i = 0; i < Model.ItemVariation.ItemManufacturers.Count(); i++)
                            {
                                serial = serial + 1;

                        <tr class="gradeX" data-id="@i">
                            @Html.HiddenFor(model => model.ItemVariation.ItemManufacturers[i].ManufacturerId, new { @class = "auto-resize idsofMan", @hidden = "true" })
                            @Html.HiddenFor(model => model.ItemVariation.ItemManufacturers[i].ItemVariationId, new { @class = "auto-resize", @hidden = "true", @id = "manufacturerId" })
                            <td style='display:none'><input name='ItemVariation.ItemManufacturers.Index' type='hidden' value='@i' /></td>
                            <td>
                                <label class="control-label">@serial</label>
                            </td>
                            <td>
                                @if (direction == "ltr")
                                        {
                                        @Html.DisplayFor(model => model.ItemVariation.ItemManufacturers[i].ManufacturerNameEn, new { @class = "auto-resize Price" })
                                        }
                                        else
                                        {
                                        @Html.DisplayFor(model => model.ItemVariation.ItemManufacturers[i].ManufacturerNameAr, new { @class = "auto-resize Price" })
                                        }
                            </td>
                            <td>
                                @Html.HiddenFor(model => model.ItemVariation.ItemManufacturers[i].Price, new { @class = "auto-resize Price" })
                                @Html.DisplayFor(model => model.ItemVariation.ItemManufacturers[i].Price, new { @class = "auto-resize Price" })
                            </td>
                            <td>
                                @Html.HiddenFor(model => model.ItemVariation.ItemManufacturers[i].Quantity, new { @class = "auto-resize Quantity" })
                                @Html.DisplayFor(model => model.ItemVariation.ItemManufacturers[i].Quantity, new { @class = "auto-resize Quantity" })
                            </td>
                            <td><i class="icon-photon minus deleteManufacturer"></i></td>
                        </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!--Sortable Responsive Table end-->

        <div class="alert alert-info alert-block">
            <i class="icon-alert icon-alert-info"></i>
            <strong>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemStatus</strong>
            @if (userPermissionsSet.Contains("CreateItemVariation"))
            {
            <a href="#itemStatusModule" data-toggle="modal" id="addNewStatus">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewStatus</a>
            }

        </div>
        <!--Sortable Responsive Table begin-->

        <div class="row-fluid">
            <div class="span12">
                <table class="table table-striped table-responsive tableStatus" id="tableSortableItemStatus">
                    <thead>
                        <tr>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Status</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Delete</th>
                        </tr>
                    </thead>
                    <tbody class="statusTable">
                        @foreach (var item in Model.ItemVariation.Statuses.ToList())
                        {
                        <tr class="gradeX statusTableRow">
                            <input type="hidden" class="statusIdHidden" value="@item.StatusId" />
                            @if (direction == "ltr")
                                {
                                <td>@item.StatusNameEn</td>
                                }
                                else
                                {
                                <td>@item.StatusNameAr</td>
                                }
                            <td>
                                <i class="icon-photon minus deleteStatus"></i>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!--Sortable Responsive Table end-->

        <div class="alert alert-info alert-block">
            <i class="icon-alert icon-alert-info"></i>
            <strong>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemColor</strong>
            @if (userPermissionsSet.Contains("CreateItemVariation"))
            {
            <a href="#itemColorModule" data-toggle="modal" id="addNewColor">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewColor</a>
            }

        </div>
        <!--Sortable Responsive Table begin-->

        <div class="row-fluid">
            <div class="span12">
                <table class="table table-striped table-responsive tableColor" id="tableSortableItemColor">
                    <thead>
                        <tr>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Color</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Delete</th>
                        </tr>
                    </thead>
                    <tbody class="colorTable">
                        @foreach (var item in Model.ItemVariation.Colors.ToList())
                        {
                        <tr class="gradeX">
                            @if (direction == "ltr")
                                {
                                <td>@item.ColorNameEn</td>
                                }
                                else
                                {
                                <td>@item.ColorNameAr</td>
                                }
                            <td>
                                <i class="icon-photon minus deleteColor"></i>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!--Sortable Responsive Table end-->

        <div class="alert alert-info alert-block">
            <i class="icon-alert icon-alert-info"></i>
            <strong>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemImages</strong>
            @if (userPermissionsSet.Contains("CreateItemVariation"))
            {
            <a href="#ItemImagerModule" data-toggle="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewImage</a>
            }

        </div>
        <!--Sortable Responsive Table begin-->

        <div class="row-fluid">
            <div class="span12">
                <table class="table table-striped table-responsive tableImage" id="tableSortableVariationsImg">
                    <thead>
                        <tr>
                            <th style='display:none'></th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Serial</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Image</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Order</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Show</th>
                            <th>@EPMS.WebModels.Resources.Inventory.InventoryItem.Delete</th>
                        </tr>
                    </thead>
                    <tbody id="imageDetails">
                        @if (Model.ItemVariation.ItemImages.Any())
                        {

                            var serial = 0;
                            for (int i = 0; i < Model.ItemVariation.ItemImages.Count(); i++)
                            {

                                serial = serial + 1;

                        <tr data-id="@i">
                            @Html.HiddenFor(model => model.ItemVariation.ItemImages[i].ItemImagePath)
                            @Html.HiddenFor(model => model.ItemVariation.ItemImages[i].ImageId)
                            @Html.HiddenFor(model => model.ItemVariation.ItemImages[i].ItemVariationId)
                            <td style='display:none'><input name='ItemVariation.ItemImages.Index' type='hidden' value='@i' /></td>
                            <td>
                                <label class="control-label serialNumber">@serial</label>
                            </td>
                            <td>
                                <img class="itemImg" src='/Images/ItemImage/@Url.Content(Model.ItemVariation.ItemImages[i].ItemImagePath)' alt="user" />
                            </td>
                            <td>
                                <div class="span2">
                                    <div class="controls">
                                        @Html.TextBoxFor(model => model.ItemVariation.ItemImages[i].ImageOrder, new { @class = "auto-resize ImageOrder" })
                                    </div>
                                </div>
                            </td>
                            <td>
                                @Html.CheckBoxFor(model => model.ItemVariation.ItemImages[i].ShowImage)
                                Show
                            </td>
                            <td><i class="icon-photon minus deleteImage"></i></td>
                        </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!--Sortable Responsive Table end-->
        <input type="hidden" id="SizeArrayList" value="" name="SizeArrayList" /> @*This is for posting*@
        <input type="hidden" id="ManufacturerArrayList" value="" name="ManufacturerArrayList" /> @*This is for posting*@
        <input type="hidden" id="StatusArrayList" value="" name="StatusArrayList" /> @*This is for posting*@
        <input type="hidden" id="ColorArrayList" value="" name="ColorArrayList" /> @*This is for posting*@
        @if (userPermissionsSet.Contains("CreateItemVariation"))
        {
        <div class="control-group row-fluid">
            <div class="span3">
                <div class="span3 span-inset">
                    <button id="edit" class="btn">@EPMS.WebModels.Resources.Inventory.Vendor.EditButton</button>
                    <button id="savebtn" class="btn" type="submit">@EPMS.WebModels.Resources.Inventory.Vendor.SaveButton</button>
                </div>
                <div class="span3 span-inset">
                    <button id="cancel" class="btn" onclick="window.location.href = '@(ConfigurationManager.AppSettings["SiteURL"])/Inventory/InventoryItem/Index'" type="reset">@EPMS.WebModels.Resources.HR.JobTitle.CancelButton</button>
                </div>
            </div>
        </div>
        }


    </div>

}


@section popups
{
    <!--Size Module-->
    <div id="sizeModule" class="modal hide fade">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemSize</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemSize</label>
                    </div>
                    <div class="span4">
                        <div class="controls">
                            @Html.DropDownListFor(x => x.ItemVariation.Sizes, new SelectList(Model.SizesForDdl, "SizeId", "SizeNameEn"), "Select Size", new { @class = "select2me sizeDdl toClear", id = "sizeId" })
                        </div>
                    </div>

                </div>
                <div class="control-group row-fluid">
                    <div class="span12">
                        <label class="control-label txt-center" id="openSize">
                            <a data-toggle="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.CreateNewSize</a>
                        </label>
                    </div>

                </div>
            </form>
        </div>
        <div class="modal-footer">
            <a href="javascript:;" class="btn btn-primary addSizeToList">@EPMS.WebModels.Resources.Inventory.InventoryItem.SaveNewSize</a>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>
    <!--Size Module ends-->
    <!--Add New Size to DB-->
    <div id="sizeAddModule" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewItemSize</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFieldSizea">@EPMS.WebModels.Resources.Inventory.InventoryItem.Size </label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(m => m.Size.SizeNameEn, new { id = "SizeNameEn", @class = "toClear" })
                            @Html.ValidationMessageFor(m => m.Size.SizeNameEn, "", new { @class = "required" })
                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFieldaSize">@EPMS.WebModels.Resources.Inventory.InventoryItem.SizeInArabic</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(m => m.Size.SizeNameAr, new { id = "SizeNameAr", @class = "toClear" })
                            @Html.ValidationMessageFor(m => m.Size.SizeNameAr, "", new { @class = "required" })
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            @*<a href="javascript:;" class="btn btn-primary" id="addSizeToDb">Add New Size</a>*@
            <button class="btn btn-primary" type="submit" id="addSizeToDb">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewSize</button>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>
    <!--Add New Size to DB Ends-->
    <!--Warehouse Module Starts-->
    <div id="wherehouseModule" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.Warehouse</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryItem.Warehouse</label>
                    </div>
                    <div class="span4">
                        <div class="controls">
                            @Html.DropDownListFor(x => x.ItemVariation.ItemWarehouses, new SelectList(Model.WarehousesForDdl, "WarehouseId", "WarehouseNumber"), "Select Warehouse", new { @class = "select2me toClear", id = "warehouseDropdown" })
                        </div>
                    </div>

                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFielda">@EPMS.WebModels.Resources.Inventory.InventoryItem.LocationTreeSelector</label>
                    </div>
                    <div class="span9">
                        <label class="control-label warehouseTree"><a data-toggle="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.WarehouseTreeSelector</a></label>
                    </div>
                </div>

                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryItem.Location </label>
                    </div>
                    <div class="span9">
                        <label class="control-label " id="textTillParent"></label>
                    </div>
                </div>

                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFieldaOrder">@EPMS.WebModels.Resources.Inventory.InventoryItem.Quantity</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            <input id="inputFieldQuantity" type="text" name="inputField" class="quantity toClear">
                        </div>
                    </div>
                </div>

                <div class="control-group row-fluid">
                    <div class="span12">
                        <label class="control-label txt-center" for="inputFielda"><a href="#">@EPMS.WebModels.Resources.Inventory.InventoryItem.CreateNewWarehouse</a></label>
                    </div>

                </div>
            </form>
        </div>
        <div class="modal-footer">
            <a href="javascript:;" class="btn btn-primary addWarehouseFromPopup">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewWarehouse</a>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>
    <!--Warehouse Module Ends-->
    <!--Warehouse Tree Starts-->
    <div id="warehouseTreeSelector" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.Warehouse</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="sidebarMenuHolder">
                    <div class="JStree">
                        <div class="Jstree_shadow_top"></div>
                        <div id="jstree"></div>
                        <div class="Jstree_shadow_bottom"></div>
                    </div>
                </div>
            </form>
        </div>

        <div class="modal-footer">
            <a href="javascript:;" class="btn btn-primary" id="selectNode">@EPMS.WebModels.Resources.Inventory.InventoryItem.Select</a>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>
    <!--Warehouse Tree Ends-->
    <!--Manufacturer Module Starts-->
    <div id="manufacturModule" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.Manufacturer</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="jobTitle">@EPMS.WebModels.Resources.Inventory.InventoryItem.Manufacturer</label>
                    </div>
                    <div class="span4">
                        <div class="controls">
                            <div class="controls">
                                @Html.DropDownListFor(x => x.ItemVariation.ItemManufacturers, new SelectList(Model.VendorsForDdl, "VendorId", "VendorNameEn"), "Select Manufacturer", new { @class = "select2me manufacturerDdl toClear", id = "manuId" })
                            </div>
                        </div>
                    </div>

                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="manufacturerPriceLable">@EPMS.WebModels.Resources.Inventory.InventoryItem.Price</label>
                    </div>
                    <div class="span5">
                        <div class="controls">
                            <input id="manufacturerPriceLable" type="text" name="inputField" class="toClear">
                        </div>
                    </div>

                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="manufacturerQuantityLable">@EPMS.WebModels.Resources.Inventory.InventoryItem.Quantity</label>
                    </div>
                    <div class="span5">
                        <div class="controls">
                            <input id="manufacturerQuantityLable" type="text" name="inputField" class="toClear">
                        </div>
                    </div>

                </div>
                <div class="control-group row-fluid">
                    <div class="span12">
                        @*<button class="btn btn-primary" id="openManufacturer">Create New Manufacturer</button>*@
                        <label class="control-label txt-center" id="openManufacturer"><a data-toggle="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.CreateNewManufacturer</a></label>
                    </div>

                </div>
            </form>
        </div>
        <div class="modal-footer">
            <a href="javascript:;" class="btn btn-primary addManufacturerToList">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewManufacturer</a>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>
    <!--Manufacturer Module Ends-->
    <!--Add Manufacturer to DB-->
    <div id="manufacturModuleAdd" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.Manufacturer</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFielda">@EPMS.WebModels.Resources.Inventory.InventoryItem.ManufacturerName </label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(m => m.Manufacturer.ManufacturerNameEn, new { id = "ManufacturerNameEn", @class = "toClear" })
                            @Html.ValidationMessageFor(m => m.Manufacturer.ManufacturerNameEn, "", new { @class = "required" })
                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFielda">@EPMS.WebModels.Resources.Inventory.InventoryItem.ManufacturerNameInArabic</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(m => m.Manufacturer.ManufacturerNameAr, new { id = "ManufacturerNameAr", @class = "toClear" })
                            @Html.ValidationMessageFor(m => m.Manufacturer.ManufacturerNameAr, "", new { @class = "required" })
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button class="btn btn-primary" type="submit" id="addManufacturerToDb">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewManufacturer</button>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>
    <!--Add Manufacturer to DB Ends-->
    <!--Item Status Module Starts-->
    <div id="itemStatusModule" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemStatus</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="jobTitle">@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemStatus</label>
                    </div>
                    <div class="span4">
                        <div class="controls">
                            <div class="controls">
                                @Html.DropDownListFor(x => x.ItemVariation.Statuses, new SelectList(Model.StatusesForDdl, "StatusId", "StatusNameEn"), "Select Status", new { @class = "select2me statusDdl toClear", id = "statusId" })
                            </div>
                        </div>
                    </div>

                </div>
                <div class="control-group row-fluid">
                    <div class="span12">
                        <label class="control-label txt-center" id="openStatus"><a data-toggle="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.CreateNewStatus</a></label>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <a href="javascript:;" class="btn btn-primary addStatusToList">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewStatus</a>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>
    <!--Item Status Module Ends-->
    <!--Add Status to DB-->
    <div id="itemStatusAddModule" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemStatusAddition</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFieldaStatus">@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemStatus </label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(m => m.Status.StatusNameEn, new { id = "StatusNameEn", @class = "toClear" })
                            @Html.ValidationMessageFor(m => m.Status.StatusNameEn, "", new { @class = "required" })
                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFieldStatusa">@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemStatusInArabic</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(m => m.Status.StatusNameAr, new { id = "StatusNameAr", @class = "toClear" })
                            @Html.ValidationMessageFor(m => m.Status.StatusNameAr, "", new { @class = "required" })
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <a class="btn btn-primary" id="addStatusToDb">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewItemStatus</a>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>
    <!--Add Status to DB Ends-->
    <!--Add New Color Starts-->
    <div id="itemColorModule" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemColor</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemColor</label>
                    </div>
                    <div class="span4">
                        <div class="controls">
                            <div class="controls">
                                @Html.DropDownListFor(x => x.ItemVariation.Colors, new SelectList(Model.ColorsForDdl, "ColorId", "ColorNameEn"), "Select Color", new { @class = "select2me colorDdl toClear", id = "colorId" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label">@EPMS.WebModels.Resources.Inventory.InventoryItem.Color</label>
                    </div>
                    <div class="span3">
                        <label class="control-label " id="colorStyle" style="color:#ee2c11;"></label>
                    </div>
                </div>

                <div class="control-group row-fluid">
                    <div class="span12">
                        <label class="control-label txt-center" id="openColor"><a data-toggle="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.CreateNewColor</a></label>
                    </div>

                </div>
            </form>
        </div>
        <div class="modal-footer">
            <a href="javascript:;" class="btn btn-primary addColorToList">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewColor</a>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>
    <!--Add New Color Ends-->
    <!--Add Color to DB Starts-->
    <div id="itemColorAddModule" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemColor</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFieldaColor">@EPMS.WebModels.Resources.Inventory.InventoryItem.Color</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(m => m.Color.ColorNameEn, new { id = "ColorNameEn", @class = "toClear" })
                            @Html.ValidationMessageFor(m => m.Color.ColorNameEn, "", new { @class = "required" })
                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFieldColora">@EPMS.WebModels.Resources.Inventory.InventoryItem.ColorInArabic</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            @Html.TextBoxFor(m => m.Color.ColorNameAr, new { id = "ColorNameAr", @class = "toClear" })
                            @Html.ValidationMessageFor(m => m.Color.ColorNameAr, "", new { @class = "required" })
                        </div>
                    </div>
                </div>
                <!--Color Picker begin-->
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="color">@EPMS.WebModels.Resources.Inventory.InventoryItem.ItemColor</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            <input type="text" id="color" name="color" value="#FFF8BE" />
                            @*@Html.TextBoxFor(m => m.Color.ColorCode, new { id = "color", @class = "", @value = "FFF8BE", name = "color" })*@
                            <div id="colorpicker"></div>
                        </div>
                    </div>
                </div>
                <!--Color Picker end-->
            </form>
        </div>
        <div class="modal-footer">
            <a class="btn btn-primary" id="addColorToDb">@EPMS.WebModels.Resources.Inventory.InventoryItem.SaveNewColor</a>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>
    </div>

    <!--Add Color to DB Ends-->
    <!--Add Item Image Starts-->
    <div id="ItemImagerModule" class="modal hide fade treeSelector">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>@EPMS.WebModels.Resources.Inventory.InventoryItem.AddItemImage</h3>
        </div>
        <div class="modal-body ">
            <form class="form-horizontal">
                <!--Drag And Drop Upload begin-->
                <div id="Drag_And_Drop_Upload  " class="control-group row-fluid">
                    <div class="span2">
                        <label class="control-label" for="inputField">
                            @EPMS.WebModels.Resources.Inventory.InventoryItem.ItemImage<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="file size shouldn't exceed 10MB"><i class="icon-photon info-circle"></i></a>
                        </label>
                    </div>
                    <div class="span10 row-fluid">
                        <div class="upload-boxes row-fluid">
                            <div class="span4" id="upload"></div>
                            <div class="span8" id="uploaded"></div>
                        </div>
                    </div>
                </div>
                <!--Drag And Drop Upload end-->
                <div class="control-group row-fluid">
                    <div class="span3">
                        <label class="control-label" for="inputFieldaOrder">@EPMS.WebModels.Resources.Inventory.InventoryItem.Order</label>
                    </div>
                    <div class="span9">
                        <div class="controls">
                            <input id="inputFieldaOrder" type="text" name="inputField" class="imageOrder toClear">
                        </div>
                    </div>
                </div>
                <div class="control-group row-fluid">
                    <div class="span1">
                        @Html.CheckBox("Show", new { @id = "iCheckBox", @class = "toClear", @style = "margin: 23px 0 0 5px" })
                    </div>
                    <div class="span9">
                        <div class="controls">
                            <label class="control-label" for="iCheckBox">@EPMS.WebModels.Resources.Inventory.InventoryItem.Show</label>
                        </div>
                    </div>
                </div>
                @*<div class="control-group row-fluid">
                        <div class="span12">
                            <label class="checkbox">
                                @Html.CheckBox("Show", new { @id = "iCheckBox", @class = "toClear" })
                                Show
                            </label>
                        </div>
                    </div>*@
            </form>
        </div>
        <div class="modal-footer">
            <a type="button" class="btn trImageDetails">@EPMS.WebModels.Resources.Inventory.InventoryItem.AddNewImage</a>
            <a href="javascript:;" class="btn" data-dismiss="modal">@EPMS.WebModels.Resources.Inventory.InventoryItem.Cancel</a>
        </div>

    </div>
    <!--Add Item Image Ends-->
}

<script src="~/RichTextEditor/ckeditor.js"></script>
<script>
    debugger
    var siteUrl = $("#siteURL").val();
    var textTillParent = "";
    var dir = '@direction';
    var itemsCount;
    var myTree;
    var itemVarId = parseInt($('#ItemVariation_ItemVariationId').val());
    var qtyInHand = '@Model.ItemVariation.QtyInHand';
    var colorList = '@Html.Raw(Json.Encode(Model.ColorsForDdl))';
    var parsedColor = JSON.parse(colorList);
    @*var sizeList = '@Html.Raw(Json.Encode(Model.SizesForDdl))';*@
    var parsedSize;
    var statusList = '@Html.Raw(Json.Encode(Model.StatusesForDdl))';
    var parsedStatus = JSON.parse(statusList);
    var manufacturerList = '@Html.Raw(Json.Encode(Model.VendorsForDdl))';
    var parsedManufacturer = JSON.parse(manufacturerList);
    var selectedNodeId;
    $(document).ready(function () {
        var isDetail;
        var val = '@userPermissionsSet.Contains("CreateItemVariation")';
        if (val == 'True') {
            isDetail = false;
        } else {
            isDetail = true;
        }
        if (isDetail == true) {
            //$("#edit-panel").hide();
            $(".disabled-switch").addClass("disableList");
        }
        var callback = function (value) {
            parsedSize = JSON.parse(value);
        }
        // get all colors
        getAllSizes(callback);
        if (itemVarId == 0 || itemVarId == "") {
            //Auto Generated Number Calculation
            var url1 = "/Inventory/ItemVariation/GetLastItemSKuCode";
            $.ajax({
                data: itemVarId,
                url: url1,
                type: "POST",
                dataType: "json",
                success: function (data) {
                    if (data[0] == null) {
                        $('#SKUCode').val(101101);
                        $('#ItemBarcode').val(100010001 + ' - ' + 101101);
                    } else {
                        $('#SKUCode').val(++data[0]);
                        $('#ItemBarcode').val(data[1] + ' - ' + data[0]);
                    }
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });
            $('.' + 'tbdisable' + ':input').attr('disabled', false);
            $("#savebtn").show();
            $("#cancel").show();
            $("#edit").hide();
            itemsCount = 0;
            showCkEditors();
            $('#noCkEditor').hide();
        } else {
            var url1 = "/Inventory/ItemVariation/GetLastItemSKuCode";
            $.ajax({
                data: itemVarId,
                url: url1,
                type: "POST",
                dataType: "json",
                success: function (data) {
                    if (data[0] == null) {
                        $('#SKUCode').val(101101);
                        $('#ItemBarcode').val(100010001 + ' - ' + 101101);
                    } else {
                        $('#SKUCode').val(++data[0]);
                        $('#ItemBarcode').val(data[1] + ' - ' + data[0]);
                    }
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });
            $('.' + 'tbdisable' + ':input').attr('disabled', true);
            $("#savebtn").hide();
            $("#cancel").hide();
            $("#edit").show();
            $('#CKEditorDescp').hide();
            itemsCount = parseInt('@Model.ItemVariation.ItemImages.Count');
        }
        $("#edit").click(function (event) {
            $('.' + 'tbdisable' + ':input').attr('disabled', false);
            if (qtyInHand == "True") {
                $('#QuantityInHand').attr('disabled', true);
            } else {
                $('#QuantityInHand').attr('disabled', false);
            }
            $("#savebtn").show();
            $("#cancel").show();
            $("#edit").hide();
            $(".deleteRow").show();
            event.preventDefault();
            $("#CKEditorDescp").show();
            $('#noCkEditor').hide();
            showCkEditors();
        });
        $('#tableSortableVariationsImg,#tableSortableItemStatus,#tableSortableVariationsManufacturer,#tableSortableVariationsWherehouse,#tableSortableVariationsSize,#tableSortableItemColor').dataTable({
            "sPaginationType": "bootstrap",
            "fnInitComplete": function () {
                $(".dataTables_wrapper select").select2({
                    dropdownCssClass: 'noSearch'
                });
            }
        });

        $('#colorpicker').farbtastic('#color');

        var imageRowNo = 0;
        $('#ItemImagerModule').on('show', function () {
            imageRowNo = $("#imageDetails").children("tr").length;
            if ($("#imageDetails").children("tr").children("td").html() == "No data available in table") {
                imageRowNo = imageRowNo - 1;
            }
        });

        var siteURL = $('#siteURL').val();
        var url = siteURL + "/Inventory/ItemVariation/UploadImage";
        var errors = "";
        var imageName;
        var imagePath;
        $('#upload').mfupload({
            type: 'jpg,png,tif,jpeg', // type: '', for all types
            maxsize: 10, //file size in MBs
            post_upload: url,
            folder: "./",
            ini_text: "@EPMS.WebModels.Resources.CP.Profile.UploadBox",
            over_text: "Drop Here",
            over_col: '#666666',
            over_bkcol: '#f0f0f0',

            init: function () {
                $("#uploaded").empty();
            },

            start: function (result) {
                $("#uploaded").append("<div id='FILE" + result.fileno + "' class='files'>" + result.filename + "<div class='progress progress-info progress-thin'><div class='bar' id='PRO" + result.fileno + "'></div></div></div>");
            },

            loaded: function (result) {
                $("#PRO" + result.fileno).remove();
                $("#FILE" + result.fileno).html("Uploaded: " + result.filename + " (" + result.size + ")");
                //Inserted a Hidden field in the Form for Uploaded Image Name
                imageName = "<input name='ItemVariation.ItemImages[" + imageRowNo + "].ItemImagePath' id='ItemVariation_ItemImages_" + imageRowNo + "__ItemImagePath' type='hidden' value=" + result.filename + ">";
                //$('#imageDetails').children("tr").append(imagename);
                imagePath = result.filename;
            },

            progress: function (result) {
                $("#PRO" + result.fileno).css("width", result.perc + "%");
            },

            error: function (error) {
                errors += error.filename + ": " + error.err_des + "\n";
            },

            completed: function () {
                if (errors != "") {
                    alert(errors);
                    errors = "";
                }
            }
        });
        $('.trImageDetails').on("click", function (event) {

            var index = $("#imageDetails").children("tr").length;
            if ($("#imageDetails").children("tr").children("td").html() == "No data available in table") {
                index = index - 1;
            }
            itemsCount = index + 1;
            var order = $('.imageOrder').val();
            var popupcb = $("#iCheckBox").is(':checked');

            var html = ' <tr class="gradeX" data-id=' + index + '>' +
                '<td style="display:none"><input name="ItemVariation.ItemImages.Index" type="hidden" value="' + index + '" /></td>' +
                '<input id="ItemVariation_ItemImages_' + index + '__ImageId" name = "ItemVariation.ItemImages[' + index + '].ImageId type="hidden" />' +
                '<input id="ItemVariation_ItemImages_' + index + '__ItemVariationId" name = "ItemVariation.ItemImages[' + index + '].ItemVariationId type="hidden" />' +
                //'<input type="hidden" id="ItemVariation_ItemImages_' + index + '__ItemImagePath" name = "ItemVariation.ItemImages[' + index + '].ItemImagePath" class = "auto-resize ItemImagePath">' +
                imageName +
                '<td>' + itemsCount +
                '</td>' +
                '</td>' +
                '<td>' +
                '<img class="itemImg" src="/Images/ItemImage/' + imagePath + '" alt="user" />' +
                '</td>' +
                '<td>' +
                '<div class="span2"><div class="controls"><input  rows="2" class="auto-resize" name = "ItemVariation.ItemImages[' + index + '].ImageOrder" class = "auto-resize ImageOrder" value = "' + order + '"></div></div>' +
                '</td>' +
                '<td>' +
                '<input type="checkbox" class="uniformCheckbox" name = "ItemVariation.ItemImages[' + index + '].ShowImage" id="ItemVariation_ItemImages_' + index + '__ShowImage"> Show' +
                '</td>' +
                '<td>' +
                '<i class="icon-photon minus deleteImage"  data-id=' + index + '></i>' +
                '</td>' +
                '</tr>';
            $('#imageDetails').append(html);
            if (popupcb) {
                $('#ItemVariation_ItemImages_' + index + '__ShowImage').prop('checked', true);
                $('#ItemVariation_ItemImages_' + index + '__ShowImage').val("true");
            }
            else {
                $('#ItemVariation_ItemImages_' + index + '__ShowImage').prop('checked', false);
                $('#ItemVariation_ItemImages_' + index + '__ShowImage').val("false");
            }
            $('.tableImage').dataTable().fnDestroy();
            $('.tableImage').dataTable({
                "sPaginationType": "bootstrap",
                "fnInitComplete": function () {
                    $(".dataTables_wrapper select").select2({
                        dropdownCssClass: 'noSearch'
                    });
                }
            });
            event.preventDefault();
            $('#ItemImagerModule').modal('hide');
        });

        //Delete Image from the List
        $('.deleteImage').live("click", function () {
            var row = $(this).parent().parent().get(0);
            var atable = $('#tableSortableVariationsImg').dataTable();
            var pos = atable.fnGetPosition(row);
            atable.fnDeleteRow(pos);
            //row.remove();
        });

        //Open Dialogue - Add Size to DB
        $("#openSize").click(function (event) {
            $('#sizeAddModule').modal('show');
            event.preventDefault();
            $.fn.modal.Constructor.prototype.enforceFocus = function () { };
        });
        //Add Size to DB
        $('#addSizeToDb').click(function (e) {
            var nameEn = $("#SizeNameEn").val();
            var nameAr = $("#SizeNameAr").val();
            if (nameEn == "" || nameAr == "") {
                $.pnotify({
                    title: 'error',
                    type: 'info',
                    text: 'Please select Size Name'
                });
            } else {
                e.preventDefault();
                var siteUrl = $('#siteURL').val();
                var url = siteUrl + "/Inventory/ItemVariation/SaveSize";
                var dataToPost = {
                    nameEn: nameEn,
                    nameAr: nameAr,
                };
                $.ajax({
                    url: url,
                    type: "POST",
                    dataType: "json",
                    data: dataToPost,
                    success: function (data) {
                        var sizeid = data.SizeId;
                        var snameEn = data.SizeNameEn;
                        var snameAr = data.SizeNameAr;
                        var htmlEn = '<option value=' + sizeid + '>' + snameEn + '</option>';
                        var htmlAr = '<option value=' + sizeid + '>' + snameAr + '</option>';
                        if ('@direction' == "ltr") {
                            $('.sizeDdl').append(htmlEn);
                        } else {
                            $('.sizeDdl').append(htmlAr);
                        }
                        $('#sizeAddModule').modal('hide');
                        $(".select2me").select2("destroy");
                        $('.select2me').select2({
                            placeholder: "Select",
                        });
                        var sizeToAdd = {
                            SizeId: data.SizeId,
                            SizeNameEn: data.SizeNameEn,
                            SizeNameAr: data.SizeNameAr,
                        };
                        parsedSize.push(sizeToAdd);
                    },
                    error: function () {
                        alert("An error has occured!!!");
                    }
                });
            }
        });

        //Open Dialogue - Add Manufacturer to DB
        $("#openManufacturer").click(function (event) {
            $('#manufacturModuleAdd').modal('show');
            event.preventDefault();
            $.fn.modal.Constructor.prototype.enforceFocus = function () { };
        });
        //Add Manufacturer to DB
        $('#addManufacturerToDb').click(function (e) {
            var nameEn = $("#ManufacturerNameEn").val();
            var nameAr = $("#ManufacturerNameAr").val();
            if (nameEn == "" || nameAr == "") {
                $.pnotify({
                    title: 'error',
                    type: 'info',
                    text: 'Please select Manufacturer Name'
                });
            } else {
                e.preventDefault();
                var siteUrl = $('#siteURL').val();
                var url = siteUrl + "/Inventory/ItemVariation/SaveManufacturer";

                var dataToPost = {
                    nameEn: nameEn,
                    nameAr: nameAr,
                };
                $.ajax({
                    url: url,
                    type: "POST",
                    dataType: "json",
                    data: dataToPost,
                    success: function (data) {
                        var manufacturerId = data.VendorId;
                        var snameEn = data.VendorNameEn;
                        var snameAr = data.VendorNameAr;
                        var htmlEn = '<option value=' + manufacturerId + '>' + snameEn + '</option>';
                        var htmlAr = '<option value=' + manufacturerId + '>' + snameAr + '</option>';
                        if ('@direction' == "ltr") {
                            $('.manufacturerDdl').append(htmlEn);
                        } else {
                            $('.manufacturerDdl').append(htmlAr);
                        }
                        $('#manufacturModuleAdd').modal('hide');
                        $(".select2me").select2("destroy");
                        $('.select2me').select2({
                            placeholder: "Select",
                        });
                        var manufacturerToAdd = {
                            ManufacturerId: data.VendorId,
                            ManufacturerNameEn: data.VendorNameEn,
                            ManufacturerNameAr: data.VendorNameAr,
                        };
                        parsedManufacturer.push(manufacturerToAdd);
                    },
                    error: function () {
                        alert("An error has occured!!!");
                    }
                });
            }
        });

        //Open Dialogue - Add Status to DB
        $("#openStatus").click(function (event) {
            $('#itemStatusAddModule').modal('show');
            event.preventDefault();
            $.fn.modal.Constructor.prototype.enforceFocus = function () { };
        });
        //Add Status to DB
        $('#addStatusToDb').click(function (e) {
            var nameEn = $("#StatusNameEn").val();
            var nameAr = $("#StatusNameAr").val();
            if (nameEn == "" || nameAr == "") {
                $.pnotify({
                    title: 'error',
                    type: 'info',
                    text: 'Please select Status Name'
                });
            } else {
                e.preventDefault();
                var siteUrl = $('#siteURL').val();
                var url = siteUrl + "/Inventory/ItemVariation/SaveStatus";
                var dataToPost = {
                    nameEn: nameEn,
                    nameAr: nameAr,
                };
                $.ajax({
                    url: url,
                    type: "POST",
                    dataType: "json",
                    data: dataToPost,
                    success: function (data) {
                        var statusId = data.StatusId;
                        var snameEn = data.StatusNameEn;
                        var snameAr = data.StatusNameAr;
                        var htmlEn = '<option value=' + statusId + '>' + snameEn + '</option>';
                        var htmlAr = '<option value=' + statusId + '>' + snameAr + '</option>';
                        if ('@direction' == "ltr") {
                            $('.statusDdl').append(htmlEn);
                        } else {
                            $('.statusDdl').append(htmlAr);
                        }
                        $('#itemStatusAddModule').modal('hide');
                        $(".select2me").select2("destroy");
                        $('.select2me').select2({
                            placeholder: "Select",
                        });
                        var statusToAdd = {
                            StatusId: data.StatusId,
                            StatusNameEn: data.StatusNameEn,
                            StatusNameAr: data.StatusNameAr,
                        };
                        parsedStatus.push(statusToAdd);
                    },
                    error: function () {
                        alert("An error has occured!!!");
                    }
                });
            }
        });

        //Open Dialogue - Add Color to DB
        $("#openColor").click(function (event) {
            $('#itemColorAddModule').modal('show');
            event.preventDefault();
            $.fn.modal.Constructor.prototype.enforceFocus = function () { };
        });
        //Add Color to DB
        $('#addColorToDb').click(function (e) {
            var nameEn = $("#ColorNameEn").val();
            var nameAr = $("#ColorNameAr").val();
            if (nameEn == "" || nameAr == "") {
                $.pnotify({
                    title: 'error',
                    type: 'info',
                    text: 'Please select Color Name'
                });
            } else {
                e.preventDefault();
                var siteUrl = $('#siteURL').val();
                var url = siteUrl + "/Inventory/ItemVariation/SaveColor";
                var code = $("#color").val();
                var dataToPost = {
                    nameEn: nameEn,
                    nameAr: nameAr,
                    code: code,
                };

                $.ajax({
                    url: url,
                    type: "POST",
                    dataType: "json",
                    data: dataToPost,
                    success: function (data) {
                        var colorId = data.ColorId;
                        var snameEn = data.ColorNameEn;
                        var snameAr = data.ColorNameAr;
                        var htmlEn = '<option value=' + colorId + '>' + snameEn + '</option>';
                        var htmlAr = '<option value=' + colorId + '>' + snameAr + '</option>';
                        if ('@direction' == "ltr") {
                            $('.colorDdl').append(htmlEn);
                        } else {
                            $('.colorDdl').append(htmlAr);
                        }
                        $('#itemColorAddModule').modal('hide');
                        $(".select2me").select2("destroy");
                        $('.select2me').select2({
                            placeholder: "Select",
                        });
                        var colorToAdd = {
                            ColorId: data.ColorId,
                            ColorNameAr: data.ColorNameAr,
                            ColorNameEn: data.ColorNameEn,
                            ColorCode: data.ColorCode,
                        };
                        parsedColor.push(colorToAdd);
                    },
                    error: function () {
                        alert("An error has occured!!!");
                    }
                });
            }
        });
        //Set Color and Text on Color DDL
        $(".colorDdl").on("change", function () {
            var colorId = $(this).val();
            if (colorId != "") {
                $("#ColorId").val(colorId);
                var colorCode;
                var cnameEn;
                var cnameAr;
                $.each(parsedColor, function (key, value) {
                    if (value.ColorId == colorId) {
                        colorCode = value.ColorCode;
                        cnameEn = value.ColorNameEn;
                        cnameAr = value.ColorNameAr;
                    }
                });
                $('#colorStyle').css("color", colorCode);
                $('#colorStyle').text(cnameEn);
            }
        });

        //Add Size from Dropdown to List
        $('.addSizeToList').on("click", function (event) {
            var sizeId = $('#sizeId').val();
            if (sizeId == "") {
                $.pnotify({
                    title: 'error',
                    type: 'info',
                    text: 'Please select Size'
                });
            } else {
                var sizeNameEn;
                var sizeNameAr;
                $.each(parsedSize, function (key, value) {
                    if (value.SizeId == sizeId) {
                        sizeNameEn = value.SizeNameEn;
                        sizeNameAr = value.SizeNameAr;
                    }
                });
                var html = '<tr class="gradeX sizeTableRow">' +
                    '<input type="hidden" class="sizeIdHidden" value=' + sizeId + '/>+' +
                    '<td>' + sizeNameEn + '</td>' +
                    '<td><i class="icon-photon minus deleteSize"></i></td>' +
                    '</tr>';
                $('.sizeTable').append(html);
                ManageSizeList(sizeId);
                $('#sizeModule').modal('hide');
                $('.tableSize').dataTable().fnDestroy();
                $('.tableSize').dataTable({
                    "sPaginationType": "bootstrap",
                    "fnInitComplete": function () {
                        $(".dataTables_wrapper select").select2({
                            dropdownCssClass: 'noSearch'
                        });
                    }
                });
                if ($(".sizeTable").children("tr").children("td").html() == "No data available in table") {
                    $(".sizeTable").children("tr").children("td").hide();
                }
                $("#addNewSize").hide();
                clearPopup();
            }
        });

        //Delete Size from the List
        $('.deleteSize').live("click", function () {
            var hiddenId = $(this).parent().prev().prev().val();
            var row = $(this).parent().parent().get(0);
            var atable = $('#tableSortableVariationsSize').dataTable();
            var pos = atable.fnGetPosition(row);
            atable.fnDeleteRow(pos);
            $("#addNewSize").show();
            ManageSizeList(hiddenId, 2);
        });

        //Add Manufacturer from Dropdown to List
        $('.addManufacturerToList').on("click", function (event) {
            var manufacturerId = $('#manuId').val();
            var price = $('#manufacturerPriceLable').val();
            var quantity = $('#manufacturerQuantityLable').val();
            if (price == null || price == "" || quantity == null || quantity == "" || manufacturerId == "" || isNaN(price) || isNaN(quantity)) {
                $.pnotify({
                    title: 'error',
                    type: 'info',
                    text: 'Please select Manufacturer and Enter Price and Quantity in Number'
                });
            } else {
                var index = $("#manufacturerDetails").children("tr").length;
                if ($("#manufacturerDetails").children("tr").children("td").html() == "No data available in table") {
                    index = index - 1;
                    $("#manufacturerDetails").children("tr").children("td").hide();
                }
                var isAlreadyExist = false;
                var ids = $('.idsofMan').val();
                if ($("#manufacturerDetails").children("tr").children("td").html() != "No data available in table") {
                    $.each(ids, function (id, value) {
                        if (value == manufacturerId) {
                            isAlreadyExist = true;
                            $.pnotify({
                                title: 'error',
                                type: 'info',
                                text: 'Manufacturer has already been selected.'
                            });
                            return false;
                        }
                    });
                }

                if (!isAlreadyExist) {
                    itemsCount = index + 1;

                    var manufacturerNameEn, manufacturerNameAr;
                    $.each(parsedManufacturer, function (key, value) {
                        if (value.VendorId == manufacturerId) {
                            manufacturerNameEn = value.VendorNameEn;
                            manufacturerNameAr = value.VendorNameAr;
                        }
                    });
                    var html = ' <tr data-id=' + index + '>' +
                        '<input style="display:none" name="ItemVariation.ItemManufacturers[' + index + '].ManufacturerId" type="hidden" value="' + manufacturerId + '" class = "idsofMan" />' +
                        '<td style="display:none"><input name="ItemVariation.ItemManufacturers.Index" type="hidden" value="' + index + '" /></td>' +
                        '<input name="ItemVariation.ItemManufacturers[' + index + '].ManufacturerId" type="hidden" value="' + index + '" />' +
                        '<td>' + itemsCount +
                        '</td>' +
                        '<td>' +
                        '<input  type = "hidden" class="auto-resize" name = "ItemVariation.ItemManufacturers[' + index + '].ManufacturerNameEn" class = "auto-resize Price">' +
                        '<label class="auto-resize" id="ItemVariation_ItemManufacturers_' + index + '__ManufacturerNameEn" name = "ItemVariation.ItemManufacturers[' + index + '].ManufacturerNameEn" class = "auto-resize PlaceInWarehouse" value = "' + quantity + '">' +
                        '<td>' +
                        '<input type = "hidden" class="auto-resize" name = "ItemVariation.ItemManufacturers[' + index + '].Price" class = "auto-resize Price" value = "' + price + '">' +
                        '<label class="auto-resize" id="ItemVariation_ItemManufacturers_' + index + '__Price" name = "ItemVariation.ItemManufacturers[' + index + '].Price" class = "auto-resize PlaceInWarehouse" value = "' + price + '">' +
                        '</td>' +
                        '<td>' +
                        '<input type = "hidden" rows="2" class="auto-resize" name = "ItemVariation.ItemManufacturers[' + index + '].Quantity" class = "auto-resize Price" value = "' + quantity + '">' +
                        '<label class="auto-resize" id="ItemVariation_ItemManufacturers_' + index + '__Quantity" name = "ItemVariation.ItemManufacturers[' + index + '].Quantity" class = "auto-resize PlaceInWarehouse" value = "' + quantity + '">' +
                        '</td>' +
                        '<td>' +
                        '<i class="icon-photon minus deleteManufacturer"></i>' +
                        '</td>' +
                        '</tr>';
                    $('#manufacturerDetails').append(html);
                    $('#ItemVariation_ItemManufacturers_' + index + '__ManufacturerNameEn').text(manufacturerNameEn);
                    $('#ItemVariation_ItemManufacturers_' + index + '__Price').text(price);
                    $('#ItemVariation_ItemManufacturers_' + index + '__Quantity').text(quantity);
                    event.preventDefault();
                    $('#manufacturModule').modal('hide');
                    $('.tableManufacturer').dataTable().fnDestroy();
                    $("#addNewManufacturer").hide();
                    $('.tableManufacturer').dataTable({
                        "sPaginationType": "bootstrap",
                        "fnInitComplete": function () {
                            $(".dataTables_wrapper select").select2({
                                dropdownCssClass: 'noSearch'
                            });
                        }
                    });
                    clearPopup();
                }
            }

        });

        //Delete Manufacturer from the List
        $('.deleteManufacturer').live("click", function () {
            var row = $(this).parent().parent().get(0);
            var atable = $('#tableSortableVariationsManufacturer').dataTable();
            var pos = atable.fnGetPosition(row);
            atable.fnDeleteRow(pos);
            if ($(".manufacturerTable").children("tr").children("td").html() == "No data available in table") {
                $("#addNewManufacturer").show();
            }
        });

        //Add Status from Dropdown to List
        $('.addStatusToList').on("click", function (event) {
            var statusId = $('#statusId').val();
            if (statusId == "") {
                $.pnotify({
                    title: 'error',
                    type: 'info',
                    text: 'Please select Status'
                });
            } else {
                var statusNameEn;
                var statusNameAr;
                $.each(parsedStatus, function (key, value) {
                    if (value.StatusId == statusId) {
                        statusNameEn = value.StatusNameEn;
                        statusNameAr = value.StatusNameAr;
                    }
                });
                var html = '<tr class="gradeX statusTableRow">' +
                    '<input type="hidden" class="statusIdHidden" value=' + statusId + '/>+' +
                    '<td>' + statusNameEn + '</td>' +
                    '<td><i class="icon-photon minus deleteStatus"></i></td>' +
                    '</tr>';
                $('.statusTable').append(html);
                ManageStatusList(statusId);
                $('#itemStatusModule').modal('hide');
                $('.tableStatus').dataTable().fnDestroy();
                $('.tableStatus').dataTable({
                    "sPaginationType": "bootstrap",
                    "fnInitComplete": function () {
                        $(".dataTables_wrapper select").select2({
                            dropdownCssClass: 'noSearch'
                        });
                    }
                });
                if ($(".statusTable").children("tr").children("td").html() == "No data available in table") {
                    $(".statusTable").children("tr").children("td").hide();
                }
                $("#addNewStatus").hide();
                clearPopup();
            }
        });

        //Delete Status from the List
        $('.deleteStatus').live("click", function () {
            var hiddenId = $(this).parent().prev().prev().val();
            var row = $(this).parent().parent().get(0);
            var atable = $('#tableSortableItemStatus').dataTable();
            var pos = atable.fnGetPosition(row);
            atable.fnDeleteRow(pos);
            $("#addNewStatus").show();
            ManageStatusList(hiddenId, 2);
        });

        //Add Color from Dropdown to List
        $('.addColorToList').on("click", function (event) {
            var colorId = $('#colorId').val();
            if (colorId == "") {
                $.pnotify({
                    title: 'error',
                    type: 'info',
                    text: 'Please select Color'
                });
            } else {
                var colorNameEn;
                var colorNameAr;
                $.each(parsedColor, function (key, value) {
                    if (value.ColorId == colorId) {
                        colorNameEn = value.ColorNameEn;
                        colorNameAr = value.ColorName;
                    }
                });
                var html = '<tr class="gradeX colorTableRow">' +
                    '<input type="hidden" class="colorIdHidden" value=' + colorId + '/>+' +
                    '<td>' + colorNameEn + '</td>' +
                    '<td><i class="icon-photon minus deleteColor"></i></td>' +
                    '</tr>';
                $('.colorTable').append(html);
                ManageColorList(colorId);
                $('#itemColorModule').modal('hide');
                $('.tableColor').dataTable().fnDestroy();
                $('.tableColor').dataTable({
                    "sPaginationType": "bootstrap",
                    "fnInitComplete": function () {
                        $(".dataTables_wrapper select").select2({
                            dropdownCssClass: 'noSearch'
                        });
                    }
                });
                if ($(".colorTable").children("tr").children("td").html() == "No data available in table") {
                    $(".colorTable").children("tr").children("td").hide();
                }
                $("#addNewColor").hide();
                clearPopup();
            }
        });

        //Delete Color from the List
        $('.deleteColor').live("click", function () {
            var hiddenId = $(this).parent().prev().prev().val();
            var row = $(this).parent().parent().get(0);
            var atable = $('#tableSortableItemColor').dataTable();
            var pos = atable.fnGetPosition(row);
            atable.fnDeleteRow(pos);
            $("#addNewColor").show();
            ManageColorList(hiddenId, 2);
        });

        $(".warehouseTree").click(function (event) {
            $('#warehouseTreeSelector').modal('show');
            event.preventDefault();
            $.fn.modal.Constructor.prototype.enforceFocus = function () { };
        });

        //Warehouse Tree
        var treeInitialData;
        if (dir == "ltr") {
            treeInitialData = [
                {
                    "data": {
                        "title": "Details",
                        "attr": { "href": "#", "onclick": "jsTreeClick(event)" }
                    },
                    "attr": { "id": "parentNode" },
                }
            ];
        } else {
            treeInitialData = [
                {
                    "data": {
                        "title": "Details",
                        "attr": { "href": "#", "onclick": "jsTreeClick(event)" }
                    },
                    "attr": { "id": "parentNode" },
                }
            ];
        }
        myTree = $("#jstree").jstree({
            "json_data": {
                "data": treeInitialData
            },
            "plugins": ["themes", "json_data", "ui"],
            "ui": {
                "initially_select": ["parentNode"]
            },
            "core": {
                "initially_open": ["parentNode"]
            }
        }).bind("select_node.jstree", function (event, data) {
            //`data.rslt.obj` is the jquery extended node that was clicked
            if (data.inst._get_parent(data.rslt.obj) != -1) {
                var parents = [];
                textTillParent = "";
                data.rslt.obj.parents("li").each(function () {
                    parents.push({ id: $(this).attr("id"), description: $(this).children("a").text() });
                });
                $.each(parents, function (key, value) {
                    textTillParent = value.description + " >" + textTillParent;
                });
                textTillParent = textTillParent + $(".jstree-clicked").text();
            }
            //Warehouse Tree
            $("#warehouseDropdown").on("change", function () {
                myTree.jstree("refresh");
                var requesturl = "/Inventory/ItemVariation/GetWarehouseDetails";
                var warehouseId = $('#warehouseDropdown').val();
                populateTree(warehouseId, "jstree", requesturl);
            });

        });


        $("#selectNode").on("click", function () {
            $('#textTillParent').text("Selected: " + textTillParent);
            $('#warehouseTreeSelector').modal('toggle');
            return true;
        });

        //Add Warehouse from Popup to List
        $('.addWarehouseFromPopup').on("click", function (event) {

            var index = $("#warehouseDetails").children("tr").length;
            if ($("#warehouseDetails").children("tr").children("td").html() == "No data available in table") {
                index = index - 1;
                $("#warehouseDetails").children("tr").children("td").hide();
            }
            var locationInWarehouse = $('#textTillParent').text();
            var quantity = $('#inputFieldQuantity').val();
            var warehouseId = $('#warehouseDropdown').val();
            if (quantity == "" || warehouseId == "" || isNaN(quantity)) {
                $.pnotify({
                    title: 'error',
                    type: 'info',
                    text: 'Please select Warehouse and Enter Quantityin Number'
                });
            } else {
                itemsCount = itemsCount + 1;

                var warehouseList = '@Html.Raw(Json.Encode(Model.WarehousesForDdl))';
                var parsed = JSON.parse(warehouseList);
                var warehouseNumber;
                $.each(parsed, function (key, value) {
                    if (value.WarehouseId == warehouseId) {
                        warehouseNumber = value.WarehouseNumber;
                    }
                });
                var html = ' <tr data-id=' + index + '>' +
                    '<input style="display:none" name="ItemVariation.ItemWarehouses[' + index + '].WarehouseId" type="hidden" value="' + warehouseId + '" />' +
                    '<td style="display:none"><input name="ItemVariation.ItemWarehouses.Index" type="hidden" value="' + index + '" /></td>' +
                    '<input name="ItemVariation.ItemWarehouses[' + index + '].WarehouseId" type="hidden" value="' + index + '" />' +
                    '<input name="ItemVariation.ItemWarehouses[' + index + '].WarehouseDetailId" id="ItemVariation_ItemWarehouses_' + index + '__WarehouseDetailId" type="hidden" />' +
                    '<td>' + itemsCount +
                    '</td>' +
                    '<td>' +
                    '<input rows="2" class="auto-resize" name = "ItemVariation.ItemWarehouses[' + index + '].WarehouseNumber" type="hidden" class = "auto-resize Number">' +
                    '<label rows="2" class="auto-resize" id="ItemVariation_ItemWarehouses_' + index + '__WarehouseNumber" name = "ItemVariation.ItemWarehouses[' + index + '].WarehouseNumber" class = "auto-resize Number">' +
                    '</td>' +
                    '<td>' +
                    '<input rows="2" class="auto-resize" name = "ItemVariation.ItemWarehouses[' + index + '].Quantity" class = "auto-resize Price" type="hidden" value = "' + quantity + '">' +
                    '<label rows="2" class="auto-resize" id="ItemVariation_ItemWarehouses_' + index + '__Quantity" name = "ItemVariation.ItemWarehouses[' + index + '].Quantity" class = "auto-resize Quantity" value = "' + quantity + '">' +
                    '<td>' +
                    '<input rows="2" class="auto-resize" name = "ItemVariation.ItemWarehouses[' + index + '].PlaceInWarehouse" class = "auto-resize PlaceInWarehouse" type="hidden" value = "' + locationInWarehouse + '">' +
                    '<label rows="2" class="auto-resize" id="ItemVariation_ItemWarehouses_' + index + '__PlaceInWarehouse" name = "ItemVariation.ItemWarehouses[' + index + '].PlaceInWarehouse" class = "auto-resize PlaceInWarehouse" value = "' + locationInWarehouse + '">' +
                    '</td>' +
                    '<td>' +
                    '<i class="icon-photon minus deleteWarehouse"></i>' +
                    '</td>' +
                    '</tr>';
                $('#warehouseDetails').append(html);
                $('#ItemVariation_ItemWarehouses_' + index + '__WarehouseNumber').text(warehouseNumber);
                $('#ItemVariation_ItemWarehouses_' + index + '__Quantity').text(quantity);
                $('#ItemVariation_ItemWarehouses_' + index + '__PlaceInWarehouse').text(locationInWarehouse);
                $('#ItemVariation_ItemWarehouses_' + index + '__WarehouseDetailId').val($('#jstree').jstree('get_selected').attr('id'));
                event.preventDefault();
                $('#wherehouseModule').modal('hide');
                $('.tableWarehouse').dataTable().fnDestroy();
                $('.tableWarehouse').dataTable({
                    "sPaginationType": "bootstrap",
                    "fnInitComplete": function () {
                        $(".dataTables_wrapper select").select2({
                            dropdownCssClass: 'noSearch'
                        });
                    }
                });
                clearPopup();
            }
        });

        //Delete Warehouse from the List
        $('.deleteWarehouse').live("click", function () {
            var row = $(this).parent().parent().get(0);
            var atable = $('#tableSortableVariationsWherehouse').dataTable();
            var pos = atable.fnGetPosition(row);
            atable.fnDeleteRow(pos);
        });

        //Hide Add New Buttons if list contains any Item in Color, Status and Size
        if ($(".sizeTable").children("tr").children("td").html() != "No data available in table") {
            $("#addNewSize").hide();
        }
        if ($(".colorTable").children("tr").children("td").html() != "No data available in table") {
            $("#addNewColor").hide();
        }
        if ($(".statusTable").children("tr").children("td").html() != "No data available in table") {
            $("#addNewStatus").hide();
        }
        if ($(".manufacturerTable").children("tr").children("td").html() != "No data available in table") {
            $("#addNewManufacturer").hide();
        }
    });

    //For manipulating the Lists

    //For manipulating the Size List

    var SizeResultArray = new Array();
    $(document).ready(function () {
        @foreach (var item in @Model.ItemVariation.Sizes)
        {
            <text>
        SizeResultArray.push(@item.SizeId);
        </text>
        }
        RefreshSizeArrayList();
    });
    function ManageSizeList(id, type) {
        if (type == 2) {
            //Delete Row Case
            var index = SizeResultArray.indexOf(parseInt(id));
            SizeResultArray.splice(index, 1);
        } else {
            //For Add
            SizeResultArray.push(id);
        }
        RefreshSizeArrayList();
    }
    function RefreshSizeArrayList() {
        //Set the Array List into hidden Variable
        var strSizes = "";
        for (var i = 0; i < SizeResultArray.length; i++) {
            strSizes += SizeResultArray[i] + ",";
        }
        if (strSizes.length > 0)
            strSizes = strSizes.substring(0, strSizes.length - 1);
        $('#SizeArrayList').val(strSizes);
    }

    //For manipulating the Status List
    var StatusResultArray = new Array();
    $(document).ready(function () {
        @foreach (var item in @Model.ItemVariation.Statuses)
        {
            <text>
        StatusResultArray.push(@item.StatusId);
        </text>
        }
        RefreshStatusArrayList();
    });
    function ManageStatusList(id, type) {
        if (type == 2) {
            //Delete Row Case
            var index = StatusResultArray.indexOf(parseInt(id));
            StatusResultArray.splice(index, 1);
        } else {
            //For Add
            StatusResultArray.push(id);
        }
        RefreshStatusArrayList();
    }
    function RefreshStatusArrayList() {
        //Set the Array List into hidden Variable
        var strStatuses = "";
        for (var i = 0; i < StatusResultArray.length; i++) {
            strStatuses += StatusResultArray[i] + ",";
        }
        if (strStatuses.length > 0)
            strStatuses = strStatuses.substring(0, strStatuses.length - 1);
        $('#StatusArrayList').val(strStatuses);
    }

    //For manipulating the Color List
    var ColorResultArray = new Array();
    $(document).ready(function () {
        @foreach (var item in @Model.ItemVariation.Colors)
        {
            <text>
        ColorResultArray.push(@item.ColorId);
        </text>
        }
        RefreshColorArrayList();
    });
    function ManageColorList(id, type) {
        if (type == 2) {
            //Delete Row Case
            var index = ColorResultArray.indexOf(parseInt(id));
            ColorResultArray.splice(index, 1);
        } else {
            //For Add
            ColorResultArray.push(id);
        }
        RefreshColorArrayList();
    }
    function RefreshColorArrayList() {
        //Set the Array List into hidden Variable
        var strColors = "";
        for (var i = 0; i < ColorResultArray.length; i++) {
            strColors += ColorResultArray[i] + ",";
        }
        if (strColors.length > 0)
            strColors = strColors.substring(0, strColors.length - 1);
        $('#ColorArrayList').val(strColors);
    }

    function jsTreeClick(event) {
        return true;
    }
    function clearPopup() {
        $('.toClear').val("");
        $(".select2me").select2("destroy");
        $('.select2me').select2({
            placeholder: "Select",
        });
    }
    function reActivateDeleteSize(a, b, c) {
        $('.deleteSize').on("click", function () {
            var hiddenId = $(this).parent().prev().prev().val();
            var row = $(this).parent().parent().get(0);
            var atable = $('#tableSortableVariationsSize').dataTable();
            var pos = atable.fnGetPosition(row);
            atable.fnDeleteRow(pos);
            ManageSizeList(hiddenId, 2);
        });
    }

    $("#UnitPrice").focusout(function () {
        var unitPrice = $('#UnitPrice').val();
        var unitCost = $('#UnitCost').val();
        if (unitPrice < unitCost) {
            $.pnotify({
                title: 'error',
                type: 'info',
                text: 'Unit Price cannot be less than Unit Cost'
            });
            $('#UnitPrice').val("");
            $('#UnitPrice').focus();
        }
    });

    function showCkEditors() {
        $("#CKEditorDescp").show();
        CKEDITOR.replace('NotesEn', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('NotesAr', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('AdditionalInfoEn', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('AdditionalInfoAr', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
    }

</script>