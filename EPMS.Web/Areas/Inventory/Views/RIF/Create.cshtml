@model  EPMS.Web.ViewModels.RIF.RIFViewModel
@{
    ViewBag.Title = Model.Rif.RIFId > 0 ? EPMS.Web.Resources.Inventory.RIF.RIF.EditPageTitle : EPMS.Web.Resources.Inventory.RIF.RIF.CreatePageTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var direction = EPMS.Web.Resources.Shared.Common.TextDirection;
}


<div class="breadcrumb-container" dir="ltr">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/Inventory/RIF/Index">
                @EPMS.Web.Resources.Inventory.RIF.RIF.ListPageBreadCrumb
            </a>
        </li>
        <li class="current">
            <a href="javascript:;">@EPMS.Web.Resources.Inventory.RIF.RIF.CreatePageBreadCrumb</a>
        </li>
    </ul>
</div>

<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@EPMS.Web.Resources.Inventory.RIF.RIF.CreatePageHeading</small></h2>
</header>

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
@using (Html.BeginForm("Create", "RIF", FormMethod.Post, new { @id = "RIFForm", @class = "form-horizontal", role = "form" }))
{
    @Html.HiddenFor(x => x.Rif.RIFId)
    @Html.HiddenFor(x => x.Rif.FormNumber)
    @Html.HiddenFor(x => x.Rif.ManagerId)
    @Html.HiddenFor(x => x.Rif.RecCreatedBy)
    @Html.HiddenFor(x => x.Rif.RecCreatedDate)
    <div class="container-fluid">
        @if (ViewBag.HasCustomerModule)
        {
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="MaritalStatus">@EPMS.Web.Resources.RFI.RFI.Client </label>
                </div>
                <div class="span2">
                    <div class="controls clientDDL">
                        @(direction == "ltr" ? Html.DropDownListFor(x => x.Rif.CustomerId, new SelectList(Model.Customers, "CustomerId", "CustomerNameE"), EPMS.Web.Resources.PMS.Project.SelectClientName, new { @class = "select2me", @id = "Client" }) : Html.DropDownListFor(x => x.Rif.CustomerId, new SelectList(Model.Customers, "CustomerId", "CustomerNameA"), EPMS.Web.Resources.PMS.Project.SelectClientName, new { @class = "select2me", @id = "Client" }))
                        <label id="clientValidationError" class="required"></label>
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="MaritalStatus">@EPMS.Web.Resources.RFI.RFI.OrderNameOrderNo </label>
                </div>
                <div class="span2">
                    <div class="controls orderDDL">
                        @if (Model.Rif.OrderId > 0)
                        {
                            @Html.DropDownListFor(m => m.Rif.OrderId, new SelectList(Model.Orders, "OrderId", "OrderNo"), "", new { @class = "select2me", @id = "OrderNo" })
                        }
                        else
                        {
                            @Html.DropDownListFor(m => m.Rif.OrderId, Enumerable.Empty<SelectListItem>(), "none", new { @class = "select2me", @id = "OrderNo" })
                        }
                        <label id="orderValidationError" class="required"></label>
                    </div>
                </div>
            </div>
        }

        <!--Input Field begin-->
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="createdBy">@EPMS.Web.Resources.RFI.RFI.CreatedBy  </label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Rif.RequesterName, new { @readonly = true, @id = "createdBy" })
                </div>
            </div>
        </div>
        <!--Input Field end-->
        <!--Input Field begin-->
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="greeting">@EPMS.Web.Resources.Inventory.RIF.RIF.ReturningReason</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Rif.ReasonE)
                </div>
                @Html.ValidationMessageFor(m => m.Rif.ReasonE, String.Empty, new { @class = "required" })

            </div>
        </div>
        <!--Input Field end-->
        <!--Input Field begin-->
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="greetinga">@EPMS.Web.Resources.Inventory.RIF.RIF.ReturningReasonArabic</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.Rif.ReasonA)
                </div>
                @Html.ValidationMessageFor(m => m.Rif.ReasonA, String.Empty, new { @class = "required" })
            </div>
        </div>
        <!--Input Field end-->
        <!--Basic Responsive Table begin-->
        <div class="row-fluid" id="ress">
            <div class="span12">
                <table class="table table-striped table-responsive">
                    <thead class="">
                        <tr>
                            <th>@EPMS.Web.Resources.Shared.Common.Serial</th>
                            <th style="width: 55%">@EPMS.Web.Resources.RFI.RFI.ItemDetails</th>
                            <th style="width: 15%">@EPMS.Web.Resources.RFI.RFI.Quantity</th>
                            <th>@EPMS.Web.Resources.Inventory.RIF.RIF.Warehouse</th>
                            <th style="display: none">@EPMS.Web.Resources.Inventory.RIF.RIF.ReleasedQuantity</th>
                            <th style="width: 4%">@EPMS.Web.Resources.RFI.RFI.Delete</th>
                        </tr>
                    </thead>
                    <tbody class="qouteAdd" id="RifItemsTableBody">
                        @if (Model.RifItem.Any())
                        {
                            for (int i = 0; i < Model.RifItem.Count(); i++)
                            {
                                <tr data-id=@i>
                                    <td style='display:none'>
                                        <input name='RifItem.Index' type='hidden' value=@i />

                                        @Html.HiddenFor(m => m.RifItem[i].IsItemDescription)
                                        @Html.HiddenFor(m => m.RifItem[i].IsItemSKU)
                                        @Html.HiddenFor(m => m.RifItem[i].ItemVariationId)
                                        @Html.HiddenFor(m => m.RifItem[i].RIFItemId)
                                        @Html.HiddenFor(m => m.RifItem[i].PlaceInDepartment)
                                    </td>
                                    <td>
                                        <div class="control-group row-fluid">
                                            <div class="span1">
                                                <label class="control-label serialNumber">@(i + 1)</label>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        @Html.TextAreaFor(m => m.RifItem[i].ItemDetails, new { @class = "auto-resize", @rows = 2 })

                                        <button type="button" class="btn itemAdder" data-toggle="modal" data-target="#itemSearcher">+</button>
                                        @Html.ValidationMessageFor(m => m.RifItem[i].ItemDetails)
                                    </td>
                                    <td class="quantity">
                                        @Html.TextBoxFor(m => m.RifItem[i].ItemQty, new { @class = "n1", @rows = 2 })
                                        @Html.ValidationMessageFor(m => m.RifItem[i].ItemQty, null, new { @class = "required" })
                                    </td>
                                    <td>
                                        <div class="span9 WarehouseError_@(i +1)">
                                            @if (direction == "ltr")
                                            {
                                                <div class="controls">
                                                    @Html.DropDownListFor(m => m.RifItem[i].WarehouseId, new SelectList(Model.Warehouses, "WarehouseId", "WarehouseNumber", Model.RifItem[i].WarehouseId), "--Select--", new { @class = "select2me disableDdl" })
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="controls">
                                                    @Html.DropDownListFor(m => m.RifItem[i].WarehouseId, new SelectList(Model.Warehouses, "WarehouseId", "WarehouseNumber", Model.RifItem[i].WarehouseId), "--Select--", new { @class = "select2me disableDdl" })
                                                </div>
                                            }
                                            <label id="WarehouseError_@(i + 1)" class="required"></label>
                                        </div>
                                    </td>
                                    <td class="delete">
                                        <i class="icon-photon minus deleteRow"></i>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr data-id="0">
                                <td style='display:none'>
                                    <input name='RifItem.Index' type='hidden' value='0' />
                                    <input name='RifItem[0].IsItemDescription' id='RifItem_0__IsItemDescription' type='hidden' />
                                    <input name='RifItem[0].IsItemSKU' id='RifItem_0__IsItemSKU' type='hidden' />
                                    <input name='RifItem[0].ItemVariationId' id='RifItem_0__ItemVariationId' type='hidden' />
                                    <input name='RifItem[0].PlaceInDepartment' id='RifItem_0__PlaceInDepartment' type='hidden' />
                                </td>
                                <td>
                                    <div class="control-group row-fluid">
                                        <div class="span1">
                                            <label class="control-label serialNumber">1</label>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <textarea rows="2" id='RifItem_0__ItemDetails' class="auto-resize" data-val="true" data-val-required="The Item Details field is required." name="RifItem[0].ItemDetails"></textarea>
                                    <button type="button" class="btn itemAdder" data-toggle="modal" data-target="#itemSearcher">+</button>
                                    <span class="field-validation-valid required" data-valmsg-for="RifItem[0].ItemDetails" data-valmsg-replace="true"></span>
                                </td>
                                <td class="quantity">
                                    <input class="n1" type="text" name="RifItem[0].ItemQty" value="0" data-val="true" data-val-number="The field Item Qty must be a number." data-val-range="Please enter valid quantity" data-val-range-max="2147483647" data-val-range-min="1" data-val-required="The Item Qty field is required.">
                                    <span class="field-validation-valid required" data-valmsg-for="RifItem[0].ItemQty" data-valmsg-replace="true"></span>
                                </td>
                                <td>
                                    <div class="span9 WarehouseError_0">
                                        @if (direction == "ltr")
                                        {
                                            <div class="controls">
                                                @Html.DropDownList("RifItem[0].WarehouseId", new SelectList(Model.Warehouses, "WarehouseId", "WarehouseNumber"), "--Select--", new { @class = "select2me disableDdl" })
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="controls">
                                                @Html.DropDownList("RifItem[0].WarehouseId", new SelectList(Model.Warehouses, "WarehouseId", "WarehouseNumber"), "--Select--", new { @class = "select2me disableDdl" })
                                            </div>
                                        }
                                        <label id="WarehouseError_0" class="required"></label>
                                    </div>
                                </td>
                                <td class="delete">
                                    <i class="icon-photon minus deleteRow"></i>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>

            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="button" class="btn trAdder">@EPMS.Web.Resources.RFI.RFI.Add</button>

                </div>
            </div>
        </div>
        <!--Basic Responsive Table end-->
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.RFI.RFI.NotesE</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(m => m.Rif.NotesE, new { @id = "RFINotesE" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.RFI.RFI.NotesA</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextAreaFor(m => m.Rif.NotesA, new { @id = "RFINotesA" })
                </div>
            </div>
        </div>

        <div class="control-group row-fluid">
            <div class="span3 span-inset">
                <button type="submit" class="btn" onclick="validateForm(event)">@EPMS.Web.Resources.RFI.RFI.Submit</button>
            </div>
        </div>
    </div>
        <!-- end container -->
}



@section popups
{
    @Html.Partial("_ItemsPopUp")
}
<script src="~/RichTextEditor/ckeditor.js"></script>
<link href="~/Content/CSS/jsTreeCheckbox/style.css" rel="stylesheet" />
<script>
    var siteUrl;
    var divId;
    var textTillParent = "";
    var dir = '@direction';
    var errorMessageTree = '@EPMS.Web.Resources.Shared.Common.RequiredTreeField';
    var warehouseList = '@Html.Raw(Json.Encode(Model.Warehouses))';
    var warehouses = JSON.parse(warehouseList);
    $(document).ready(function () {
        siteUrl = $("#siteURL").val();
        divId = "jstree";
        CKEDITOR.replace('RFINotesE', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });
        CKEDITOR.replace('RFINotesA', {
            filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
        });

        $("#selectBoxFilter").select2();
        // set JobId and Department Name
        $("#Client").on("change", function () {
            $("#OrderNo").empty();
            var clientId = $(this).val();
            if (clientId != "") {
                $("#OrderNo").append(
                    $('<option></option>').val(0).html("- Select Order -")
                );
                var orders = '@Html.Raw(Json.Encode(Model.Orders))';
                var parsedOrders = JSON.parse(orders);

                $.each(parsedOrders, function (key, value) {
                    if (value.CustomerId == clientId) {
                        $("#OrderNo").append(
                            $('<option></option>').val(value.OrderId).html(value.OrderNo)
                        );
                    }
                });
            } else {
                $("#OrderNo").append(
                    $('<option></option>').val(0).html("none")
                );
            }
            $(".select2me").select2("destroy");
            $('.select2me').select2({
                placeholder: "Select",
            });
        });

        function getModalControlsValues() {
            //get item's values
            var isItemDescription = $('#ItemDescriptionModalChk').is(':checked');
            var isItemSku = $('#ItemSKUModalChk').is(':checked');
            var itemVariationId = $("#ItemVariationDropDownList").val();

            //set item's values
            var index = $("#ItemModalIndex").val();
            $("#RifItem_" + index + "__IsItemDescription").val(isItemDescription);
            $("#RifItem_" + index + "__IsItemSKU").val(isItemSku);
            $("#RifItem_" + index + "__ItemVariationId").val(itemVariationId);

            //set item sku and description in details text area
            var rfiItems = '@Html.Raw(Json.Encode(Model.ItemVariationDropDownList))';
            var parsedRfiItems = JSON.parse(rfiItems);

            $.each(parsedRfiItems, function (key, value) {
                if (value.ItemVariationId == itemVariationId) {
                    $("#RifItem_" + index + "__ItemDetails").val("");
                    var textToAppend = "";
                    if ('@direction' == "ltr") {
                        textToAppend = textToAppend + "Name: " + value.ItemNameE;
                    } else {
                        textToAppend = textToAppend + "Name: " + value.ItemNameA;
                    }
                    if (isItemSku) {
                        textToAppend = textToAppend + "\nSKU Code: " + value.SKUCode;
                    }
                    if (isItemDescription) {
                        if ('@direction' == "ltr") {
                            if (value.ItemVariationDescriptionE == null) {
                                textToAppend = textToAppend + "\nDescription:";
                            } else {
                                textToAppend = textToAppend + "\nDescription: " + value.ItemVariationDescriptionE;
                            }

                        } else {
                            if (value.ItemVariationDescriptionA == null) {
                                textToAppend = textToAppend + "\nDescription:";
                            } else {
                                textToAppend = textToAppend + "\nDescription: " + value.ItemVariationDescriptionA;
                            }
                        }
                    }
                    $("#RifItem_" + index + "__ItemDetails").val(textToAppend);
                }
            });

            $('#itemSearcher').modal('toggle');
        }
        function getModalControlsValuesForTree() {
            //get item's values
            var isItemDescription = $('#ItemDescriptionModalChk').is(':checked');
            var isItemSku = $('#ItemSKUModalChk').is(':checked');
            var itemVariationId = $("#ItemVariationTree").val();

            //set item's values
            var index = $("#ItemModalIndex").val();
            $("#RifItem_" + index + "__IsItemDescription").val(isItemDescription);
            $("#RifItem_" + index + "__IsItemSKU").val(isItemSku);
            $("#RifItem_" + index + "__ItemVariationId").val(itemVariationId);

            //set item sku and description in details text area
            var rfiItems = '@Html.Raw(Json.Encode(Model.ItemVariationDropDownList))';
            var parsedRfiItems = JSON.parse(rfiItems);

            $.each(parsedRfiItems, function (key, value) {
                if (value.ItemVariationId == itemVariationId) {
                    $("#RifItem_" + index + "__ItemDetails").val("");
                    var textToAppend = "";
                    if ('@direction' == "ltr") {
                        textToAppend = textToAppend + "Name: " + value.ItemNameE;
                    } else {
                        textToAppend = textToAppend + "Name: " + value.ItemNameA;
                    }
                    if (isItemSku) {
                        textToAppend = textToAppend + "\nSKU Code: " + value.SKUCode;
                    }
                    if (isItemDescription) {
                        if ('@direction' == "ltr") {
                            if (value.ItemVariationDescriptionE == null) {
                                textToAppend = textToAppend + "\nDescription:";
                            } else {
                                textToAppend = textToAppend + "\nDescription: " + value.ItemVariationDescriptionE;
                            }

                        } else {
                            if (value.ItemVariationDescriptionA == null) {
                                textToAppend = textToAppend + "\nDescription:";
                            } else {
                                textToAppend = textToAppend + "\nDescription: " + value.ItemVariationDescriptionA;
                            }
                        }
                    }
                    $("#RifItem_" + index + "__ItemDetails").val(textToAppend);
                }
            });

            $('#itemSearcher').modal('toggle');
        }
        $("#btnTreeSelector").click(function (event) {
            $('#itemTreeSelector').modal('show');
            event.preventDefault();
            $.fn.modal.Constructor.prototype.enforceFocus = function () { };
        });

        $("#SaveChanges").on("click", function () {
            var createFrom = $("input[name=ItemFrom]:checked").val();
            if (createFrom == "dropdown") {
                if (validateSelect2Ddl("#ItemVariationDropDownList", '@EPMS.Web.Resources.Shared.Common.RequiredDdlField')) {
                    getModalControlsValues();
                }
            } else {
                getModalControlsValuesForTree();
            }
        });
        $("#selectDepartment").on("click", function () {
            var selectedItem = $(".jstree-clicked").text();
            // validation
            if (selectedItem == "" || selectedItem == null) {
                $("#selectedItemTreeValidation").text(errorMessageTree);
                $("#selectedItemTreeValidation").addClass("Error");
                return;
            } else {
                $("#selectedItemTreeValidation").text("");
                $("#selectedItemTreeValidation").removeClass("Error");
            }
            $("#ItemVariationTree").val("");
            var rfiItems = '@Html.Raw(Json.Encode(Model.ItemVariationDropDownList))';
            var parsedRfiItems = JSON.parse(rfiItems);
            $.each(parsedRfiItems, function (key, value) {
                if (value.ItemCodeSKUCodeDescriptoinEn == selectedItem) {
                    $("#ItemVariationTree").val(value.ItemVariationId);
                }
            });
            var item = $("#ItemVariationTree").val();
            if (item == "" || item == 0 || item == null) {
                $("#selectedItemTreeValidation").text(errorMessageTree);
                $("#selectedItemTreeValidation").addClass("Error");
                return;
            } else {
                $("#selectedItemTreeValidation").text("");
                $("#selectedItemTreeValidation").removeClass("Error");
            }
            $('#itemTreeSelector').modal('toggle');
            return true;
        });

        //open pop up
        $('#itemSearcher').on('show', function () {
            //clear DDL required value label
            $("#ItemVariationDropDownListValidation").text("");
            $("#ItemVariationDropDownListValidation").removeClass("Error");

            //get the id from tr that is selected for the item popup
            var index = $(event.target).closest('tr').data('id');
            $("#ItemModalIndex").val(index);
            //get item's values
            var isItemDescription = $("#RifItem_" + index + "__IsItemDescription").val();
            var isItemSKU = $("#RifItem_" + index + "__IsItemSKU").val();
            var itemVariationId = $("#RifItem_" + index + "__ItemVariationId").val();
            var placeInDepartment = $("#RifItem_" + index + "__PlaceInDepartment").val();

            //set modal fields according to modal values
            $("#ItemVariationDropDownList").select2("val", itemVariationId); //set the value

            if (isItemDescription == "false" || isItemDescription == "False" || isItemDescription == "") {
                $('#ItemDescriptionModalChk').attr('checked', false);
            } else {
                $('#ItemDescriptionModalChk').attr('checked', true);
            }

            if (isItemSKU == "false" || isItemSKU == "False" || isItemSKU == "") {
                $('#ItemSKUModalChk').attr('checked', false);
            } else {
                $('#ItemSKUModalChk').attr('checked', true);
            }
            var itemTreeUrl = siteUrl + "/Api/Tree/GetTreeData/";
            populateTreeJsonWTCkb(itemTreeUrl, divId, dir);
        });
        //add data in row from popup
        $('.trAdder').on("click", function () {
            var index = $("#RifItemsTableBody").children("tr").length;
            var warehouseColumn = getWarehouseDD(index);
            var indexCell = "<td style='display:none'>" +
                "<input name='RifItem.Index' type='hidden' value='" + index + "' />" +
                "<input name='RifItem[" + index + "].IsItemDescription' id='RifItem_" + index + "__IsItemDescription' type='hidden' />" +
                "<input name='RifItem[" + index + "].IsItemSKU' id='RifItem_" + index + "__IsItemSKU' type='hidden' />" +
                "<input name='RifItem[" + index + "].ItemVariationId' id='RifItem_" + index + "__ItemVariationId' type='hidden' />" +
                "<input name='RifItem[" + index + "].PlaceInDepartment' id='RifItem_" + index + "__PlaceInDepartment' type='hidden' />" +
                "</td>";
            //RifItem
            var html = ' <tr data-id=' + index + '>' +
                indexCell +
                '<td>' +
                '<div class="control-group row-fluid">' +
                '<div class="span1">' +
                '<label class="control-label serialNumber"  ></label>' +
                '</div></div>' +
                '</td>' +
                '<td> <textarea rows="2"  class="auto-resize"  id="RifItem_' + index + '__ItemDetails" name="RifItem[' + index + '].ItemDetails" data-val="true" data-val-required="The Item Details field is required."></textarea>' +
                '<button type="button" class="btn itemAdder" data-toggle="modal" data-target="#itemSearcher" >+</button>' +
                '<span class="field-validation-valid required" data-valmsg-for="RifItem[' + index + '].ItemDetails" data-valmsg-replace="true"></span>' +
                '</td>' +
                '<td class="quantity"> ' +
                '<input class="n1" type="text" id="RifItem_' + index + '_ItemQty" name="RifItem[' + index + '].ItemQty" data-val="true" data-val-number="The field Item Qty must be a number." data-val-range="Please enter valid quantity" data-val-range-max="2147483647" data-val-range-min="1" data-val-required="The Item Qty field is required." value=0>' +
                '<span class="field-validation-valid required" data-valmsg-for="RifItem[' + index + '].ItemQty" data-valmsg-replace="true"></span>' +
                '</td>' +
                '<td>' + warehouseColumn +
                '</td>' +
                '<td class="delete"> <i class="icon-photon minus deleteRow"></i>' +
                '</td></tr>';

            $('.qouteAdd').append(html);

            //remove validation
            $("form").removeData("validator").removeData("unobtrusiveValidation");

            //Parse the form again to apply new validations
            $.validator.unobtrusive.parse("form");
            $(".select2me").select2("destroy");
            $('.select2me').select2({
                placeholder: "Select",
            });
            activateSerial();
            reActivateDelete();
        });
        reActivateDelete();

        function reActivateDelete() {
            $('.deleteRow').on("click", function () {
                var count = $('.qouteAdd tr').length;
                if (count > 1) {
                    $(this).parent().parent().remove();
                }
                activateSerial();
            });
        }

        function activateSerial() {
            var count = $('.qouteAdd tr').length;
            var add = 0;
            $('.qouteAdd tr').each(function () {
                add++;
                $(this).find(".serialNumber").text(add);
            });
        }
        var $radios = $('input:radio[name=ItemFrom]');
        $radios.filter('[value=dropdown]').prop('checked', true);
        $("#Simple_Select_Box_with_Filter_Search").show();
        $("#treeControl").hide();
        $("input[name=ItemFrom]:radio").change(function () {
            if ($(this).val() == "dropdown") {
                $("#Simple_Select_Box_with_Filter_Search").show();
                $("#treeControl").hide();
            }
            if ($(this).val() == "tree") {
                $("#Simple_Select_Box_with_Filter_Search").hide();
                $("#treeControl").show();
            }
        });
    });

    $('#tiny').elrte({
        lang: "en",
        styleWithCSS: false,
        height: 200,
        toolbar: 'tiny'
    });
    function jsTreeClick(event) {
        return true;
    }
    function validateForm(event) {
        var client = $("#Client").val();
        if (client == 0 || client == "" || client == null) {
            event.preventDefault();
            $("#clientValidationError").text("Please Select Client");
            $('html,body').animate({
                scrollTop: $(".clientDDL").offset().top
            }, 'slow');
            return false;
        } else {
            $("#clientValidationError").text("");
        }
        var rfi = $("#OrderNo").val();
        if (rfi == 0 || rfi == "" || rfi == null) {
            event.preventDefault();
            $("#orderValidationError").text("Please Select Order");
            $('html,body').animate({
                scrollTop: $(".orderDDL").offset().top
            }, 'slow');
            return false;
        } else {
            $("#orderValidationError").text("");
        }
        var count = $("#RifItemsTableBody").children("tr").length;
        for (var x = 0; x < count; x++) {
            var warehouse = $("#RifItem_" + x + "__WarehouseId").val();
            if (warehouse == 0 || warehouse == "" || warehouse == null) {
                $("#WarehouseError_" + x).text("Please select Warehouse");
                $('html,body').animate({
                    scrollTop: $(".WarehouseError_" + x).offset().top
                }, 'slow');
                event.preventDefault();
                return false;
            } else {
                $("#WarehouseError_" + x).text("");
            }
        }
        return true;
    }
    function getWarehouseDD(index) {
        var options = '<option value="0">--Select--</option>';
        $.each(warehouses, function (key, value) {
            options += '<option value="' + value.WarehouseId + '">' + value.WarehouseNumber + '</option>';
        });
        var control = '<div class="span9 WarehouseError_' + index + '">' +
            '<div class="controls">' +
            '<select class="select2me disableDdl" id="RifItem_' + index + '__WarehouseId" name="RifItem[' + index + '].WarehouseId">' +
                options +
            '</select>' +
            '</div>' +
            '<label id="WarehouseError_' + index + '" class="required"></label>' +
            '</div>';
        return control;
    }
</script>