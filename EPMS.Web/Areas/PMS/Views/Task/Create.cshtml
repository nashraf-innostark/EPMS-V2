@model EPMS.Web.ViewModels.Tasks.TaskCreateViewModel

@{
    string userRole = (string)Session["RoleName"];
    var direction = EPMS.Web.Resources.Shared.Common.TextDirection;
    ViewBag.Title = Model.PageTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    string[] module = (string[])Session["UserModules"];
    string[] userPermissionsSet = (string[])HttpContext.Current.Session["UserPermissionSet"];
}

<!-- Navigation Bar -->
<div class="breadcrumb-container">
    <ul class="xbreadcrumbs">
        <li>
            <a href="~/Dashboard/Index">
                <i class="icon-photon home"></i>
            </a>
        </li>
        <li>
            <a href="~/PMS/Task/Index">
                @EPMS.Web.Resources.PMS.Task.PageTitleIndex
            </a>
        </li>
        <li>
            @ViewBag.Title
        </li>
    </ul>
</div>
<!-- Page heading -->
<header>
    <i class="icon-big-notepad"></i>
    <h2><small>@Model.Header</small></h2>
</header>
<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
<!-- Page heading ends -->
@using (Html.BeginForm("Create", "Task", FormMethod.Post, new { @class = "form-horizontal", @id = "AddEditTaskForm", role = "form", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(model => model.ProjectTask.TaskId, new { @id = "TaskId" })
    @Html.HiddenFor(model => model.ProjectTask.RecCreatedBy)
    @Html.HiddenFor(model => model.ProjectTask.RecCreatedDt)
    @Html.HiddenFor(model => model.ProjectTask.PrevTasksWeightSum, new { @id = "prevTasksWeight" })
    @*<input type="hidden" id="prevTasksWeight" />*@
    <input type="hidden" id="projectStartDate" />
    <input type="hidden" id="projectEndDate" />
    <input type="hidden" id="requisiteTasks" />
    if (Model.OldRequisitTasks != null)
    {
        for (int i = 0; i < Model.OldRequisitTasks.Count(); i++)
        {
            @Html.HiddenFor(model => model.OldRequisitTasks[i])
        }
    }
    if (Model.OldAssignedEmployees != null)
    {
        for (int i = 0; i < Model.OldAssignedEmployees.Count(); i++)
        {
            @Html.HiddenFor(model => model.OldAssignedEmployees[i])
        }
    }
    <div class="container-fluid">
        @if (module.Contains("Customer Service") || module.Contains("CS"))
        {
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="Client">@EPMS.Web.Resources.PMS.Task.ClientName</label>
                </div>
                <div class="span2">
                    <div class="controls">
                        @if (direction == "ltr")
                        {
                            @Html.DropDownListFor(model => model.ProjectTask.CustomerId, new SelectList(ViewBag.Customers, "CustomerId", "CustomerNameE"), "--Select--", new { @class = "select2me", @id = "Client" })
                        }
                        @if (direction == "rtl")
                        {
                            @Html.DropDownListFor(model => model.ProjectTask.CustomerId, new SelectList(ViewBag.Customers, "CustomerId", "CustomerNameA"), "--Select--", new { @class = "select2me", @id = "Client" })
                        }
                        <label id="customerValidation"></label>
                    </div>
                </div>
            </div>
        }
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="">@EPMS.Web.Resources.PMS.Task.ProjectName</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @if (direction == "ltr")
                    {
                        @Html.DropDownListFor(m => m.ProjectTask.ProjectId, new SelectList(Model.ProjectsForDdls, "ProjectId", "NameE"), "--Select--", new { @id = "ProjectId", @class = "select2me projectDDL" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.ProjectTask.ProjectId, new SelectList(Model.ProjectsForDdls, "ProjectId", "NameA"), "--Select--", new { @id = "ProjectId", @class = "select2me projectDDL" })
                    }
                    <label id="projectValidation"></label>
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label">@EPMS.Web.Resources.PMS.Task.IsParent</label>
            </div>
            <div class="span9 span-inset">
                <div data-on-label="YES" data-off-label="NO" class="switch switch-small" data-on="success" data-off="danger">
                    @Html.CheckBoxFor(m => m.ProjectTask.IsParent, new { @id = "IsParentTask" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="">@EPMS.Web.Resources.PMS.Task.ParentTask</label>
            </div>
            <div class="span2">
                <div class="controls">
                    @if (direction == "ltr")
                    {
                        @Html.DropDownListFor(m => m.ProjectTask.ParentTask, new SelectList(Model.AllParentTasks, "TaskId", "TaskNameE"), "--Select--", new { @id = "ParentTaskId", @class = "select2me projectDDL" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.ProjectTask.ParentTask, new SelectList(Model.AllParentTasks, "TaskId", "TaskNameA"), "--Select--", new { @id = "ParentTaskId", @class = "select2me projectDDL" })
                    }
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="TaskNameE">@EPMS.Web.Resources.PMS.Task.TaskName</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ProjectTask.TaskNameE, new { @id = "TaskNameE", @class = "readonly toBeDiable" })
                    @Html.ValidationMessageFor(m => m.ProjectTask.TaskNameE, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="TaskNameA">@EPMS.Web.Resources.PMS.Task.TaskNameA</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ProjectTask.TaskNameA, new { @id = "TaskNameA", @class = "readonly toBeDiable" })
                    @Html.ValidationMessageFor(m => m.ProjectTask.TaskNameA, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div id="Descp">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="descpEn">@EPMS.Web.Resources.PMS.Task.Description</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="descpEn" readonly="readonly" />
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="descpAr">@EPMS.Web.Resources.PMS.Task.DescriptionA</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="descpAr" readonly="readonly" />
                    </div>
                </div>
            </div>
        </div>
        <div id="CKEditorDescp">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="DescriptionE">@EPMS.Web.Resources.PMS.Task.Description</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(model => model.ProjectTask.DescriptionE, new { @id = "DescriptionE", @class = "readonly" })
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="DescriptionA">@EPMS.Web.Resources.PMS.Task.DescriptionA</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(model => model.ProjectTask.DescriptionA, new { @id = "DescriptionA", @class = "readonly" })
                    </div>
                </div>
            </div>
        </div>
        <div id="Dual_Multi_Select_with_Filter_Search" class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="dualMulti">@EPMS.Web.Resources.PMS.Task.Pre_ReqTask</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @if ((Model.ProjectAllTasks != null))
                    {
                        if (direction == "ltr")
                        {
                            @Html.ListBoxFor(model => model.RequisitTasks, new MultiSelectList(Model.ProjectAllTasks, "TaskId", "TaskNameE"), new { @class = "", @id = "dualMulti", })
                        }
                        else
                        {
                            @Html.ListBoxFor(model => model.RequisitTasks, new MultiSelectList(Model.ProjectAllTasks, "TaskId", "TaskNameA"), new { @class = "", @id = "dualMulti", })
                        }
                    }
                    else
                    {
                        @Html.ListBoxFor(model => model.RequisitTasks, new SelectList(new[] { "" }), new { @id = "dualMulti" })
                    }
                </div>
            </div>
        </div>
        <div id="Date_Picker" class="control-group row-fluid startDate">
            <div class="span3">
                <label class="control-label" for="TaskStartDate">
                    @EPMS.Web.Resources.PMS.Task.StartDate<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="(dd/mm/yyyy)"><i class="icon-photon info-circle"></i></a>
                </label>
            </div>
            @if (direction == "rtl")
            {
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.ProjectTask.StartDateAr, new { @class = "col-lg-2 datepickerArabic form-control cursorHand toBeDiable", @id = "TaskStartDateAr", @placeholder = "Hijri", onchange = "HijriToGregorian(this,'#TaskStartDate')", @readonly = "readonly" })
                    <label id="projectStartDateValidation"></label>
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.ProjectTask.StartDate, new { @class = "col-lg-2 datepickerGregorian form-control cursorHand toBeDiable", @id = "TaskStartDate", @placeholder = "Gregorian", onchange = "GregorianToHijri(this, TaskStartDateAr)", @readonly = "readonly" })
                </div>
            }
            else
            {
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.ProjectTask.StartDate, new { @class = "col-lg-2 datepickerGregorian form-control cursorHand toBeDiable", @id = "TaskStartDate", @placeholder = "Gregorian", onchange = "GregorianToHijri(this, TaskStartDateAr)", @readonly = "readonly" })
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.ProjectTask.StartDateAr, new { @class = "col-lg-2 datepickerArabic form-control cursorHand toBeDiable", @id = "TaskStartDateAr", @placeholder = "Hijri", onchange = "HijriToGregorian(this,'#TaskStartDate')", @readonly = "readonly" })
                    <label id="projectStartDateValidation"></label>
                </div>
            }
        </div>
        <div id="Date_Picker2" class="control-group row-fluid endDate">
            <div class="span3">
                <label class="control-label" for="TaskEndDate">
                    @EPMS.Web.Resources.PMS.Task.DeliveryDate<a href="javascript:;" class="bootstrap-tooltip" data-placement="top" data-original-title="(dd/mm/yyyy)"><i class="icon-photon info-circle"></i></a>
                </label>
            </div>
            @if (direction == "rtl")
            {
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.ProjectTask.EndDateAr, new {@class = "col-lg-2 datepickerArabic form-control cursorHand toBeDiable", @id = "TaskEndDateAr", @placeholder = "Hijri", onchange = "HijriToGregorian(this,'#TaskEndDate')", @readonly = "readonly"})
                    <label id="projectEndDateValidation"></label>
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.ProjectTask.EndDate, new {@class = "col-lg-2 datepickerGregorian form-control cursorHand toBeDiable", @id = "TaskEndDate", @placeholder = "Gregorian", onchange = "GregorianToHijri(this, TaskEndDateAr)", @readonly = "readonly"})
                </div>
            }
            else
            {
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.ProjectTask.EndDate, new {@class = "col-lg-2 datepickerGregorian form-control cursorHand toBeDiable", @id = "TaskEndDate", @placeholder = "Gregorian", onchange = "GregorianToHijri(this, TaskEndDateAr)", @readonly = "readonly"})
                </div>
                <div class="controls span4">
                    @Html.TextBoxFor(model => model.ProjectTask.EndDateAr, new {@class = "col-lg-2 datepickerArabic form-control cursorHand toBeDiable", @id = "TaskEndDateAr", @placeholder = "Hijri", onchange = "HijriToGregorian(this,'#TaskEndDate')", @readonly = "readonly"})
                    <label id="projectEndDateValidation"></label>
                </div>
            }
        </div>
        @if (userPermissionsSet.Contains("CreateTask"))
        {
            <div id="Dual_Multi_Select_with_Filter_Search" class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="dualMulti2">@EPMS.Web.Resources.PMS.Task.AssignEmployee</label>
                </div>
                <div class="span9" id="checked">
                    <div class="controls">
                        @if ((Model.ProjectTask != null && Model.ProjectTask.TaskEmployees != null))
                        {
                            if (direction == "ltr")
                            {
                                @Html.ListBoxFor(model => model.AssignedEmployees, new MultiSelectList(Model.AllEmployees, "EmployeeId", "EmployeeFullNameE"), new { @class = "", @id = "dualMulti2", })
                            }
                            else
                            {
                                @Html.ListBoxFor(model => model.AssignedEmployees, new MultiSelectList(Model.AllEmployees, "EmployeeId", "EmployeeFullNameA"), new { @class = "", @id = "dualMulti2", })
                            }
                        }
                        else
                        {
                            if (direction == "ltr")
                            {
                                @Html.ListBoxFor(model => model.AssignedEmployees, new MultiSelectList(Model.AllEmployees, "EmployeeId", "EmployeeFullNameE"), new { @class = "", @id = "dualMulti2", })
                            }
                            else
                            {
                                @Html.ListBoxFor(model => model.AssignedEmployees, new MultiSelectList(Model.AllEmployees, "EmployeeId", "EmployeeFullNameA"), new { @class = "", @id = "dualMulti2", })
                            }
                        }
                    </div>
                </div>
            </div>
        }
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="TotalCost">@EPMS.Web.Resources.PMS.Task.TotalCost</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ProjectTask.TotalCost, new { @id = "TotalCost", @class = "readonly disableOnLoad" })
                    @Html.ValidationMessageFor(m => m.ProjectTask.TotalCost, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="TotalWeight">@EPMS.Web.Resources.PMS.Task.TaskWeight</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ProjectTask.TotalWeight, new { @id = "TotalWeight", @class = "readonly  toBeDiable" })
                    @Html.ValidationMessageFor(m => m.ProjectTask.TotalWeight, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div class="control-group row-fluid">
            <div class="span3">
                <label class="control-label" for="TaskProgress">@EPMS.Web.Resources.PMS.Task.TaskProgeress</label>
            </div>
            <div class="span9">
                <div class="controls">
                    @Html.TextBoxFor(model => model.ProjectTask.TaskProgress, new { @id = "TaskProgress", @class = "readonly  toBeDisabled" })
                    @Html.ValidationMessageFor(m => m.ProjectTask.TaskProgress, String.Empty, new { @class = "required" })
                </div>
            </div>
        </div>
        <div id="Notes">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="notesEn">@EPMS.Web.Resources.PMS.Task.Notes</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="notesEn" readonly="readonly" />
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="notesAr">@EPMS.Web.Resources.PMS.Task.NotesA</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        <input type="text" id="notesAr" readonly="readonly" />
                    </div>
                </div>
            </div>
        </div>
        <div id="CKEditorNotes">
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="NotesE">@EPMS.Web.Resources.PMS.Task.Notes</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(model => model.ProjectTask.NotesE, new { @id = "NotesE", @class = "readonly" })
                    </div>
                </div>
            </div>
            <div class="control-group row-fluid">
                <div class="span3">
                    <label class="control-label" for="NotesA">@EPMS.Web.Resources.PMS.Task.NotesA</label>
                </div>
                <div class="span9">
                    <div class="controls">
                        @Html.TextAreaFor(model => model.ProjectTask.NotesA, new { @id = "NotesA", @class = "readonly" })
                    </div>
                </div>
            </div>
        </div>
        @if (userPermissionsSet.Contains("CreateTask"))
        {
            <div class="control-group row-fluid">
                <div class="span3 span-inset">
                    <button type="submit" class="btn" name="Save" onclick="validateForm(event)">@EPMS.Web.Resources.PMS.Task.BtnCreate</button>
                </div>
            </div>
            if (Model.ProjectTask.TaskId > 0)
            {
                <div class="control-group row-fluid">
                    <div class="span3 span-inset">
                        <button type="submit" class="btn" name="Delete">@EPMS.Web.Resources.PMS.Task.BtnDelete</button>
                    </div>
                </div>
            }
        }
        <div class="preReqTasks"></div>
    </div>
}

<script src="~/Scripts/plugins/jquery.blockUI.js"></script>
<script src="~/RichTextEditor/ckeditor.js"></script>
<script>
    $(document).ready(function () {
        // this is tak weight saved. need in case user update task weight then we have to minus this weight from sum of project tasks weight
        var taskWeight = parseFloat('@Model.ProjectTask.TotalWeight');
        if ('@userPermissionsSet.Contains("TaskCost")' == 'True') {
            $('.' + 'disableOnLoad' + ':input').attr('disabled', false);
        } else {
            $('.' + 'disableOnLoad' + ':input').attr('disabled', true);
        }
        

        // diable fields if permission not contain TaskCreate
        var isDetail;
        var val = '@userPermissionsSet.Contains("CreateTask")';
        if (val == 'True') {
            isDetail = false;
        } else {
            isDetail = true;
        }
        if (isDetail == true) {
            $('.' + 'toBeDiable' + ':input').attr('disabled', true);
            $('.' + 'toBeDisabled' + ':input').attr('disabled', true);
            $('#Client').select2('disable');
            $('#ProjectId').select2('disable');
            var descpE = '@Html.Raw(Model.ProjectTask.DescriptionE)';
            var regex = /(<([^>]+)>)/ig;
            var result = descpE.replace(regex, "");
            $("#descpEn").val(result);
            var descpA = '@Html.Raw(Model.ProjectTask.DescriptionA)';
            regex = /(<([^>]+)>)/ig;
            result = descpA.replace(regex, "");
            $("#descpAr").val(result);
            $("#Descp").show();
            $("#CKEditorDescp").hide();
            var notesE = '@Html.Raw(Model.ProjectTask.NotesE)';
            regex = /(<([^>]+)>)/ig;
            result = notesE.replace(regex, "");
            $("#notesEn").val(result);
            var notesA = '@Html.Raw(Model.ProjectTask.NotesE)';
            regex = /(<([^>]+)>)/ig;
            result = notesA.replace(regex, "");
            $("#notesAr").val(result);
            $("#Notes").show();
            $("#CKEditorNotes").hide();
        }
        if (isDetail == false) {
            CKEDITOR.replace('DescriptionE', {
                filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
            });
            CKEDITOR.replace('DescriptionA', {
                filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
            });
            CKEDITOR.replace('NotesE', {
                filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
            });
            CKEDITOR.replace('NotesA', {
                filebrowserBrowseUrl: $("#siteURL").val() + '/RTB/ckfinder.html',
            });
            $("#Descp").hide();
            $("#CKEditorDescp").show();
            $("#Notes").hide();
            $("#CKEditorNotes").show();
        }
        if ('@Model.ProjectTask.IsParent' == 'True') {
            $('.' + 'toBeDisabled' + ':input').attr('disabled', true);
        }
        // Set project start and end date
        var projId = parseInt($("#ProjectId").val());
        var projList = '@Html.Raw(Json.Encode(Model.ProjectsForDdls))';
        var parse = JSON.parse(projList);

        $.each(parse, function (key, value) {
            if (value.ProjectId == projId) {
                $("#projectStartDate").val(value.StartDate);
                $("#projectEndDate").val(value.EndDate);
            }
        });
        if (parseInt('@Model.ProjectTask.TaskId') > 0) {
            // Set pre-requisite tasks end date
            var preReqList = '@Html.Raw(Json.Encode(Model.PreRequisitTasks))';
            var parseTasks = JSON.parse(preReqList);

            $.each(parseTasks, function (key, value) {
                var textBox = "<input type='hidden' id='" + value.TaskId + "' value='" + value.EndDate + "'/>";
                $(textBox).appendTo('.preReqTasks');
            });
        }

        var requisiteTasks;
        if ('@userRole' == "Customer") {
            $(".readonly").attr("readonly", "true");
        }

        $('#TaskProgress').on("blur", function () {
            if (!verifyTaskProgress(this))
                return false;
        });
        //$('#TaskProgress').mask("99%");
        //$('#TotalWeight').mask("99%");
        $('#TotalWeight').on("blur", function () {
            if (!verifyTaskWeight(this))
                return false;
        });
        var idOfTask = parseInt('@Model.ProjectTask.TaskId');
        if ('@Model.ProjectTask.RequisitTasks.Count' > 0) {

            var tasksList = '@Html.Raw(Json.Encode(Model.ProjectTask.RequisitTasks))';
            var parsed = JSON.parse(tasksList);
            $("#dualMulti option").each(function (key, value) {
                var id = parseInt($(this).val());
                var element = $(this);
                $.each(parsed, function (key, value) {
                    if (value.TaskId == id) {
                        $(element).attr("selected", "selected");
                    }
                });
            });
        }
        if ('@Model.ProjectTask.TaskEmployees.Count' > 0) {

            var employeeList = '@Html.Raw(Json.Encode(Model.ProjectTask.TaskEmployees))';
            parsed = JSON.parse(employeeList);
            $("#dualMulti2 option").each(function (key, value) {
                var id = parseInt($(this).val());
                var element = $(this);
                $.each(parsed, function (key, value) {
                    if (value.EmployeeId == id) {
                        $(element).attr("selected", "selected");
                    }
                });
            });
        }
        $("#dualMulti").pickList({
            sourceListLabel: "Tasks",
            targetListLabel: "Prerquisit Tasks",
        });
        $("#dualMulti2").pickList({
            sourceListLabel: "Employees - Number Of Tasks They Are Working On",
            targetListLabel: "Added",
        });
        if ($("#TotalCost").val() == 0) {
            $("#TotalCost").val("");
        }
        if ($("#TaskProgress").val() == 0) {
            $("#TaskProgress").val("");
        }
        var siteUrl = $('#siteURL').val();
        $("#Client").on("change", function () {
            var customerId = parseInt($(this).val());
            if (isNaN(customerId)) {
                customerId = 0;
            }
            var url = siteUrl + "/PMS/Task/GetCustomerProjects";
            $.blockUI({
                message: '<img src="' + siteUrl + '/Images/Gallery/ajax_loader.gif" style="width:75px; height:75"/>',
                css: { backgroundColor: '#FFFAFA', left: "47%", width: "6%" }
            });
            $.ajax({
                url: url,
                type: 'GET',
                dataType: "json",
                data: {
                    customerId: customerId
                },
                success: function (data) {
                    populateProjectDDL(data);
                },
                error: function (e) {
                    $.unblockUI();
                    alert('Error=' + e.toString());
                }
            });
        });
        $("#ProjectId").on("change", function () {
            var projectId = parseInt($(this).val());
            var url = siteUrl + "/PMS/Task/GetProjectTasks";
            if (projectId > 0) {
                $.blockUI({
                    message: '<img src="' + siteUrl + '/Images/Gallery/ajax_loader.gif" style="width:75px; height:75"/>',
                    css: { backgroundColor: '#FFFAFA', left: "47%", width: "6%" }
                });
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: "json",
                    data: {
                        projectId: projectId
                    },
                    success: function (dataFromServer) {
                        var data = dataFromServer.ProjectTasks;
                        for (var i = 0; i < data.length; i++) {
                            var textBox = "<input type='hidden' id='" + data[i].TaskId + "' value='" + data[i].EndDate + "'/>";
                            $(textBox).appendTo('.preReqTasks');
                            //$('<input>').attr({
                            //    type: 'text',
                            //    id: data[i].TaskId,
                            //    name: 'bar',
                            //}).appendTo('AddEditTaskForm');
                        }
                        //for (var j = 0; j < data.length; j++) {
                        //    $("#" + data[j].TaskId).val(data[j].EndDate);
                        //}
                        populateTaskDDL(data);
                        populateParentTaskDDL(dataFromServer.ParentTasks);
                        $.unblockUI();
                    },
                    error: function (e) {
                        $.unblockUI();
                        alert('Error=' + e.toString());
                    }
                });
            }
        });
        if ($("#TaskStartDate").val() != null && $("#TaskStartDate").val() != "") {
            $("#TaskStartDateAr").val(ConvertDates($("#TaskStartDate").val(), "gregorian", "islamic"));
        }
        if ($("#TaskEndDate").val() != null && $("#TaskEndDate").val() != "") {
            $("#TaskEndDateAr").val(ConvertDates($("#TaskEndDate").val(), "gregorian", "islamic"));
        }
        if ($('#IsParentTask').is(":checked")) {
            $("#checked").addClass('disableList');
            $('#ParentTaskId').select2('disable');
        }
    });

    $('#IsParentTask').change(function () {
        if ($('#IsParentTask').is(":checked")) {
            $("#checked").addClass('disableList');
            $('#ParentTaskId').select2('disable');
            //$("#TaskProgress").addClass('disableList');
            //$('#TaskProgress').attr('readonly', true);
            $('.' + 'toBeDisabled' + ':input').attr('disabled', true);
        } else {
            $("#checked").removeClass('disableList');
            $('#ParentTaskId').select2('enable');
            $('.' + 'toBeDisabled' + ':input').attr('disabled', false);
            //$("#TaskProgress").removeClass('disableList');
            //$('#TaskProgress').attr('readonly', false);
        }
    });

    function validateForm(event) {
        var counter = 0;
        var projectId = $("#ProjectId").val();
        if (projectId == null || projectId == "" || projectId == 0 || projectId == undefined) {
            $("#projectValidation").text("Please Select Project");
            $("#projectValidation").addClass("Error");
            counter++;
        } else {
            $("#projectValidation").text("");
            $("#projectValidation").removeClass("Error");
        }
        if (counter > 0) {
            //implementing focus back to error
            if ($(".Error").length > 0) {
                var divId = $(".Error")[0].id;
                if ($("#" + divId).length > 0) {
                    $('html,body').animate({
                        scrollTop: $(".projectDDL").offset().top
                    },
        'slow');
                    event.preventDefault();
                    return false;
                }
            }
        }
        /// section Starts ---Task dates compared to Project dates--- ///
        // start date
        if ($("#TaskStartDate").val() == "" || $("#TaskStartDate").val() == null) {
            $("#projectStartDateValidation").text("Please select Task start date");
            $("#projectStartDateValidation").addClass("required");
            $('html,body').animate({
                scrollTop: $(".startDate").offset().top
            }, 'slow');
            event.preventDefault();
            return false;
        } else {
            $("#projectStartDateValidation").text("");
            $("#projectStartDateValidation").removeClass("required");
        }
        if ($("#TaskEndDate").val() == "" || $("#TaskEndDate").val() == null) {
            $("#projectEndDateValidation").text("Please select Task delivery date");
            $("#projectEndDateValidation").addClass("required");
            $('html,body').animate({
                scrollTop: $(".endDate").offset().top
            }, 'slow');
            event.preventDefault();
            return false;
        } else {
            $("#projectEndDateValidation").text("");
            $("#projectEndDateValidation").removeClass("required");
        }
        // start date
        var tempProj = $("#projectStartDate").val().split('/');
        var projStartDate = new Date(tempProj[2], tempProj[1], tempProj[0]);
        var tempTask = $("#TaskStartDate").val().split('/');
        var taskStartDate = new Date(tempTask[2], tempTask[1], tempTask[0]);
        // end date
        tempProj = $("#projectEndDate").val().split('/');
        var projEndDate = new Date(tempProj[2], tempProj[1], tempProj[0]);
        tempTask = $("#TaskEndDate").val().split('/');
        var taskEndDate = new Date(tempTask[2], tempTask[1], tempTask[0]);
        if (taskStartDate < projStartDate || taskStartDate > projEndDate) {
            $("#TaskStartDate").val("");
            $("#TaskStartDateAr").val("");
            $("#projectStartDateValidation").text("Please select Task start date according to Project start and delivery date.(" + $("#projectStartDate").val() + "|" + $("#projectEndDate").val() + ")");
            $("#projectStartDateValidation").addClass("required");
            $('html,body').animate({
                scrollTop: $(".startDate").offset().top
            }, 'slow');
            event.preventDefault();
            return false;
        } else {
            $("#projectStartDateValidation").text("");
            $("#projectStartDateValidation").removeClass("required");
        }
        if (taskEndDate > projEndDate || taskEndDate < projStartDate) {
            $("#TaskEndDate").val("");
            $("#TaskEndDateAr").val("");
            $("#projectEndDateValidation").text("Please select Task delivery date according to Project start and delivery date.(" + $("#projectStartDate").val() + "|" + $("#projectEndDate").val() + ")");
            $("#projectEndDateValidation").addClass("required");
            $('html,body').animate({
                scrollTop: $(".startDate").offset().top
            }, 'slow');
            event.preventDefault();
            return false;
        }
        else {
            $("#projectEndDateValidation").text("");
            $("#projectEndDateValidation").removeClass("required");
        }
        /// section Ends ---Task dates compared to Project dates--- ///

        /// section Starts ---Task dates compared to Pre-req tasks--- ///
        var list = $(".pickList_targetList li");
        var tasks = new Array();
        var selectedTasksIds = new Array();
        for (var i = 0; i < list.length; i++) {
            tasks.push(list[i].outerText);
        }
        for (var j = 0; j < tasks.length; j++) {
            $("#dualMulti option").each(function () {
                if ($(this).text() == tasks[j]) {
                    selectedTasksIds.push(parseInt($(this).val()));
                }
            });
        }
        for (var k = 0; k < selectedTasksIds.length; k++) {
            var tempDate = $("#" + selectedTasksIds[k]).val().split("/");
            var preReqTaskEndDate = new Date(tempDate[2], tempDate[1], tempDate[0]);
            if (taskStartDate < preReqTaskEndDate) {
                $("#TaskStartDate").val("");
                $("#TaskStartDateAr").val("");
                $("#projectStartDateValidation").text("Please select Task start date according to Pre-Requiaite task end date.(" + $("#" + selectedTasksIds[k]).val() + ")");
                $("#projectStartDateValidation").addClass("required");
                $('html,body').animate({
                    scrollTop: $(".startDate").offset().top
                }, 'slow');
                event.preventDefault();
                return false;
            }
            else {
                $("#projectStartDateValidation").text("");
                $("#projectStartDateValidation").removeClass("required");
            }
        }
        if (taskStartDate > taskEndDate) {
            $("#TaskEndDate").val("");
            $("#TaskEndDateAr").val("");
            $("#projectEndDateValidation").text("Please select Task delivery date after Task start date.");
            $("#projectEndDateValidation").addClass("required");
            $('html,body').animate({
                scrollTop: $(".startDate").offset().top
            }, 'slow');
            event.preventDefault();
            return false;
        } else {
            $("#projectEndDateValidation").text("");
            $("#projectEndDateValidation").removeClass("required");
        }
        @*var reqTasksList = '@Html.Raw(Json.Encode(requisiteTasks))';
        var parsed = JSON.parse(reqTasksList);
        $.each(parsed, function (key, value) {
            for (var k = 0; k < selectedTasksIds.length; k++) {
                if (value.ProjectId == projId) {
                    $("#projectStartDate").val(value.StartDate);
                    $("#projectEndDate").val(value.EndDate);
                }
            }
        });*@
        /// section Ends ---Task dates compared to Pre-req tasks--- ///


        /// scetion starts -----Task dates compared to Parent Task dates----- ///
        var parentTaskStartDt;
        var parentTaskEndDt;
        var parentTaskStartDate;
        var parentTaskEndDate;
        var parentTasksList = '@Html.Raw(Json.Encode(Model.AllParentTasks))';
        var parsed = JSON.parse(parentTasksList);
        $.each(parsed, function (key, value) {
            if (value.TaskId == $("#ParentTaskId").val()) {
                parentTaskStartDt = value.StartDate;
                parentTaskEndDt = value.EndDate;
            }
        });
        var tempTaskStartDate = parentTaskStartDt.split('/');
        parentTaskStartDate = new Date(tempTaskStartDate[2], tempTaskStartDate[1], tempTaskStartDate[0]);
        var tempTaskEndDate = parentTaskEndDt.split('/');
        parentTaskEndDate = new Date(tempTaskEndDate[2], tempTaskEndDate[1], tempTaskEndDate[0]);
        if (taskStartDate < parentTaskStartDate || taskStartDate > parentTaskEndDate) {
            $("#TaskStartDate").val("");
            $("#TaskStartDateAr").val("");
            $("#projectStartDateValidation").text("Please select Task start date according to Parent Task start and end date.(" + parentTaskStartDt + "|" + parentTaskEndDt + ")");
            $("#projectStartDateValidation").addClass("required");
            $('html,body').animate({
                scrollTop: $(".startDate").offset().top
            }, 'slow');
            event.preventDefault();
            return false;
        } else {
            $("#projectStartDateValidation").text("");
            $("#projectStartDateValidation").removeClass("required");
        }
        if (taskEndDate > parentTaskEndDate || taskEndDate < parentTaskStartDate) {
            $("#TaskEndDate").val("");
            $("#TaskEndDateAr").val("");
            $("#projectEndDateValidation").text("Please select Task delivery date according to Parent task start and end date.(" + parentTaskStartDt + "|" + parentTaskEndDt + ")");
            $("#projectEndDateValidation").addClass("required");
            $('html,body').animate({
                scrollTop: $(".startDate").offset().top
            }, 'slow');
            event.preventDefault();
            return false;
        }
        else {
            $("#projectEndDateValidation").text("");
            $("#projectEndDateValidation").removeClass("required");
        }
        /// scetion ends -----Task dates compared to Parent Task dates----- ///

        /// Task Progress
        if (!verifyTaskProgress('#TaskProgress')) {
            event.preventDefault();
            return false;
        }

        /// Task Weight
        if (!verifyTaskWeight('#TotalWeight')) {
            event.preventDefault();
            return false;
        }
        return true;
    }
    function populateTaskDDL(data) {
        var projectPrevTaskWeight = 0;
        $("#dualMulti").empty();
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].TaskId != parseInt($("#ProjectTask_TaskId").val()) && data[i].ParentTask == null) {
                    
                    projectPrevTaskWeight = parseInt(projectPrevTaskWeight) + parseInt(data[i].TotalWeight);
                    $("#dualMulti").append(
                        $('<option></option>').val(data[i].TaskId).html(data[i].TaskNameE)
                    );
                }
                //$("#dualMulti").pickList("insert", {
                //    value: data[i].TaskId,
                //    label: data[i].TaskNameE,
                //    selected: true
                //});
            }
        }
        $("#prevTasksWeight").val(parseInt(projectPrevTaskWeight));
        $("#dualMulti").pickList("destroy");
        $("#dualMulti").pickList({
            sourceListLabel: "Tasks",
            targetListLabel: "Prerquisit Tasks",
        });
        // Set project start and end date
        var projId = parseInt($("#ProjectId").val());
        var projList = '@Html.Raw(Json.Encode(Model.ProjectsForDdls))';
        var parsed = JSON.parse(projList);

        $.each(parsed, function (key, value) {
            if (value.ProjectId == projId) {
                $("#projectStartDate").val(value.StartDate);
                $("#projectEndDate").val(value.EndDate);
            }
        });
    }
    function populateParentTaskDDL(data) {
        $("#ParentTaskId").empty();
        if (data.length > 0) {
            $("#ParentTaskId").append(
                $('<option></option>').val(0).html("--Select--")
            );
            for (var i = 0; i < data.length; i++) {
                $("#ParentTaskId").append(
                    $('<option></option>').val(data[i].TaskId).html(data[i].TaskNameE)
                );
            }
        } else {
            $("#ParentTaskId").append(
                $('<option></option>').val(0).html("none")
            );
        }
        $(".select2me").select2("destroy");
        $('.select2me').select2({
            placeholder: "Select",
        });
    }
    function populateProjectDDL(data) {
        $("#ProjectId").empty();
        $("#dualMulti").empty();
        $("#dualMulti").pickList("destroy");
        $("#dualMulti").pickList({
            sourceListLabel: "Tasks",
            targetListLabel: "Prerquisit Tasks",
        });
        if (data.length > 0) {
            $("#ProjectId").append(
                $('<option></option>').val(0).html("--Select--")
            );
            for (var i = 0; i < data.length; i++) {
                $("#ProjectId").append(
                    $('<option></option>').val(data[i].ProjectId).html(data[i].NameE)
                );
            }
        } else {
            $("#ProjectId").append(
                $('<option></option>').val(0).html("none")
            );
        }
        $(".select2me").select2("destroy");
        $('.select2me').select2({
            placeholder: "Select",
        });
        $.unblockUI();
    }
    function verifyTaskProgress(elem) {
        var currVal = parseInt($(elem).val());
        if (currVal > 0) {
            if (currVal > parseInt($('#TotalWeight').val()) || isNaN(currVal)) {
                notify();
                return false;
            }
            function notify() {
                $.pnotify({
                    title: 'Sorry',
                    type: 'info',
                    text: 'This task progress should not exceed task weight and must be number.'
                });
                $('#TaskProgress').val("");
                return;
            }
        }
        return true;
    }
    function verifyTaskWeight(elem) {
        var prevVal = parseInt($("#prevTasksWeight").val());
        var currVal = parseInt($(elem).val());
        if (currVal > 0) {
            if (parseInt($('#ProjectId').val()) != 0 && (parseInt($('#ParentTaskId').val()) == 0 || $('#ParentTaskId').val() == 0)) {
                if ((prevVal + currVal) > 100 || isNaN(currVal)) {
                    notify('This task weight and sum of weight of tasks of this Project should not exceed 100 and must be number.');
                    return false;
                }
                @*var projectTasksWeightSum;
                var projectsList = '@Html.Raw(Json.Encode(Model.ProjectsForDdls))';
                var parsed = JSON.parse(projectsList);
                $.each(parsed, function (key, value) {
                    if (value.ProjectId == parseInt($('#ProjectId').val())) {
                        projectTasksWeightSum = value.ProjectTasksSum;
                    }
                });*@
                if ((currVal + parseFloat('@Model.ProjectTask.PrevTasksWeightSum')) > 100) {
                    notify('This task weight and sum of weight of tasks of this Project should not exceed 100 and must be number.');
                    return false;
                }
            }
            if ($('#ParentTaskId').val() != "" && parseInt($('#ParentTaskId').val()) != 0) {
                var parentWeight = 0;
                var parentSubTasksWeight = 0;
                var parentTasksList = '@Html.Raw(Json.Encode(Model.AllParentTasks))';
                var parsed = JSON.parse(parentTasksList);
                $.each(parsed, function (key, value) {
                    if (value.TaskId == $('#ParentTaskId').val()) {
                        parentWeight = parseInt(value.TotalWeight);
                        $.each(value.SubTasksWeight, function (key1, value1) {
                            if (value1.TaskId != parseInt($('#TaskId').val())) {
                                parentSubTasksWeight += value1.TaskWeight;
                            }
                        });
                    }
                });
                if ((parentSubTasksWeight + currVal) > parentWeight || isNaN(currVal)) {
                    notify('Sum of Child Tasks weight should not exceed Parent task weight and must be number.');
                    return false;
                }
            }
        }
        function notify(error) {
            $.pnotify({
                title: 'Sorry',
                type: 'info',
                text: error
            });
            $('#TotalWeight').val(0);
            return;
        }
        return true;
    }
</script>